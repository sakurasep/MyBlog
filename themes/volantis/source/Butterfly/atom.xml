<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>九月的生活</title>
  
  <subtitle>New Dream New Start</subtitle>
  <link href="https://blog.sakurasep.site/Butterfly/atom.xml" rel="self"/>
  
  <link href="https://blog.sakurasep.site/Butterfly/"/>
  <updated>2022-04-19T16:07:06.117Z</updated>
  <id>https://blog.sakurasep.site/Butterfly/</id>
  
  <author>
    <name>上杉九月</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从零开始部署Hexo博客(番外篇一)</title>
    <link href="https://blog.sakurasep.site/Butterfly/Hexo/Hexo%E7%B3%BB%E5%88%97-%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <id>https://blog.sakurasep.site/Butterfly/Hexo/Hexo%E7%B3%BB%E5%88%97-%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</id>
    <published>2022-04-11T11:20:50.000Z</published>
    <updated>2022-04-19T16:07:06.117Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误,请重新输入" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d8816ba79f16ce02e1ab8dcd8ac23f861f3b976802b0a026be5aebe97950f5c3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/Butterfly/lib/hbe.js"></script><link href="/Butterfly/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本文章暂不开放</summary>
    
    
    
    <category term="Hexo系列" scheme="https://blog.sakurasep.site/Butterfly/categories/Hexo%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Hexo" scheme="https://blog.sakurasep.site/Butterfly/tags/Hexo/"/>
    
    <category term="零基础" scheme="https://blog.sakurasep.site/Butterfly/tags/%E9%9B%B6%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>从零开始部署Hexo博客(一)</title>
    <link href="https://blog.sakurasep.site/Butterfly/Hexo/Hexo%E7%B3%BB%E5%88%97-%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%90%AD%E5%BB%BA/"/>
    <id>https://blog.sakurasep.site/Butterfly/Hexo/Hexo%E7%B3%BB%E5%88%97-%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%90%AD%E5%BB%BA/</id>
    <published>2022-04-11T09:55:00.000Z</published>
    <updated>2022-04-19T16:07:25.965Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误,请重新输入" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b83bf7655485bc460d51d85ae9b70a9071762acccedccea9d5c3bbbdbc7b2120">59a3ac7d8ec9f30ddec936f67fb6c1c5700749d0cae6a2e5b4efdcd8477f86453b42e38e21c87d87396ed23d7087130f2ecdce96157a4b5bc54048463b38d71461e7c4d386dea3486fd25a8444e230b91570c2c0421d5a26c63ef9176140fc99766eecf1d7d5dfd03231917a4a5062848fec2cd09a5d2b1630ef18f9dda6611f0fea9a42989af7e304be08a35f8a5be79119ed968e73eccbc268e640b5688979d815a2c454ab4af69a9c9b5760b9999f9731f88fb8bb0f177946b78147992d56f1d4709f80a4a7ab17ec6ae7e4c4c1b73dc1ed2797e2a3d11ed2329b1fb4297cea921b5f61606f4c00d9000abaffe2368e344fc771e5d0e40a52fe66017c6fdd5f8a0c0052eeed98635167396657538c762848b44d4ca267def774e511ffa1d2ea98f487d015717b3b151e27888ec6e4cf29d53f28f837f26b1c4292153a079d39bedb1894d7034ecc26554644b96d69542617defbc9448f443701ed560c953f6de8a9c20d31be6310b33c2ccc0e72252df9ae39f49f04c9cdbcfbc939d42b99848758c9d1b5019cfd2178f80611c12bda15be6e0f55c93f5a13030a780fabf1177e6e6f1f28f836c4a6cd80111d4407bf9715d5fad1f201c707f5ad9dadb0502a0d54a065b18919df6c3c683b9d8469510e68d3cd6c41b63c28c1d8b5cd70fd337bbcabeaa0161573167877bf8d3f14b23dac8b6ee19a84835fc066328e864f3aa952222b38d90f144432d47d53a4a6082c18abe4a7d03b551919af777153c0cfbc1b1b9a372d464411e87e207259c0b24e940b2dd9d29662683bc170eb8af9f0291e08f3255b704ad3a47d60a57caca5b7cb70dd392377263698d2e140c09957c6526e65af4847af27dc17483d40142e7b1cbd13bedad72289d38392fad3c0933099f5372cd3dc7cfaf34c0dbfddeb07062c823707bd417daef6be0e104d97adc9023523711115f8cd62968a5ca8ce6534ab63016e62bb7115ab556fee9d7f60f7f3d9fbe25874e265f416086d21423db0fb1536ff24c52dc8d5559723a215e6d7502e294c7ac85fb363609ae147282d096914e0d1fb4f10938d58225f8a6ee12cb0a0a0b896d2039c867689e5a2d1dce3d4779c3a47815d336c118d5d40bf77786e4a93a3d63f83742681995b8169c67d7ce88155457a4afef3976bf03776ec0e592a89f8e985a0e63011ae2e5e94181f6e636635d0158d353efd9550589efe1548ae3611c28a7f6f2b31d83e26b7f4145f426dd835a2225d19e2ea46e45cee03fda20b086b9d57ae42d888d8ff64c1d78ce872e20aabf593ae48d23521dd23c3fcae85f60e41857c36be2fd2767b698f8c18e48290a1bf57531577cdf1038a43193edf5047562ced8e925fc885c2e27479fb13b6fc1d4f678e440cb088c82cd92dfca26c76f09bd19870955fc7d4aea885f1088a16462a5f18baea7e462489964cf081c8be79f4e5b6463ba1ac8c3908233459996e91a53cb1c8f0d3b71cd25decf1fbf79a119f8814fa3f7b015c37e1129961c169f16a47c9afed7c5305683d4539d8a701119d40048a410926b437d42a781e8d12ebc9902f9bebe33d0bd6747a7fcd57fb39c7660146c12d65c36bcefa7bcf9bb7f7c2b28d6df0510cb5dc82b325ef909df363edf4999ea7d5cea2164d1e2689339bf94b307d59b216afe1279a3b94ca5d156e8e429ff9f32505daaeb7a5467b177a2f6f40eb8a7603f0810d9aec7e6813c1d19aa9661dcdcfc5875280edff2b01a7b4e0b0c04eb9f1afac974b33abeea2b90a0aa188ea5163cd3dbeda67a3d7da861d30971afac39eea6cc1b23bbbfd6eed2abcdb47f31e74a17e602688a7e34e4a2f2965ce83fa5a86e13adef4018c3ae498fd4ce9587f8831347413694a66c545ad9ec6987c0336807974aba09075a5be8ca0519a71c40f472c35119fa654162c362efe4ac59b2606310f36547a7e61e6b3aa29d3b2dc2fc7d097e49fd3f903a790f0c862095bca58c0c3aab2497371a7507e86f8c1e662d114509c7748a52ea677614520094d995030e4b216c550b452c416a10050aba4d7669b200cdd9963f90f6cf1121b196334f9658675bc624819a45bad2cd185ce6ecb13c44d270a4f7640f217d0d7668d28015937343c69a5030b96c3213a7917e19163a7faeb6526afc09807a3fd3534598475d8f65a878d3e210d6ffde6314bdedf6e97a6fe9c82423fe6e365d95eade6275bc29a7e43a9fa93e5a86d6d055fc1c394a5c1994b567646706b12b05c2b96b5fb199793702713cf9149034dbdb8f2b58976c8a0626adb8ec14866ac294629b360938345c579b8f8cf59007b0982bb9dac322d9c3f9f916a77023bb587f3ff66f45be564ff5f81ba0bc7eb04c3f54d8cc53234879367da83bd41707a4dae7c3fc04097a2fb251a1039623a66a3a4d2368e13034fef719ac6d92d6388e2650366f545048958e0c53b49a1f4a2550a0dd25cbfad2450f8849fc8ce62e3357114f45ded1ad827f752df444eee62f3d7ed43d91a22af96e871ef900f78430e8c35ef95c31cfb5e63857b5687198378075002795eddf14abcf059dbcb160bb4df4b504f119e960d29980bdb196de88dd0433c50eee04e16fc1b17020747d6574f3189df5565fb60afe090144f05474459833a88d019ad668634e77681522f60af1c0785f5dc85375bc8ca2cd3215777ed0b270c9456ebdad8cecc7097a5b4470e5bdf4edb0aae75d7f59c8d46371e655eeb2e359c1c3a96260bf5ef85c6c7a202a9fd95114c1ed53308c175ea1cd74d0de9b9a7249578ac4d79f7272c00f920feaabdf9b67ee8ed555b3aa5ad6efe6940ae03741e5bf9ec57c7cd9607ac5557ba2964a44177b37401bd6c620b44228c0501f325a4097d055cc2c3fa4d794a6e6257bda83badf233926a7813d4792cd62313832b8d621e4e46684a2f525d94b530108aa93f688a06146443fe3a64416a6a7fbddfdd4ee0185044309945f7f03dac441aa993a44336159f605574db91ddb183d34626792010d44b218a9bd300a2d0f12883e03abe553f07cb70ba3798517de31689310143caba318b70bdc5d0cf96fcc50f111ded75227445b55e4f36a5b17ba56d686b6806d821c81ad1b024d6a9698775062be40227a32182b3d91e52f40c524fd7de10b5ffe0a0acd6dd091342ec524e8b0dba30eb9b2a52000fc2a76853e3cbdc93618ed6f835884d8c2ea7a087c0cb7aaf86c94c722020d31cd7c5ba8fe5b056e7c30a347f94e77bf0cd21fe5515cb2216e4803304786cd806b83fdfb7dae59317ca4aecc24566ccc2120ccc2b9a1c0497f600cc5093c31c3d8d69e893c29f5139b0a34c991121c06d6377b130754ba025ea2f0acc2b469f764ac990803b424385f08730078d2b90dfb27555518022fb3204b6ed6522f32a04ba728b2c0f3376f50dc07357b4e80a69c37280edbc803afb0e32f468486ab8f991ba2ca5c229e5cb139a20f3306dd7b910b7dad71ee02036f9502b915c4c265a893ac18c9cd3c080a78872ef8b33bd58a3e0848c99ea87f3a2e447cfd8f666f8fe8844c3a32ee543d3f1480304861127c2e5bc064a20a62930c91614a2392ac3bcfdc64926165a3702e08de969973813054b1a5ebdd68c8a023ee368601af8627f89b73102d2451d3af9d8cf11d361796e8ad1df8b5e973169f4af47b5e8cd615496819c70f42615bbddb840d6eb3db0b60122f53c9bf2611f13305363cd924c7c6d099e7f0b61b1f9817c344e16fa2fe3b4b98dedf17a26451c253ffc94af1c4c287cd81ca64317e67eba0d6d739f6bc787071f7f7379c5b07683c98ddb380782a620d4ebf56267aa41c034b5fa5c95d81259413bb22e18c10d145db7a9e453bbba0702579d7765e99d9c48562f07d96bd0b8ca4dee7d3aea9026ab9bd8169aec68a8dcdefa1fa1fd9ffd715d5693e73f829dbce3ab20b93c649d2f8d296c3c32a844a62b8f8b5f9cb56ac32212aa3384dca332157abe921ed5057a32b6cf3b909dc7fecafff7e142420bc6753621099734d4f9d234ee2fed65050b11216677b47f03d899f9b55506fa6f050379926e9b5563d56bddc892b66312f7aa891792ac3d7ec7788ff7d55d8d67d9715b0b8cdde5f212517ecf22a952fe7f92def18847b956e7296bc47808fe6b9c7ceb453bd062c84251325483346356393667d69be027ee3a4b721883715e7394e7e8636af29ffb172b112839c3b61f9039e40b9401af431c80a85ae0cb3269e0ab29378501744a3f0b1cac8d10af9c0d049f7a3a22abddce707d81da1eb40b072927a2b4fca3dfbedb343474ebccf510cb0c2a1fde59ddbb5db066f9e23ed20a6a695a86ffa0e601a8db6c714af78ca01d55b002c2ad7f50e6e3b2a84ac5af65867fb93ac9207132aaeab0444f092cba2d5de6c7fcc8e03ea9aab3206d0f208ca1d0a75328788eb2742f2621b5faa9e57b1e3d008bd20c52c539bbb1a0ae6d7fc5fa9add06b20a4096aa74cf5b086a9150fb479f5637715978ba91a9a3357a864a13b6d650e526278f42b8a8551f793af73235947ff64e5d22f6f1052d225388d8a1a041bc90a531fc0ca484bec9629d60b6924b80dbc30c13bf92d909a3a03fe708db917db5158b1272ba87b58cabf6220c2fbaf5c2e21b5e379b70e25014483b613193a8547d6cc6109b17978ea8627431f378420219006dad2abd67824658fae6c1ae1a22670c86f9d846a9cf4db5402e1be82832bbc522ceb9c78261cd6777ab36bd32c8e9d51423def17381e1fdb0600a9d0cfb2cdd420d30b344119ef53e275fde2ae329baa2c41b4e9dbdf146ff4ab80a16a5f0462e94ed3cef81d2d01be2a401c99d1deaafa2abdb1dcc6b5cb5f2d331f0fb61e6305b33baf2494aff362ffb590cbde23ddafd2d07adf39808011479e011b17b1d37dd6fea2018446aac61a6d4fce952c0f9be5f07857994f8f270fce045b47c328cd5e5b2ecb9320de571606b0a50d486a9cf3b9b1cdf9617cccda91009331caafe26c89e401e58f9a523743751875556c5c9ce4518e106689af19954d3c07ef7288efa13087eb4f60612220bdd0c163ce23319f33d970a31991f0472dc337229e3a0ea739d1c18ab347e3fdcfa091c43fdc38028482164b064cb811d64f3599235dd7e7c6b6d3892fded6917f40d0429d15690b647644b97b1d7d727b4f8f6b5bb2c07f928c8fa24908bf4e3402ce851659fd62067baded8c6fa920b2962685b5ed068207971df22c261eb9106e5daa96de2b3307951514cd203144bdacaa07ba69b30e9921fc2020c645115ae85b2943ea501aeb5a5b4fd05ae1701e315469d543f84fef0db05e0bf128e79bcbbca5ce51c3121c3376faf0173ee38b3b01c2934f4d650f6affec1091cc6227eb07c3b891f756a3e319a4b453d7a4e144c947188fe0fe548e9c5d79fd496c549455b38608c4d237f7d6f467af2d7f34d9b6c61ed7ad9765e1ee12efa98e59f20ddba9330ba048db61dceb0a9b4b9914b26870a353d2f9bb0d1efc185b47aa2b2c495ec22364600de3373e7d7759d61f43ac98b95ef6ec01e0df95e6b18e0c1f366c0320c1768d30ca40111ac4917e2dac99fe4ce4dc758ecbe8b16bfb9ecbdf1aad2d6f4b46b57829049bef05ae25a846165c1f911d082dd91ed7021f4d443af9a64d5235eef102b164541afde93250eb206f135f1dbfe3957fdf5b43450d1d9e00f7879990890d23ce035b33916ca508a0793f0f4bbed93fafa6707374d2e1966faa956276ee1c335bc0c5c41f822b2b2e5327ae3b979c82b30971508250e54cd82964353211b3da14223571aec381061aa82f6aebd7fbe0315cc71c2d7fe0bbe99950e0932c92296419c0dc1153e5eea82c7f1946e8bb1a1d96990570b779dffe18bc2029b81b2fd98560029fd986b1999c8854a0ad6abeed0cbec2d9642814d535a1b0d3a2cc1dc7cadda20447840dbea8a122615b5a70a380870b2f9ddba0732703ea0e6cacd293bb58860edef39fa6eb4be319f0cb1f0c1b256c9b1c050518371d674b440722d85c7782425e78fd1c7d10644d6cb1a73ca5ee20605f6bb15e896e473c52ef19141c94819c02f4e8a24ebe218ca8d88fd843d2cc94f2dd35f576e1f71074b2444905dd3b4be3ed1a5539dff2c39f07f5f41caf62679e410aee50cd2a4002b366782eba4bdc56400dadc7562fc32e56787804875535b021242044ec0781fd764e5b5c483172129f336afd50280f94bdf0d2894ce4133dfc43c419e2b0c6a06531e962fec60e25cc50fa3b93de192fadd3cfeabc04db5636b3f14dc9859f3f50b80521179d9daf82d80358d6bf51a9dc63c8b2bfd76d5b5a65b44a095859a711a903fdda2c241daefa4f032932d9224aacf8454e30ce38b1edd9b2d0e8c2997538ad7c6288a0e51c45f9c9916211f56cd28d67a797d430492bad7972242a9d9d0c460171c7af9eb225885337ac604d3cd9793d088d448201fdeeb90d317401aab5f6f774c8b95ecdddd286ac2616413f000667218930fca8d90c42898f63bfdb415f3239c17d4246e1edcc3499430e4e4b1d80e6a1de06bd32cf3b197d3f5e463d1b2e21467cd8283a6f22b86d6a35e43bcfa9179b99bd54695b325fc001293cde0a7197082eaacf78efc3766889d1123ae4e54b637cc3b81b200be26d429394b8a2815db6af65a5334ff2f56d7d34b3aa0e73af88259e443cba9558cdacaceeebee73fdb9a284ff67a58edddbd4b5eb142b6f051b015b6bad151bf50e1273202d047bdde6e8b651785218998368ce29ffc655b7141dc240a6104387a9a1f0cc0eedc188295af88832b523d55e3943a963325cb7b8a3322815c02b76f53305a968e8f0cfc31ff445f6a418ae1ae83655dcb31c1743a1f8138a79f6fbbbc2adea2fa847f19abb10d820e5d30fc6df8740b2c43595abba41baf51f58516919adb57a78c6e7e912efd58b9aa5bd886389a2d029c9038749b7bbf311491bb53c5f67e9ac08c8b56ea0ceddb36848c75d1aa2e296a5b3902364c02023b1111fcdebb0ea199dfa48e3e2dba5859b00b85cebde85d3c86453a6044f708607adc2eeb0f8bc5bfc774036d0fe751aa3a10cf4002ae7a0aad29fb0e5177c04b77f7b4d895e35048f250ea3e41dcc795def6f70430a6921df1c2e1dc309f7a4bb0106a800e4c4c510bf0d736e6a2fb8f00f2ea7fd4f9abc549e4732cc4315c66042134b323405c5073fd2a1e3ed83fb2336c06b672868ba8ee31c5b583e11d479e765c7a31f2538d41ba5046a87197fb76d23efe65db929b6dbec7bad2ac55b6b41a14a103d7c2354e5c3ec55b68bd568eee73fb8dde3442060c4e3a0373d95c89dbb72451571b510dea5820a9255b5e57e2f522866967688b503f3efa487e8b8fc5e8196ea5cb7ee460ea506caa39ad37873a5dacc433e3eb720499fd2fd073ad7ecbeceeb6f58eae921cf602b64e34527563c28355de1aebb5cd60ae95bc3ba2ebb5599709fa0e225e874e709d5b5489487bf350c04439e7082d4640a6081a10a00399b294781a6c32f4c984678460f59201019f82568ef5964e971545ee2f22a577c52def7d0ddefa75367a9ff41c00dfcf98a731403dbe17dcfe43bbce1ebb387c986c09e009963434879cff05630adf6c1850bafc66391d2d988bc5968af9d0f55c4e77b9572e412ceea63daedf8eec109372d71e6a2b823e589e875c6af7dc9dac748843a6db8b4031eea8b71d3d1cbf1636bb6b7341b099f3b25a72889f718f9b84049e4ecedcce35a6676fe79171dfddaf92ff2b39affa6066e4405749cd567326a628af8df6f25e195b9a1e8803cb06f7fa5708b51747d3d25cad2b30d13838b8a0e23b527aa5aa2e6011af4f257188caa7e04d5497f24a0e21be43ff8259a19e7b5919b13f50b787a81aaa44c2fe1eabfb0d896727d5cdf0ff387d2b10d353bc212a4aa610c34971c9b1944cba00b132205b4dc1312b678b4bc1ecf21bbcb4462ae51b5ff45f5946dad1b70b5aa49a65083f9ae72f4f572970224bdb1e8c024e714fa44e150a73b504023da303941c90c94f41af164121832a6ca5c26a8f02ac885667f7eb44984b730c3cb7212add91d9a08494e9a346fbda9875d027a6b9438451645040fef83b2c12c6d6f5997e622fc565e0b22007fd7130fac9e0612936d8b5731fd487710bc71d63ff5102fa586bc63e730e8fe8eafc129d7c08c289657828110c3f9d2ab951a372d655104452dd8b100ba7f344441f245d304fdd64e3a495e472f0440093547fcda6d4fdee4f9e3e25a28a3c8da45300426fef9d1cbf01a6a1c23d74aebafbddf5fe6fae753ddd7bb7157ba411593a073b1cb119ad0d4244aa85d186f005341de5c0921c62149f563c72355920421bbc3ba354460726768dc8745591147206926349bce2731f40905c891e544fa91c241a55d2cc5347b5ea59ce524ce1c208f79c3b74c10717749b3e15d52b1c6c6f14ef37f8adac4b3c9196d11b24a28ded516eff213e020eae802f196eb64c46647a37cfa16eabfc138944d0b3bc73d2733147a124da0050ed8345ea02b68f2ed5223b89f04e0bd4051e281b498c88af68928049f353798711bb65b07b9671b0ab6b775e8b1bea8fe2a32e421f2363e7c987229cd661abe1bb884883be89dd2acc6a23ee2d8f2509f87f42097395b8565af0d0c9172c6be1beb2eb66eac65058c4df095d49f92075fc29e5bc7f176d11300b91f904063feef5bd5876bd78b0d826083ae19a9437ea8b5817ff9bae424565a3d62cc5e9beed774d5724d36368b01443cf1f747648907dc95959e2c023b8b7ba2e561fb1fee63cf3f52e7c06851c936e51679d38a90abc211f1dd513c9661f14c75063d5ab26ec0d8d7935dd9c2cfe1c11d373532f4f29ce92f95d2287052fd90cd3ddf0795c0e4ac995fc20ad66a143857867269874b4d524475c75cdd8b3e4815b54a859e6f347787f6da2cb2f29ee2bc63b4493d02a72be9597a86a34798db32ee9e35ab7ffc0b8543c98b8e8c0e6fbe03a72b4edb21ae932357106b639c7d7d2f59d4d98f07227ab2283ddb985977097fd823c57c431f6ea0b81159908521aa78f75295ee399392e662c1a2c1544c09d20be14f1b3dcaec97b667731dd9ac5ac33ef4b9b01823e8e7c9527d53c44251dbd19332c08660011734d1dbc4ea6376a48dcad3ead666b26ea844025685aa02c157f2c17abde33c87ede6a0b8480be87246867b59278907d55d8755eb1d67f3c0b295b179e52af50faf0b5fa0a2dc5de81160874a0f5bc2b6930272fef4b07ca110a8d7854d8349fd2f4a72473ea41ef3786c62daec91adac1cd70e42bbff4daa4eedd4503e9e0955020fadb483c8dae51f99c71abe30d0fb5cc047a37316fae0d911608537a529f5a526a95ea01a349c1c9f9392cd30273d1496479d4de825480cb8ea269d2d27e131bb01ea56709af90d5a9bcbf7e885b45da488051515668a25025d474e62af28bf517c2a36f5479523f92a3f073ba3880404870a0cac8e86ef7e5e5b6e205a72780e64de7b814094bc2187efc822a4e6ec4572f619b4f13f65eaceb8bee6c352e67f6461985b416ab17d11d6806dd1440b4e5e228891801e8502acb297255c6593f4b056ce5f807413a5a5fce85ac365523b266ebfb16505a6a35400a5391a9aaafb63a252d552cd42a0ed7250785db05e20f0bf8937dc73f2420e2100df1efc457ec1d522e5decb218cbd7c63d2104c398a2e55659678d86114a820d6db4e64eb15b20629873199cdb8dbc005a1c6102e09031dd249582a884ec2fc410aa6fa480b96b8b82ea74bfa9721f6b6daee5d36307bd11fb15f84c1875d1bf09745f3b9f09da2569feb26d6c584c59bee6b1da54f0a28f86ba7edd554d6b81a61c6f96780fa54560337080e28acc87f09d27a4e50f3b96e315d19965008f5c4a01448b2f640dac8c24a1d26ec458964210f1b5da25c2ee12ac62feb4da4dbe0beabc839a2e886973b37a331e4946231f6bfc24b5004a91527d1da926d0f046a8754c72e29b9050752e1fa6a826b46645110f49d140d516f4cfb4c9d6b8fedcb5e493c74bf0f09635bff7cd93fdd923c3fec6f0f91bbe7bdd1687f7474c8f6b0bd84d667b4c9a3cd4b37bdd80f0ec94e4f167175a9df1e3affd186a690639f31f7417e1e67dd2b041696b1c4c6162725731666e8779ce22e38c8324640cbff310de1f81adf92b8c796adfe5ada427c2976fade8b8ed071a70aadc4a88a36956630106981d2d8abac13f740fa50d8ed8af175acc7e63d8de597cc4fa72e8cdd2c5852df8a791efe4a40746e551799eef592161ee37e943a85cbc7124a4f6ead4d7b2f2001f2115a2e7af84d91836b2bd18263a561649a8e16117eeb7fddf0c381377d5f749d2de4f4dcc5efa4e3490da143eb31d1fc3a69243dc0da0b04708c6ee60b0cd8322098af5a3e4914818464723d723806c583eb9ae3f6af9dcd6064c314d9251aaf2cf2b7ff7742051c612d3c234a17bd94e2dd16c55a4a0da2c7daab5d7ddc2793bbceec8e91bee1a68324bdf249aab3fe0ac7cc436ea24613ba663078e9b57bb8377420b563436ca6a6b1502e6f77232d50c9994574505891e463b01d247dea135e7cea30a17346fbbf0a511ecc34aaea5a292329aaa0f04dce9d1e0753fdbad4c05819e489e28efb401e175e24af818c306d7e190994968f3a9e33b735ffa0126b4567ca3a530459cadde6de3d27e3246a60183adc9e7dc44b10526515481a981954af980599f207eb75b18d997baa9069b6ac5840ab0f29ccce258687af0074970cb7ed498297671fbddffc69ad188c02aa64063a753e0d82a79c573bdb9a30d33da733ee814d914b9605c41980afa04cf904515a01c0c4cd51d8c3f87e91f185c84c91f28930db60fcf2a0666aed49fd0cf4a176cf1d0243da2237a50f862566a49adb7cf732b4ed3d3b85e153f17745ac99b87e11a799d3c8af0773422a92bebb5c83886963a036ffd6c7e063119b679c2bb06f033858f105b972d97541f78babed4a4d608486334f55e6dc62f3214fb79b28705b24ceb93863ac2fa5becbcb85a02c3ffdf042979071e73ce9fc6fea0623182650a3d416370294d62190d6f5609cfe4b23d47f99850f312ea88618cc48337094c1995f0dce3b68af49c810d6a8c5d9bcc624385f0b05caa076e0b9195852ec837d874c152180e9439253c02d7e309d9ccfd8f84b41722bdd72fd4aa4a50d347bd14aeacbd5da0759d6574a58028ff1c20e25543ed1c5442874bda1185ab442d37519163d9d963fd2d63814cb8c91142cef76e9b354a7c57e499454912bf94328e0c4ddc4ad52921e384a5eac66dceb2f4faefcc2c6e0cbd1ba73cfde3b35891da65df30f3c594b5783fd746d6ec38871fb0fdcfe8c70834fc208c86fdea0e11f71b120d45c440592881816025c2e22ac55e386216ac7f17138128d339609befb4245ea2240bfb38362c8f9f54e822e04db5cb44d64a2624e7b91a4f017d9a9b9401718b306199c1975a761c17c577c843ff2a0c9c3fe0255f7efe4392ca972fb7d530cd058a76395d4d10aba47cb05775bca87774d835a73d96de95b71a69cc438063c82b59c4cb3634fa482de5155a2ff7a04f4785c8f4637835f33d139c5b9805e8b09863693aed77406ea146246ae0e38cfcf26703274ce09f4fc53965aba4431a1822fccf624757dc1db5f7e48096a35937f508a49340c1ea7b6cd05b262ec8a067d967d2f9c2233429c3b86dbdd7c648003b4de1cbc2ca546c565864376ef09f73dd1095d3f3b2c88dec22b845158cc53b91fec70f20a11c92a799d3880ad0c576d3ce0a22636360611cb7681436f9ad19139aeb8670befde2b15e9bc07ba10ac44161db039f65cfd625cf2ad7dda177e865372f09cce82a70650801ccb685bdaa607d88041d957462f2c710a2cea0fbafbb965ff9d3844a37a85253e34d9001ef359f9afa60bd7f241945b264da71628f1f5b85f6181f02363d7b1ecfc54757a3779a62882147e515da8e0af0ed00e9a911064d697a25a91dd839c5d42cddb2b81d819b0f1d5381a7624deda06d6ddb15ee7ef633cba3cf50b763c8f5b296fe27a116aca1b60e8094fff2120e648ebb106e93babd7a24a1ea65839a1667733ed40dd5b6322248edda2a1afc750287acd2674b700df25d8179ce43ee562443c6bfd4bc1053bcd6bbd543b05cf91699c2fc7f6a37f1d65d7a3b4f45c38aa6fb4e4b131a2df5b3f454d90aba15a0df8081ca7ed57fb079cdb8d062e996c9e8b61cd5351df6a1bf737f852dcff9e9f31bc1d8d654f63d629c213493ea27f74e8be219ba6a597509007c9e618322f4f13c13319840aa1bbe9d6d72895682e81650beb9a47d992cd03099f72695cdac2de25da7939f39d6c0c22d12de3bca9d56cca3d941677fb5ccd9b37e33bf457550838ea3a77d3d1c8a5af441925efee6dad939990a0da5c0edb7e92e2850c8043f711ace9d1b02df5d8d85c38c2666fc7d19192165cab31f8b7b6f846bb6ca1c4448fff347497f0c75b17650886e5474ef701c94649b0005dfed420e413fffce15d69ec8002a35f190a81a64be3c109e2ed8062a8fe0e25ae84db25bfdc38d964fa647c5b713dd73672efaecb71d5282be068c921868585bd17bcc4dfcf6c144ced5a29b87561b8cad7ba9f524299ffdbb34b2bf616cfc192e2de11080c2153c3cd7a2d99339f9e476a8283e1cb3f4e4ba5e848aa8ec8392f9214928b2ea89e7794c5ba16ec0548d5b9f89dba8525690c113aa4ecb22a5d7eddda8b3d75c6a094924aa9383c1c5678a55ede90b8a5e1bd012702de29c72e349f54e02550025f048d6de74a5c9a10f16f148cfc7be6b0d5cb7388b39492211c5a98361d4ac1415ee4b7921ce512423100e04b07e850ed84b3e7c6bb51eb4bfc02773c6f3ac93e856990cf69e7e8dd832ba78ee2b21a7646fefc40016260845b345406271965390a22254a7146692ec6b1f0ace0953afdc5c5da3544850e5537d9c6ef7299c7fc93dac5a35685d409526e6ddc9b94aa67e2a4a90fcbf6b6931f058c0590203e339e57ddc39b08383e0a91902c7ee9399a1418b64663baf653ab1888151786b3c50e455cb753fba27950707e6006075d4b139980212206118a1c92c3df8a37161c94046b8b93e5882eb6e634e47a4e97bdbb6dcb6326679c77969c56cb3eec327a8c4e6f63bf3c9c988915bc168ccaab3c25ef989400e35b5e1e76e05ba1c2af172580fc1053fe0fde59d7c2a2b6eb38165abc4bd07882e90524a2459f59a6be9ddf0505b74d3c0451e06f6fbf0da407a82493112773c77b3e33bdc0c8eb68a428efde2294b90d52919ece3cf1e2d729ceddb96ae9fec46b90d6bc4d7037182601667706887eaeb128225c614cc2f6bfa51166352357186c8b3c5e73480822450a64c207fd62bb767853286bce58ac79ba2499614fd021a4c736fdd35f30d4a51ca1aabdec7d8ec2082f93084823b66016aac035ced0ea88996fc69dd5b334531268ca1e9850df189a925dbd261b2b32d2c737fc2c4f2a503d722592a85cecb1759435a1a03db7c7dd3c141f692f20fd7957809f5a9952ebe5ba747ee6c6ed501620233a65644ded269ca934be01ae0ff7baf5a25747cfb06d5d40555b3d6ac487616d375808f48308d14fc6151c0e297e56b31263c457db4457fd31208eff575dcc7bd2466e33916f802d8e52d30dd76162998325009dc47d5b0515ac7a69abe688b6ba650610e30f24a2d4ca774fd97bcc570801c69b3d39e4ad49baaafb9d567cf8452027e8627392053c7475a85e04ba9901c0afa106a25d55019605aabc8b6c60db1e7f58ccc6519ec1c98e4b20b1960c0372ee59fa9b2f366b06891ad461ca275ed1526138793ba67b0d2760ebb6e1e50c6ff20116b723b685213fdfc6e0bbe05840f56db26768f21ee32073bf7c668ebc8522d3d854d53e254a293578f1d03ad9c9649b1e9ef51e7fa05ab8287190dac7eb61686286ed22102b05516ad6ece485a3b85f2fa38b7e33260eca6a60d817b8e15b1673890a94a4bc0891662d486a984a3356223a5ec6a6e9f4a39ec15fa437b23c0dbfaa160015c799a423495800f463ce5865297f33c1f0638c13b1b8f754cf7b6c08b93eb07a0f8712658011ff6650bac40548e7398dedf03c397569fd1994ccdcac8509cbe46f968fdbaa298b0b5fba9b9657ed57eaa0c77946e5288b0c53ced945f7836317af4aedf1a143152d4874cccdd5f86497ee437d5ba068f875cedb0aacb76265fc6bed55498cc39d548eed218ee21ee7b82decb61b6df53f800d250d5320cc66644fb74c021547d350d70fe35a126a7ceff6f650a908ba02c4c911583b4e35c7b4011b1cd5e135f1e4de5ab317074169e168725cd9560f22657295d15f3031fb9be1ce4b2444448236b7fa9538f95f1a4d2e4b9cdf297e66a7d81b67002b0cb5ccba95bd5b601c142f550a0503a5c63f66485442eeef3d9e5d8ea1c045ec4aa1caa17071227a3a5b4b2e692b1abd84c0ed8eee15369ebe5209d2d61ad37985abadc19a7ac29b2dc13013f53e59d4bd3850c20999b4d53685e4807fff82b801295b61290c978eaa8eb559ce7afcaf48fa02a606fc7fa80c4ed4101572bd17461f7ec2e285cfe0d38be2b6ecec8f9e1467622b37939b80c4c29d723f65b64759711e99116c4a3c7664305a7e70d14cc751c1e4b846aa9ccd50b68288e688a1e85bbcb0f8332e63c62cb942857fe99b6a8fc8b2d1eb4cd6316a5c588c7c2c1ce1b0542eb808fadc4829d9a2ca6248789a2b21b01283829ef223b9c4df7518ab35d0e7aa5f3a3eb70002d2cf485de2eb5266fbbc5b41e72f67652755a98c9ebf8ebb2ca671660c3910b38dbb6d102b0e1ea0e9657e8471588d0520ce38f5cd0655b5bf66e4b096bfc2993003e45c4ec5d00dba9f200eb15ab5781c8d7e0fc5b23b869cdfe887fe19c1b5b210803bb38e7961c7116b30a0964442d460ae98d0adb1f0d92c35f80057a40c694aedca7e2a286f02a234a841291c3904b75cfbd689c455d18e5a007e210dd23265dfa34f5668bf96878445411b17042ba4b48347d063d999da42055e3250800e1e84705ceda7c28d1d8ded852b431f7b602c1553f9ed8295c7d4f1be4065df968ab3cc5698e8b984d09b5f21e6dbe98eb36607dc28d748bb116ac22b7b9e44c16bd6b0514193f22cf68605777ccc23fa4371e5a133e682928da77b6e0a84e0043d20756ca9575eac02bcfa514f5c6a54473dbe484089083cf0ded9f66676a0983c252eb17030732d01c001b5406b410c1ae7389b55285fbd85473d1ac55dfc9ad1a508b72a688cf54320256c0efd840938a65fa892750460b3dc75d1bbb82828a20631d00777897b7892b5137d1b8ebbcf43ee41aeb59c2b260c8fa9aef6d85d2f4da2adff9600bb0084c1020eec3c49790bcc31fcda530542ad629e7bbc5f797979666aa3644ddcef50038f0ff05fb51d966ed0e0f0e17b503c5866cb50515f54a3d6ab25ca42d357ab52c36da03858090c2224315244940a841ca480e0d018e61ae2d29310013757f6f70de0afdb6a9a321f644c50d7ab75b4bd3834f0827ff6d6ec9f0c817fac07029cc1ca789799c4940e566c459aa5260ffb9f9fa79cccd28a7edd1ed9daede2e1088f0799a042eeaee1852e3c853f635124991f05b252ad492b539c4e89df3d5752f4e235e8260aac86e79056d77c536964a9c87c5367daa1d2ec0a50731f3832410f394d2defdd934bd2682876d48a40a9bfd64adbfe26139bd9ed2ca33cdb487e4b4fb17bb8b71a243b2cb0c759638667bd0e876c089954b0bb04e540926536be9903c6cefb38f9de5999aa8a051160b5a0e093c60aa6a52ae3adc844b5269d18dbd93c30c0e5435d54660b6b0699b1a8705f69cd0db21b81ddcbf1944b6c73a07a6cefc06bed13c1902db8f4b02028f92bf518d97726966fbd1e9e2d133ba7d91b7e3af5317b2f27464c310521c9131a200e77905a15a04ee47a78947d6a1ba4385a1b95b221558763857daa75c7624c974f90c957bc9c75c67a2fd714bf6548c9298ba45157c0bd6c4cd1847493702e66183de833f7f5a3c1caf146f1f70a00f514135d95bfa6e77ef317692f1bfa7cd47cb88d330b3c96cdca231463c885cb7a8ba0cedd3b381d56524127c6367e80b1bd553ca79975c81fbbaa7d65bc8c2bd327e94a48be76c25092e4e77c2135203a5f81d5c610c90f319fae3bf686e9b80d87913fc485dc934ab596798a2e645a9660c80e87a6b9741fc800ebcce5caf31ee6e0ee8c0d907f818a62ed32afe0b3857c1edc2d17ae136fe0af404cc9e93933094404c309f1fe542a51fbd94820318297ebf9af44a679c7aeff234331ec9d2d3e1ca64ea44722e392765d4b8af56ddfcb4176a297cbfea063b650014e993189be579b9759c3e6c6867dc65131713470aa059d995765dce17a4f2a711053090ff4465c89d46785b15f95750ceb6f043325b31e4b573b7ec8b6bd2a8616cc88114ccf6c232733108ea21e96e60599efca30e7ca6c07a1acdb84ce298d5140df6f7c9792f1958591228d309dcb44a39415205de983d6a08aa4063b677bdda5b0d3147c3e57702eeec36cac779f80ca27a3b63bbcfbc8ada964849ff685495f3c283545779060e99380c3b95f8c9de23775f9c1fc843900cfba62b61ac1cb32899654dbee70e9ca95359b26f8d28f11021889d970c25afdb5da502af89bd412ce44876d62ed3571e0ed9fa229b1c1be9443ed0151413b896ef64a53099866fa0a1c8bce6f96fbfedcf6f6e3b6bfc98c89d66123d5da0b53ad978a0cc53555d7dd27a6dac029ec563806a8f2b9d150873ac2c345df907b940dd27eb25b273232441372ad4bfdf3f5346b5a1bfcdfe953f1365534b358a639cbf2bae4f98ac47a306b48b4f76fa0149be74ca3ab1fdd8a79dc00018e3e46902b55047f9083785107f8603b727a9d803fcc0794420c2a135c4f6cfa213cdd5d95bc3e54395f1d32c673fe3f9d19447acbbb53b6aedec9650e819ff0a938c8dbc679d2137cac60e2160de6012785c135ee10302226352405ea70c81871449781b4fd1e2f80c2c8be65b8462d2a125e673682c0be517f1492b3f7d87cdd09117c0cbe73476d5bba29d1583f7e198c5adeca5686c241e85c40acf171fd7e9dcc9d2a30bcd55fcad01484db4c1bd90034d8b0bf3bc6324e4350bd6be3ef05fe78d36201e1b1ec5daf0748fa6d68143e5f517f3ca88e8508b129320aef7afd30684c121275fd21201256d48825b7e97afc10b999e1a248c64e985d7281dec8918390be287e318eaa8db62b1f18b153bcf39c6d3f483932e9f73635e6abc5741d27f1d043e451150c95f08c85a0c5ddc63dba6d83c67f7c64e4b551fcd9f12611a33340e74c7eaecb510a7f0fb1405491105952a13ad431861197bf5dc5bc77b4c729ea601eb7e5f88b12a7354d9d6c0a473dc663696c584404a9fee43e3749efefd7a28504da3d79fcbbb1086a307bd6fb509708ba408f152001b3231d321f09fe0bc7557196415f668740f7eae20e42a79ba452f1221d517f237b5a88ea9ba9d30c95ce9f3cff10325625a72ac8546a0db90c4ec39d9a4c56c844189519b43124f29c976eeea385ad1340ce0ba587d7f3e0044af0f739f2e1ed90f0b41c18217266ab08e8da26a12f72ad071f461e598db11fadd9bc7d53e3294a45bd41e1d98204e10e7ac145fd8522af27efd7bbf09fa2f78976d60eec83eed3e748ffca3f9527f10b805a94f82d695ffe8bf917f85fe33d869e73a578ce6d62cbe6cf2832b0ed2ee51de3cef2fcdf51a9d141e7ad66e705e7c75e3998cccaf071fa5194cfac8cef1d19f55f20a1ebd426eeae4846ad8df63c604cada18c5d395b4ca17e310aaffc1896c498967eddab9a296a87b60b8c22c2d9a74ee55e409c4600d3a6e9f8df862627a19d0cddf831a488bd11f059b21cec5a37bbede7b905576184a00f62196cc0a8db42c0c4f4ad623fac4e411ca654a68a943f588cc1280a70b2f36e93fd622e8eb620e2364ed0aad3b3211bb051c75d510aa6450e46105f11baac2b2755828770aafba569c5aa3826d0eb78c69107a6110a6a8140fc39fd88caad9176e085f7b2138318eb6fcd2d56cf68f29f242ea78c85dfed46af3e7cfea472b29da9172e0411b28814b1b8954107a285e94320189020d34b2b0a1b71e76ccb4cc272d989105a7b7d6ada2e719f08f02eb49c6f14826f3add9508cee8bd4f0b02bf69cad5f1f9ed65167ce3fc2e6a97d84d9e6801d805069cd0b2b0457df878a1c9f518c57307c08843bb651b57037aa0579f925a8483fc5ae37ead7c50d64893177f2c14576afa1825f041a56d1277cb8ae4ecf2adce698cf1398297483b24c3df4a067bd5b9fef4a9bb471a5ff47cd52ad30eaac1601dd1bd4967098e3d91c34ebcb7607ce4321e1bc6b3146f0dbcee58ad60d6a7b9191229e8188403aa997659fb3301e52f5f75e3df9cd4edab6f3d06d2162fcd90ae4ed1b6459c0197e6b86e01b95f695906dc1e5b0a37776fb8a9f4df7f68e9bf6bf4cae77d5e69395d7db311bcfdd4fee082d79294e270a9600aec2554b5f68d88881acfc081f11833876d16e291eda81f76b78cca1a9f36b563c32f2ec56f61aa94bc638eb5facf62bf3227b99f9762b7d5dc64df0ff1fbeb1c30173faab8dd31f181b7f2c9370d4964eafc487c9dd8a4493fe183dcec819609de37210759ecd1df82f5a87e95d2aa1f5056d3239b6adaa4cf409225ece3b2f74ab285ff0bf75b89e8ad512773d0112fa771e96a2bd5b02a8293379752a2b2c7a7f2eab10e70fbe3803a08edab9b53dcb04d7cb5303d1312ecccd4519404217dd82ba1cbf2aaa455989770a9a26ef134090fb24ab108dc122fb61e8ce701aadc83d7fcc6bb80606018d36e808a167fe55600dd14f7c1de587074f7a737f190c92b7482785a404c18145d936588a5134e1e59d3c89ecbba2cd65cf8210c04e9b10b2df9882db1a902e778b8e70f1789023ecd3b255f98ab49a98dd94ce8d59f2ed2c06cbd45a6a878844690eced9b125a709b48079057f5cc8a750a4317255fde0c2fe4f831da824e6a2eb242cb6264a5829526fe5cb2fe8541788e69fe38b62cb817099ad04c8f0747c0c289db6e8f78bffa08e50c8aedc4be59bec090eb73b0c1649095945312212e5755d005b894188a37d544b0c1bf44de381cc5c7c43c002cb5fa219836c2fa7688e851ccdb1e5b10d2ec45cb3af437568881b18503785b88e8bb9261101aa653e63eb8723494d05c217eec0a8bdcb3518e9114362e0389ef892caec82cd4f84ef918e8b9dbded87942d025666a8818edb0a6fc34e9883f0fde1266b21104a84f97c01bcf210b10e3b580e06c364dcfed79853adb3c06c5c8f2391d596dda73e185a770c8212af511827e2e013bb6abea77b624859966d725116dcea4d120446570f3af0f6285183729abe5ca9ebfcff9a32d60966e4ba12a60a9d8be0b14a0b019abe76e0269d5be4d1853e21417c8568ab7fd6f660b3f27034b8ae2e17cfc153d361642530bbb9fe1df15c4fbee0aa055f45d5d02afc567e82d814178bf0253ab0883725066cfdf3a0e50f1cca1c327d5879d772c3672419db9a8777b16efd1f0d6168919ad3472f9dc6ac2f3aca0555bab9bcf4210407672f4fbe6ab5f3c150c9177a4ea239876f95266703d51bf7f33ff754660ff1899b15d23eebb62f9e0b1a1d12c4e038628df5a96b1cd8ad5ead3451cb6fac52426b78821ec9de92c1b0cdec9f37af58b66d4c846bd978acdd9eb0cf865b2df7dfcae77ea9c9254d051e1272d852d5bba891762b82f670bb704018363006c3eb3ca62d5ff1aa65d738ae8dd869fc3485e18a9bdf331367925b94f4fe9da18f13a9b64ba8d9b5bb23f2fc9c603a568ec70e803b4c1142e8391b66f9d02b46c8d6fb8982bbac4cb9d8e51a582fdfd9dd545e700daa25b0792443808b28cb36c5db346b8b8243d0846ea11b3e25ccb000fef678abceea981093d1a2a4225848c278aca042b016b3140575bae436515adbbc5902f20e85e071e7decbdb92f858ac37f1f9c6517ac5535d4cdf60468dbd8023a09b83af6d3569eabd2e1585417283460e9ad8ac1c8d047d943b69e2bf94bf8c82384e431e547a401c9cd14e9a0a169a1f7eedf65b08fb0d7bb90a16bd4f32bd67942df21f128e2cf8f43e288c9219ff5036bb70e647c88b5321242e5d01f423ec6694c7d497e8548747eb7c05883d0b9b3572127e13ac6b72910b808913d3a5f50677f08985a6e32faac2c95058c48f57bc43212f35a089f69eca8a2cbbec7ac4a1ae97d124831be5c9e50d36271f15bbb78a0e40c6cca083dd0f816787f4976a25a7b122558a280a65f882233737a5543a6dce2c96c8973eefa86199e4041afeee600b89c8410178528558aa22dc99418cce5a95e339724b44621141221c8ba2412e155b19b0dec0c0dced7cb3b61fd18827cae4d3bceafab8cfb3819bdef60c529fbfa22afa17615f682fad1222589ad57e29e095eb2a60bc0bd8f6e4a4529c1546febe63ab5a5fef76e4c66e7cfb6008b054960a577f578b74eacb10b8ebd1072a226d5f8cb905846416495b82904269ea62a272f7b51ef3cd4f86e71493fb6331a635069faa833a0b7261739c49ad7d382b48b58fa2cbb2a540c50348d5a703a84da216db862d36dafd3e371dbf81182d311210365b3d7c0499c4c1be47a5c2ae53d363c0d2dfb2b10c80da26d69925f87c58801d4524c71c818ff2f9dbe7b761f492d20afc0d75b67dc111eea7d13373f6f0b65f87c35a69dc56ea06f78ec796f9c2d27308006802afb78fc0ad99f8b0617647b663a32e48dc52e183b2f30a70a6cae60d62792d114e3fadb8c3b65d9dfe8b994993294ccbfba20ba29426cc5b777199ec3cefe3e00e2983b18f9141ac997df430532ff593130dcc6a165616fea00fbc2bb405857662998cfca0b5606bc07b1286aadce5c4ee302056546afd029020944cc276c2dd3c17f324352a57a2d03436bae9562637f577c01e08a8c84f99bbf49837b18bb8c23c9179cb1a6ef0e35f2a87215c74a8e8e9716857368208be0173a0dafeefead30c5fd05fd2c990ffe0626ac0b013a4141a3d111806062386cd4e027034b30fcc59b9a86a9d9a6b456f9ddc7775236f889bfcd502c59db0ad67a45239613a6933e8bc407b21483512e1f2b0d8144c03e3383133c7bde513620a226b46a90c6b981fc79ce30308d81154ee76f4c8bd8af54f4acc7d588af8a002e8c57e4dfeb350f1706884a5bed4f4fdd817efe4c448c7f54634ef7f86af5f18536d3e2233b2bb45cdf8df0dc45cc147c79f902339de67478ad8b9fb4894590842289825ac1040df882070e309915759cce525a5024d68952a8d5e4480c64f457d55b5a0d34d9b4481910f93fe93461ba1a7896dfcb332b1a0ac4f627b966c9423724b00eebdbd321cd982d85f405c36534e70e2b14872b25ae778af159829b51302ef66730681343f6be40867616aa053bf48293f404a7a144cdba6f919106a5ed8015ea462f87b05f7fa575f850f242567028a26842a0e8d32995bed1448f62545474b30f7023fdcdd0a06258f2787638dceaba573e04a4c29b7efab71320a1ef311ea6e4fb167e723daaa49bac8ba4ce14d4cea5a6b75e8b5935310a64590166fbf58bccccb0785583733f1d8a207d11bcfbeedf2c607c8c2965693e041e9f6ac086b4ac92a301c2fe85d72c8bc46d31600268a22ef12e107d61fc7be835f9f22b912486f3e6265f2c05d7c4c25903126475efb10d12d530fd74aa57762ed50ec3e0015c173a26909abf1c4b24fd87db63a11986d68f45ed2d1a4d7b002effc8a0c549cd146bf75b59cbce8d14e00784b1c5a60b965d2e4c43e9e11bcebc68eb275937c9f16f5277822a478374f6ac83d145301d0bdc3591ccf0eb23f732d10de2930c8217596c526ca1b5044de1d93c8bc65348361eb1c6bd6f2eae45a75080bc393fdd14c70c48f49ffb67bcd733e0844593310869d9ae8f1ea11da0a02dd1ef5be1d15452eaade69b87afc68fb8887fb7bdb169798444956064f2e2ef270de71f340348b78059e50c9f36ed106ae3139a986ca3554c174dc7d0066b28e2456cc921e28f5002fb56133ad0ba5a012faa94ca9192b9986c36b6ef37bb0be2810c161cdc98b16da77f5c903f24fd3bf3bab38d047cb027b27e19ee0ec66fcc114c29e1f0ea77e1c4464635ab4b053e42c89987260d3cb5a46e61841f417dc0d54804c4be88085e1b4e10527335cd792eeb06eb7174b475e0f25be7ca9a46391a869b3b51ea26521983cc971e463051d857426b1cea3add31c69cb92e25a50574093f866c74435a58b8dd5c9ebb77fbfad317a58ed2098cada630c80bfc38ad641f4267921350e3de4f3cfc79890a61618a9a06536081af1eca801147a0a71200e11cd98f5818f4093026f6ecb786b7edd0fef17d1d64f52f7152ca91213021aadc8e56e1f54055fbef5e1e71f138218ef1ae6c77f2f4f04b8586a91cc37367eb3a749bb0524a5e22c4389e071363df8370fdafa5d906434c63f6c3341696c1893add3f5ac23d9b0bb11dfaa18c387e2813975e963113ef3f2533829ef93b461ef2b59bc6e4f79a3fb500f1e56114709bfcea6ded1f9111562510a755c13f40d897a44bb62ca3374af764d306eca748663c64f650da41ea612c237b29489347794c67a59e1c1a1815a8f86d9e492a180108f73ef66915bec32879ab02739952884720547d84e655f4b1a7c91c5c90be6293df29c44b64654e56c62a2790968c8e4930636791249928d33dc9aa73151933e6bd0a6170e59d887a37f2d2a6052227cbf8c12b3e119c86657a32db88924a15631bb7c4ac3bffbf3db91689192c5e76a31a7491cffa7cf929d96f262b0d564db1248d138d8640c21eff6b69f7022ab2823b2422f827a6c5d7d93046275ae03463da62e144cb611a47c09b254292e17b4d8913fab498aba0712b46046c3e0ea781c0d7af5d9694ea8da64866d4253658373c564149d56208159deb6efcb9ccb7730b09c62040229ccaa770e48da25b60a3ca86ae7ae101c97669a750937859f8b2399443d2375f29cc8803d8c3b7ab9aefa3683b6b64f5e113b1bc03b51afc3f03d5e5fabf7274f579ed7f8553d656c71c92f7b9034e175bd07bd67b28600169c05b37e61c05c18c144e5e993ce4e27321e55858b73d803db00b2b90f244e0b1816537a6e6cc2ec5092b72bfbebd69874aba6c597afef1734f094f9f791dcc68bcb926e74f96c2e8c75c65e37143c02dc98d610af074d816670b41f1d19fa5f674717159732a3a44c65376543afaca2030c8702771244eee18c09978dd0d50956141630552e4eb1ae067cf401fcf35f9f32bbd026c794781fec45017adfad4dafdb01d4168c30e0b7c6622615309c1f49e447a346649a4796d4f773e910ecde938e3c0f08b904beaa671f063a5f96913840eb104eaaa4b1f11691ebc592b9cbf9a12e0fb0edc0081899635a14a3018fa1f427ed2135911e11addb9fcbb56c41c595fde07986db71a8fd8afb0304198c6257c1c3bb8b796abdcdd85870f4494a86f84ff358e6ccf853e5de39dfe0ff403224f7dbe5b7b0b1ddf7ea998d17b56fb2caf57bd387a0d1f56d139904133f10046f56a54bc91639658bc835bcfca4835feb8f535ddf4ea391c9dddfe8657c7259ac6be509c2ef148dce09472a184395bdfb6fb75d7b9920aa8fa1ab72ca523ac89e657f19541cadf8b96ecba1f6f30cd9facc8414e4321fabdf56fd9e688ada628d1a40a22b620febf9a9e6a73834a4619a9e201b3a3ddb1f0d251cea9b7236b5a994c018300ec5f5703f9e8115d342585c35c5a6d6d8b055543361e8ad2ee7121a0be0007c45491adb8581685f172428af0501ec59307f5d3bbb1617c60bfa426b0bde7c8e9d59b3d1ead0a52009987dfffee14a3d94a6cd5867015e007f01d77cdd7e7e67b001b60e217a49e4a52860079b5beae7df1bca6d76c71ec3525915869e2cc48c590cf13b8dfa1a97526e8c853bc4ff5cb556e73435a659da0435a644105b26cec9692ba93869d29e785d3cbe7f8d89c7f5b966c7040b6dc0eaafb6530924a5cebccb8db265ac2a8330353d0e833774e6845d9951a95259fd605d377656d33507df8e3ec3eed4b512bd4a0603b8c4a883008af61aa59eebca5b18a388abaa4d3c99f54849ec4c3d22699360a290f6758ba1e3bceeed7581e0c6e80d78675d3436e2a6fd397765a5fd63c72667c78816635b09bcf1e0971347f2a53e03051e7149734d4291b28ab8ff7f22848d0af3b137264a100a9be43855be46c3a281c006db5bdfade14df3dafe1efe470b935121c8bb4f4581a29b6a406fe84f01f18c5dc532ce3472cbc24b9815dad38aff5de4a9fefa9adce1398ac2efdb40c658899905fc60ade2186ac5fba9726dda749fac62cfbb92de82e9ad7cd02a24e6f2861261eb240644e4e718750d8f1c006857a2e72482109ae200fe8e209bb7e2f6d4683ba6088862f174d689181223214de3981607e4243ef7c077ce5ac359f3e4ac56cdb368181c58111cdc7482898329d80d836438d6a69c88c19274705b4800b8035c5140d5e88eff7515ca4bee0d01c52db7ae37f8cf42cdf74a178a79650ce965b673b72b426ff06420f77cc2b12986fd625a0b77a65b7f24ecc842174b0bdcbe9b19979f6eef1da1909b766b6dcc05f2b1b722b51f8feaa0b540dc301511daf35f38f8d19a1cf49db32eb7e6ccbf0dd6c65b0bf58f070bfb39603521d99a6a249eaf942f84fe0ef923f7e0abc1886d6fed57baea2f3c261092c5db37f980941cc0f1edb0d9c57b714574884bd5ce3bfa55b577c8967a15348d74c44d755d12365140c542960aeff789a01f0bd1df46fe01eba421b0957ba1c778fac795f7e3e70fc5fcce5af44fc773eb6888289b5dd9c6af180b0915d4b800d996c494bfe2dc96c2158a20b6b2c54151a85e64ebf493762e9b95eed91e0b2ad97eb8ddc94d3af76acbc02027bfd3ae97327e75b041886881d360fb92dcb1a7905b511a341f6871a7cd4674bba365e52549b18d5d366212e961fafce3b5bc9c37fae75b0e0a82fd9e02127be49832c1a4511868402f18649154f05a4042efdadf3b8dc173835288aabf9dc9d9d13800a97d599a07cb9b1ef58e04291c9174f481a6f4499df33ca13d106bbda5582bb68230a265ade33b3baca2fd8c748893573db8417f4ebea9a7c856463e1143b7192f8bf1f4fbfda91cf078874240bdfefdb0d8f0702d4ca0865f956e67d4ef7a86e0c39da4b995a492e366d87a06e7cb4f50365337a399b3932ac288a573360e5fad95e29d21c99234c0175732fa2cc36e5ae25b2592b459117f94e98330c540596ec3dca4c520b41e0ae7fb31298c7d13658c75c051610a18521ede8574a1703b425e1e624941f7cb0fb0f3d60de0d7f6da604347d87334542b7a05c7dae30566d9a2be7d9553c283b0a7f48e9de266f1543488d2d1fc47a096c216a157928974a46314326820fcd0f0efa5572e7b83330dfddb3d8675ce5aa6c227db433aa9ff08a80cd34f9bfc90a7456e57ff9044e217627445673934dac433a68a640e4e4f22b775113e10c01d9e9d9ee26cc84c06cbac1afc83d2a940309107ba5ec092aac401e1d86495154315ac53a6dc695a5927bcbcd6cff884af4f73fdf596b8d2a3d86140c1527f3b0e6f856fa77a182e203959a7b5b9e380ab888e2de6351e5b3d6f37fb52470ada42f0a120351535dc791a5abea945a19fdb08033b9707de2ecf6808add414f2c563bf279ec42b1455096bb34580ea98a882cbb382df133a3382b51e4e1450be8f4f19998416bfebab1ebd1abe1b59c5497522c8b2a68724856f934c1675e08042bfefb253</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/Butterfly/lib/hbe.js"></script><link href="/Butterfly/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本文章暂不开放</summary>
    
    
    
    <category term="Hexo系列" scheme="https://blog.sakurasep.site/Butterfly/categories/Hexo%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Hexo" scheme="https://blog.sakurasep.site/Butterfly/tags/Hexo/"/>
    
    <category term="零基础" scheme="https://blog.sakurasep.site/Butterfly/tags/%E9%9B%B6%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>我的2021年度总结</title>
    <link href="https://blog.sakurasep.site/Butterfly/Year/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%20-%202021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.sakurasep.site/Butterfly/Year/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%20-%202021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2022-01-16T14:13:22.000Z</published>
    <updated>2022-04-20T01:05:28.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h1><blockquote><p>作者：上杉九月</p><p>排版与发布：上杉九月</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2021年，我对自己算是一半满意，一半不满意吧，有些事情不尽如人意，有些事情自己做的很好，希望在2022年我能够有所进步。</p><p>本文中所有内容截止于2022.1.1</p><p><strong>New Dream New Start</strong></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>这次的年终总结并不是按阶段划分的，而是分成了两个部分。</p><p>第一部分是对2021年全年的回顾，自己做了什么，还有什么需要改进的地方。</p><p>第二部分是对2022年的一个总体的规划，新的一年我应该向什么方向努力。</p><h2 id="第一部分-我的2021"><a href="#第一部分-我的2021" class="headerlink" title="第一部分 我的2021"></a>第一部分 我的2021</h2><p>对于我来说，2021年研究了很多网站搭建的内容，熟练的掌握云服务器的各种应用方式，接下来就让我一一给各位梳理一下。</p><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><h3 id="上杉九月的博客-Hexo"><a href="#上杉九月的博客-Hexo" class="headerlink" title="上杉九月的博客 - Hexo"></a><a href="https://blog.sakurasep.site">上杉九月的博客</a> - Hexo</h3><h4 id="图片介绍"><a href="#图片介绍" class="headerlink" title="图片介绍"></a>图片介绍</h4><blockquote><p>首页图</p></blockquote><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/1.jpg" alt=""></p>          </div><blockquote><p>主页信息流</p></blockquote><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/3.jpg" alt=""></p>          </div><blockquote><p>文章阅读</p></blockquote><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/2.jpg" alt=""></p>          </div><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>使用Hexo博客框架 + Github Pages</p></blockquote><p>Hexo作为目前活跃度较高的博客框架，主题丰富，功能齐全，个人是十分喜欢由Hexo框架生成的静态博客，Github Pages的访问速度还是可以的，而且如果担心访问速度的话也可以将博客部署到Gitee。</p><blockquote><p>主题使用了<a href="https://volantis.js.org/">Volantis 5.0 Beta</a> 美化思路参考<a href="https://inkss.cn/">枋柚梓的猫会发光 (inkss.cn)</a></p></blockquote><p>Volantis算是一个不错的博客主题，属于是上限高，下限也高，新手通过Volantis官方文档也能配置完成一个不错的页面，而如果想更进一步，Volantis官方还收录了很多大佬的美化教程，可以进行参考。</p><blockquote><p>该博客内容主攻计算机相关内容</p></blockquote><p>由于是静态博客，写作相比于其他博客框架稍微有些繁琐，不适合日常更新。（不过有大佬写的HPP组件看起来还不错，等完善）。我在新的一年保证文章更新的情况下也会记录一下自己的其他方面的内容，放到博客分站吧。</p><blockquote><p>还有些正在调试的内容</p></blockquote><p>Hexo是支持分站的，即可以将其他Hexo主题作为主站点的其他访问风格，目前还在做主站的调试，等主站稳定了把分站会恢复的。</p><h3 id="上杉九月的博客-Halo"><a href="#上杉九月的博客-Halo" class="headerlink" title="上杉九月的博客 - Halo"></a><a href="https://halo.sakurasep.club/">上杉九月的博客</a> - Halo</h3><h4 id="图片介绍-1"><a href="#图片介绍-1" class="headerlink" title="图片介绍"></a>图片介绍</h4><blockquote><p>首页图</p></blockquote><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/4.jpg" alt=""></p>          </div><blockquote><p>主页信息流</p></blockquote><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/5.jpg" alt=""></p>          </div><blockquote><p>文章阅读</p></blockquote><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/6.jpg" alt=""></p>          </div><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>网站还处于调试期，打算把其他内容放在这里更新。</p><blockquote><p>网站是由<a href="https://halo.run/">Halo博客框架</a>搭建</p></blockquote><p>Halo博客框架属于是动态部署的博客类型，需要依托于Java环境。我把该博客部署在腾讯云上。</p><p>主题使用的是<a href="https://github.com/LIlGG/halo-theme-sakura">GitHub - LIlGG/halo-theme-sakura: Halo 版本的樱花🌸主题</a></p><h3 id="上杉九月的博客-Typecho"><a href="#上杉九月的博客-Typecho" class="headerlink" title="上杉九月的博客 - Typecho"></a><a href="https://blog.sakurasep.club">上杉九月的博客</a> - Typecho</h3><h4 id="图片介绍-2"><a href="#图片介绍-2" class="headerlink" title="图片介绍"></a>图片介绍</h4><blockquote><p>首页图</p></blockquote><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/7.jpg" alt=""></p>          </div><blockquote><p>文章阅读</p></blockquote><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/8.jpg" alt=""></p>          </div><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>Typecho是我最喜欢的博客框架之一，响应速度快，写作方便。</p><p>不过Typecho也有它的缺点，就是很多插件已经不更新了。</p><p>Typecho的主题很多是需要付费的，当然也有免费的主题。这里我使用的是<a href="https://blog.zwying.com/">秦枫鸢梦 - 🌸花有重开日,人无再少年🏃‍♂️ (zwying.com)</a></p><h2 id="图片站-Chevereto"><a href="#图片站-Chevereto" class="headerlink" title="图片站 - Chevereto"></a><a href="https://pic.sakurasep.top">图片站</a> - Chevereto</h2><h4 id="图片介绍-3"><a href="#图片介绍-3" class="headerlink" title="图片介绍"></a>图片介绍</h4><blockquote><p>首页</p></blockquote><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/9.jpg" alt=""></p>          </div><blockquote><p>图片浏览</p></blockquote><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/10.jpg" alt=""></p>          </div><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><p>图片站在去年年底就进入测试阶段，年初开始稳定运行。属于我这些网站中运行最为稳定的一个。。。</p><p>图片站可以注册（目前仅为邀请码开放，如果想上传图片的话，可以评论区留言邮箱，私发邀请码）</p><p>小服务器，空间不大，带宽不大，没法做到开放注册。</p><p>当然如果只是浏览和下载还是完全开放的。</p><p><strong>图片链接是无法进行引用的，网站开启了防盗链</strong></p><h2 id="第二部分-我的2022"><a href="#第二部分-我的2022" class="headerlink" title="第二部分 我的2022"></a>第二部分 我的2022</h2><p>去年对于我来说，其实是荒废了很多时间。</p><p>直到年底的几个月才认清了方向，明确了自己的未来的道路。</p><h3 id="第一件事：健康的身体"><a href="#第一件事：健康的身体" class="headerlink" title="第一件事：健康的身体"></a>第一件事：健康的身体</h3><p>185cm的高个子 87KG的体重，BMI是稍微超标的。</p><p>对于我来说，身体长时间处于一个亚健康状态，精神支撑不了我去干一些事情，容易累，嗜睡。</p><details><summary>2022 ：第一件事</summary><ul><li><input disabled="" type="checkbox"> BMI回归正常水平，适当的增加肌肉</li></ul></details><h3 id="第二件事：英语"><a href="#第二件事：英语" class="headerlink" title="第二件事：英语"></a>第二件事：英语</h3><details><summary>2022 ：第二件事</summary><ul><li><input disabled="" type="checkbox"> 2022年的两场考试，争取一遍过四级和六级</li></ul></details><h3 id="第三件事：考研"><a href="#第三件事：考研" class="headerlink" title="第三件事：考研"></a>第三件事：考研</h3><details><summary>2022 ：第三件事</summary><ul><li><input disabled="" type="checkbox"> 准备考研相关内容</li></ul></details><h3 id="第四件事：专业水平"><a href="#第四件事：专业水平" class="headerlink" title="第四件事：专业水平"></a>第四件事：专业水平</h3><details><summary>2022 ：第四件事</summary><ul><li><input disabled="" type="checkbox"> 全面提高自己的代码能力</li></ul></details><h3 id="第五件事：文章更新"><a href="#第五件事：文章更新" class="headerlink" title="第五件事：文章更新"></a>第五件事：文章更新</h3><details><summary>2022 ：第五件事</summary><ul><li><input disabled="" type="checkbox"> 持续产出高质量文章 </li></ul></details><h3 id="第六件事：远足"><a href="#第六件事：远足" class="headerlink" title="第六件事：远足"></a>第六件事：远足</h3><details><summary>2022 ：第六件事</summary><ul><li><input disabled="" type="checkbox"> 暑假里组织一次远足</li></ul></details><hr><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt=""></p>          </div>]]></content>
    
    
    <summary type="html">回顾一下我的2021</summary>
    
    
    
    <category term="年度总结" scheme="https://blog.sakurasep.site/Butterfly/categories/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="年度总结" scheme="https://blog.sakurasep.site/Butterfly/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>《CTF学习笔记》</title>
    <link href="https://blog.sakurasep.site/Butterfly/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20CTF(Crypto)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.sakurasep.site/Butterfly/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20CTF(Crypto)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-11-15T13:32:12.000Z</published>
    <updated>2022-04-25T08:31:11.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h1><blockquote><p>作者：上杉九月</p><p>排版：上杉九月</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近一位朋友入坑CTF，想起来开学还加了一个相关社团参加了几场比赛。还是挺有趣的。</p><p>每天做上一两个，就当是放松了。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="BUUCTF在线评测-buuoj-cn-—-MD5"><a href="#BUUCTF在线评测-buuoj-cn-—-MD5" class="headerlink" title="BUUCTF在线评测 (buuoj.cn) — MD5"></a><a href="https://buuoj.cn/challenges#MD5">BUUCTF在线评测 (buuoj.cn) — MD5</a></h2><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/1.png" alt=""></p>          </div><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>e00cf25ad42683b3df678c61f42c6bda</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>题目写的很清楚 MD5，然后给出的这一端字符串（用多了能看出来很像MD5）</p><p>扔到<strong><a href="https://www.cmd5.com/">MD5解密网站</a></strong>得到<code>flag&#123;admin1&#125;</code></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/2.png" alt=""></p>          </div><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/3.png" alt=""></p>          </div><h2 id="BUUCTF在线评测-buuoj-cn-—-一眼就解密"><a href="#BUUCTF在线评测-buuoj-cn-—-一眼就解密" class="headerlink" title="BUUCTF在线评测 (buuoj.cn) — 一眼就解密"></a><a href="https://buuoj.cn/challenges#一眼就解密">BUUCTF在线评测 (buuoj.cn) — 一眼就解密</a></h2><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/4.png" alt=""></p>          </div><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>flag：ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=</p><h2 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h2><p>Base64编码有个特点，编码末尾会出现<code>=</code></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/5.png" alt=""></p>          </div><p>所以说仍然是放到<strong><a href="https://www.qqxiuzi.cn/bianma/base64.htm">Base64解密网站</a></strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/6.png" alt=""></p>          </div><h2 id=""><a href="#" class="headerlink" title=""></a><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/7.png" alt=""></p>          </div></h2><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt=""></p>          </div>]]></content>
    
    
    <summary type="html">CTF还是挺有趣的，每天都做一做当作放松吧</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.sakurasep.site/Butterfly/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="https://blog.sakurasep.site/Butterfly/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>《学习笔记》</title>
    <link href="https://blog.sakurasep.site/Butterfly/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.sakurasep.site/Butterfly/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-09-24T13:17:29.000Z</published>
    <updated>2022-04-19T16:05:06.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>要填的坑挺多的，精力有限，目前先集中更新本篇文章。</p><p>本篇文章参考书籍为<strong>《洛谷-深入浅出程序设计竞赛》</strong></p><h1 id="2021-09-24"><a href="#2021-09-24" class="headerlink" title="2021.09.24"></a>2021.09.24</h1><h2 id="1-P3156-【深基15-例1】询问学号-洛谷-入门"><a href="#1-P3156-【深基15-例1】询问学号-洛谷-入门" class="headerlink" title="1. P3156 【深基15.例1】询问学号 - 洛谷 - 入门"></a>1. <a href="https://www.luogu.com.cn/problem/P3156">P3156 【深基15.例1】询问学号 - 洛谷 - 入门</a></h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有 $n(n \le 2 \times 10^6)$ 名同学陆陆续续进入教室。我们知道每名同学的学号（在 1 到 $10^9$ 之间），按进教室的顺序给出。上课了，老师想知道第 $i$ 个进入教室的同学的学号是什么（最先进入教室的同学 $i=1$），询问次数不超过 $10^5$ 次。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行 2 个整数 n 和 m，表示学生个数和询问次数。</p><p>第二行 n 个整数，表示按顺序进入教室的学号。</p><p>第三行 m 个整数，表示询问第几个进入教室的同学。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>m 个整数表示答案，用换行隔开。</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line"><span class="number">10</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">9</span> <span class="number">2</span> <span class="number">60</span> <span class="number">8</span> <span class="number">17</span> <span class="number">11</span> <span class="number">4</span> <span class="number">5</span> <span class="number">14</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">9</span></span><br><span class="line">输出：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="思路和知识点"><a href="#思路和知识点" class="headerlink" title="思路和知识点"></a>思路和知识点</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vector基本用法</span><br><span class="line"><span class="number">1.</span> vector &lt;<span class="type">int</span>&gt; <span class="built_in">array</span> (N, i); 新建一个初始长度为N，N个数据为i的vector数组</span><br><span class="line"><span class="number">2.</span> array.<span class="built_in">push_back</span>(a); 将a元素添加到数组array的末尾，并增加数组长度</span><br><span class="line"><span class="number">3.</span> array.<span class="built_in">size</span>(); 返回数组的长度</span><br><span class="line"><span class="number">4.</span> array.<span class="built_in">resize</span>(n, m); 重新将数组长度设置为n，若原数组比n长，则删除多余元素，若短，新增加的数组初始化为m</span><br><span class="line"><span class="number">5.</span> array.<span class="built_in">begin</span>(); 返回array数组的首元素，也就是array[<span class="number">0</span>]的指针</span><br><span class="line"><span class="number">6.</span> array.<span class="built_in">end</span>(); 返回array数组末尾下一个元素的指针</span><br></pre></td></tr></table></figure><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    vector &lt;<span class="type">int</span>&gt; student; <span class="comment">// 创建vector数组</span></span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;temp;</span><br><span class="line">        student.<span class="built_in">push_back</span>(temp); <span class="comment">// 将temp压入动态vector数组的末尾，并且vector数组的长度+1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;temp;</span><br><span class="line">        cout&lt;&lt;student[temp - <span class="number">1</span>]&lt;&lt;<span class="string">&quot;\n&quot;</span>;<span class="comment">// 数组一般是从0开始存储数据，而我们询问学号是从1开始寻找</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-P3613-【深基15-例2】寄包柜-洛谷-普及"><a href="#2-P3613-【深基15-例2】寄包柜-洛谷-普及" class="headerlink" title="2. P3613 【深基15.例2】寄包柜 - 洛谷 - 普及 "></a>2. <a href="https://www.luogu.com.cn/problem/P3613">P3613 【深基15.例2】寄包柜 - 洛谷 - 普及 </a></h2><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>超市里有 $n(n\le10^5)$ 个寄包柜。每个寄包柜格子数量不一，第 $i$ 个寄包柜有 $a_i(a_i\le10^5)$ 个格子，不过我们并不知道各个 $a_i$ 的值。对于每个寄包柜，格子编号从 1 开始，一直到 $a_i$。现在有 $q(q\le10^5)$ 次操作：</p><ul><li><code>1 i j k</code>：在第 $i$ 个柜子的第 $j$ 个格子存入物品 $k(0\le k\le 10^9)$。当 $k=0$ 时说明清空该格子。</li><li><code>2 i j</code>：查询第 $i$ 个柜子的第 $j$ 个格子中的物品是什么，保证查询的柜子有存过东西。</li></ul><p>已知超市里共计不会超过 $10^7$ 个寄包格子，$a_i$ 是确定然而未知的，但是保证一定不小于该柜子存物品请求的格子编号的最大值。当然也有可能某些寄包柜中一个格子都没有。</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行 2 个整数 n 和 q，寄包柜个数和询问次数。</p><p>接下来 q 个整数，表示一次操作。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>对于查询操作时，输出答案。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line"><span class="number">5</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">10000</span> <span class="number">114514</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">10000</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">输出：</span><br><span class="line"><span class="number">114514</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="思路和知识点-1"><a href="#思路和知识点-1" class="headerlink" title="思路和知识点"></a>思路和知识点</h2><p><a href="#思路和知识点">vector相关操作</a></p><p>注意 此题的数据范围是$10^5$,如果开一个$10^5$ * $10^5$ 的二维数组，空间占用将会十分离谱</p><p>所以此类题目使用vector便可以最大程度的减少空间的占用</p><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q, op;</span><br><span class="line">    <span class="type">int</span> i, j, k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    vector &lt; vector &lt;<span class="type">int</span>&gt; &gt; <span class="built_in">block</span> (n + <span class="number">1</span>);<span class="comment">// 此时仅仅是开了一个长度为n的一维数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> count = <span class="number">0</span>; count &lt; q; count++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;i&gt;&gt;j&gt;&gt;k;</span><br><span class="line">            <span class="keyword">if</span>(block[i].<span class="built_in">size</span>() &lt; j + <span class="number">1</span>)<span class="comment">// 如果柜子里格子不足，那么就扩展第i个柜子的格子到j + 1</span></span><br><span class="line">            &#123;</span><br><span class="line">                block[i].<span class="built_in">resize</span>(j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            block[i][j] = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;i&gt;&gt;j;</span><br><span class="line">            cout&lt;&lt;block[i][j]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-手写栈的操作"><a href="#3-手写栈的操作" class="headerlink" title="3. 手写栈的操作"></a>3. <a href="about:blank">手写栈的操作</a></h2><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>栈作为一个先进先出的数据结构，尽管<stack>头文件已经提供了现成的关于栈的操作</p><p>但是在STL里面，使用这些操作而不使用O2优化</p><p>会导致程序有一点点慢</p><h2 id="思路和知识点-2"><a href="#思路和知识点-2" class="headerlink" title="思路和知识点"></a>思路和知识点</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C语言提供了栈的相关快捷操作&lt;stack&gt;</span><br><span class="line"><span class="number">1.</span> stack &lt;<span class="type">int</span>&gt; s; 新建一个栈</span><br><span class="line"><span class="number">2.</span> s.<span class="built_in">push</span>(a); 将元素a压入栈</span><br><span class="line"><span class="number">3.</span> s.<span class="built_in">pop</span>(); 将s的栈顶元素弹出</span><br><span class="line"><span class="number">4.</span> s.<span class="built_in">top</span>(); 查询s的栈顶元素</span><br><span class="line"><span class="number">5.</span> s.<span class="built_in">size</span>(); 查询s的元素个数</span><br><span class="line"><span class="number">6.</span> s.<span class="built_in">empty</span>(); 查询s是否为空</span><br></pre></td></tr></table></figure><h2 id="手写栈模板-请根据实际情况进行修改"><a href="#手写栈模板-请根据实际情况进行修改" class="headerlink" title="手写栈模板(请根据实际情况进行修改)"></a>手写栈模板(请根据实际情况进行修改)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> stack[<span class="number">10000</span>];</span><br><span class="line"><span class="type">int</span> p = <span class="number">0</span>;<span class="comment">// 指针，指向的是下一个栈元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">// 压栈操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack[p++] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span><span class="comment">// 弹出栈顶元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack[--p] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span><span class="comment">// 查询栈顶元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stack[p - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-UVA673-平衡的括号-Parentheses-Balance-洛谷-普及"><a href="#4-UVA673-平衡的括号-Parentheses-Balance-洛谷-普及" class="headerlink" title="4. UVA673 平衡的括号 Parentheses Balance - 洛谷 - 普及 "></a>4. <a href="https://www.luogu.com.cn/problem/UVA673">UVA673 平衡的括号 Parentheses Balance - 洛谷 - 普及 </a></h2><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个包含“()”和“[]”的括号序列，判断是否合法。<br>具体规则：</p><ol><li>空串合法；</li><li>如果A和B合法，那么AB合法；</li><li>如果A合法(A)和[A]都合法</li></ol><p>感谢 @陶文祥  提供的翻译。</p><h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例"></a>样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line"><span class="number">3</span></span><br><span class="line">([])</span><br><span class="line">(([()])))</span><br><span class="line">([()[]()])()</span><br><span class="line">输出:</span><br><span class="line">Yes</span><br><span class="line">No</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><h2 id="思路和知识点-3"><a href="#思路和知识点-3" class="headerlink" title="思路和知识点"></a>思路和知识点</h2><p>你可以将含有括号的这一个字符串人为的分为左右两边。</p><p>出栈判定是右边的括号可以将左边正处于栈顶的括号匹配消除</p><p>入栈判定是栈为空或者是没有对应的括号可以匹配</p><h2 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> stack[<span class="number">1000</span>];</span><br><span class="line"><span class="type">int</span> p = <span class="number">0</span>;<span class="comment">// 栈顶指针,指的是下一个待插入的数组位置</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">// 压栈操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack[p++] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack[--p] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stack[p - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">judge</span><span class="params">(<span class="type">char</span> a)</span><span class="comment">// 因为要让右边的括号匹配左边的括号，所以说对于每一种右括号都应该返回相对应的左括号形式</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;[&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;/0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    cin&gt;&gt;num;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="built_in">getline</span>(cin, str);<span class="comment">// C++在使用cin输入时，光标停留在数字行的末尾，如果此时用getline读取一行，那么将读取到空行</span></span><br><span class="line">    <span class="keyword">while</span>(num--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">getline</span>(cin, str);<span class="comment">// 这里才是真正的去读入字符串</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">push</span>(str[i]);<span class="comment">// 栈空则压入数据</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">judge</span>(str[i]) == <span class="built_in">top</span>())<span class="comment">// 栈顶左括号与右括号匹配</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">push</span>(str[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="2021-09-26"><a href="#2021-09-26" class="headerlink" title="2021.09.26"></a>2021.09.26</h1><h2 id="5-P1449-后缀表达式-洛谷-普及"><a href="#5-P1449-后缀表达式-洛谷-普及" class="headerlink" title="5. P1449 后缀表达式 - 洛谷 - 普及 "></a>5. <a href="https://www.luogu.com.cn/problem/P1449">P1449 后缀表达式 - 洛谷 - 普及 </a></h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>所谓后缀表达式是指这样的一个表达式：式中不再引用括号，运算符号放在两个运算对象之后，所有计算按运算符号出现的顺序，严格地由左而右新进行（不用考虑运算符的优先级）。</p><p>如：3*(5–2)+7对应的后缀表达式为：3．5．2．-*7．+@。’@’为表达式的结束符号。‘.’为操作数的结束符号。</p><h2 id="样例-3"><a href="#样例-3" class="headerlink" title="样例"></a>样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line"><span class="number">3.5</span><span class="number">.2</span>.-*<span class="number">7.</span>+@</span><br><span class="line">输出：</span><br><span class="line"><span class="number">16</span>  </span><br></pre></td></tr></table></figure><h2 id="思路和知识点-4"><a href="#思路和知识点-4" class="headerlink" title="思路和知识点"></a>思路和知识点</h2><p>首先注意一点，运算符号前面的两位数字便是进行运算的两位数。</p><p>当在字符串读取到运算符号的时候，便从栈顶的顶部取两个数，然后进行运算，运算后的结果仍然放在栈顶。</p><h2 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> stack[<span class="number">1000</span>];</span><br><span class="line"><span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack[p++] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack[--p] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stack[p - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x, y; <span class="comment">// x, y是用于存放两个算数的临时变量</span></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">if</span>(ch &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; ch &gt;= <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum = sum * <span class="number">10</span> + (ch - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">push</span>(sum);</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch != <span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x = <span class="built_in">top</span>();</span><br><span class="line">            <span class="built_in">pop</span>();</span><br><span class="line">            y = <span class="built_in">top</span>();</span><br><span class="line">            <span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">switch</span> (ch)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                    <span class="built_in">push</span>(x + y);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                    <span class="built_in">push</span>(y - x);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    <span class="built_in">push</span>(x * y);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                    <span class="built_in">push</span>(y / x);</span><br><span class="line">                    <span class="keyword">break</span>;            </span><br><span class="line">                <span class="comment">//default:</span></span><br><span class="line">                    <span class="comment">//break;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (ch != <span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">top</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-P1739-表达式括号匹配-洛谷-入门"><a href="#6-P1739-表达式括号匹配-洛谷-入门" class="headerlink" title="6. P1739 表达式括号匹配 - 洛谷 - 入门"></a>6. <a href="https://www.luogu.com.cn/problem/P1739">P1739 表达式括号匹配 - 洛谷 - 入门</a></h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>假设一个表达式有英文字母（小写）、运算符（+，—，*，/）和左右小（圆）括号构成，以“@”作为表达式的结束符。请编写一个程序检查表达式中的左右圆括号是否匹配，若匹配，则返回“YES”；否则返回“NO”。表达式长度小于255，左圆括号少于20个。</p><h2 id="样例-4"><a href="#样例-4" class="headerlink" title="样例"></a>样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line"><span class="number">2</span>*(x+y)/(<span class="number">1</span>-x)@</span><br><span class="line">输出：</span><br><span class="line">YES</span><br><span class="line">输入：</span><br><span class="line">(<span class="number">25</span>+x)*(a*(a+b+b)@</span><br><span class="line">输出</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><h2 id="思路和知识点-5"><a href="#思路和知识点-5" class="headerlink" title="思路和知识点"></a>思路和知识点</h2><p>这个相比于前面那道括号匹配题更加简单。</p><p>只要程序读取到左括号就压入栈顶，读入右括号就将栈顶弹出。</p><p>如果到最后栈非空，输出NO，反之，输出YES。</p><h2 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> stack[<span class="number">1000</span>];</span><br><span class="line"><span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack[p++] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack[--p] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stack[p - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="built_in">getline</span>(cin, s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">push</span>(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">top</span>() == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">push</span>(s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-P1044-NOIP2003-普及组-栈-洛谷-普及"><a href="#7-P1044-NOIP2003-普及组-栈-洛谷-普及" class="headerlink" title="7. P1044 (NOIP2003 普及组)栈 - 洛谷 - 普及"></a>7. <a href="https://www.luogu.com.cn/problem/P1044">P1044 (NOIP2003 普及组)栈 - 洛谷 - 普及</a></h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>栈是计算机中经典的数据结构，简单的说，栈就是限制在一端进行插入删除操作的线性表。</p><p>栈有两种最重要的操作，即 pop（从栈顶弹出一个元素）和 push（将一个元素进栈）。</p><p>栈的重要性不言自明，任何一门数据结构的课程都会介绍栈。宁宁同学在复习栈的基本概念时，想到了一个书上没有讲过的问题，而他自己无法给出答案，所以需要你的帮忙。</p><div class="fj-gallery"><p><img src="https://cdn.luogu.com.cn/upload/pic/18.png" alt=""> </p>          </div><p>宁宁考虑的是这样一个问题：一个操作数序列，$1,2,\ldots ,n$（图示为 1 到 3 的情况），栈 A 的深度大于 $n$。</p><p>现在可以进行两种操作，</p><ol><li>将一个数，从操作数序列的头端移到栈的头端（对应数据结构栈的 push 操作）</li><li>将一个数，从栈的头端移到输出序列的尾端（对应数据结构栈的 pop 操作）</li></ol><p>使用这两种操作，由一个操作数序列就可以得到一系列的输出序列，下图所示为由 <code>1 2 3</code> 生成序列 <code>2 3 1</code> 的过程。</p><div class="fj-gallery"><p><img src="https://cdn.luogu.com.cn/upload/pic/19.png" alt=""> </p>          </div><p>（原始状态如上图所示）</p><p>你的程序将对给定的 $n$，计算并输出由操作数序列 $1,2,\ldots,n$ 经过操作可能得到的输出序列的总数。</p><h2 id="样例-5"><a href="#样例-5" class="headerlink" title="样例"></a>样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line"><span class="number">3</span></span><br><span class="line">输出：</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="思路和知识点-6"><a href="#思路和知识点-6" class="headerlink" title="思路和知识点"></a>思路和知识点</h2><p>本题我暂时也没搞得太明白，只是推算出了数学规律为卡特兰数。</p><p>至于卡特兰数怎么推导的，我再看看吧。</p><h2 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> k[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    k[<span class="number">0</span>] = <span class="number">1</span>; k[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            k[i] += k[j] * k[i - j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;k[n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P1996-约瑟夫问题-洛谷-普及"><a href="#P1996-约瑟夫问题-洛谷-普及" class="headerlink" title="P1996 约瑟夫问题 - 洛谷 - 普及"></a><a href="https://www.luogu.com.cn/problem/P1996">P1996 约瑟夫问题 - 洛谷 - 普及</a></h2><h2 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h2><p>$n$ 个人围成一圈，从第一个人开始报数,数到 $m$ 的人出列，再由下一个人重新从 $1$ 开始报数，数到 $m$ 的人再出圈，依次类推，直到所有的人都出圈，请输出依次出圈人的编号。</p><p><strong>注意：本题和《深入浅出-基础篇》上例题的表述稍有不同。书上表述是给出淘汰 n-1 名小朋友，而该题是全部出圈。</strong></p><h2 id="样例-6"><a href="#样例-6" class="headerlink" title="样例"></a>样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line"><span class="number">10</span> <span class="number">3</span></span><br><span class="line">输出：</span><br><span class="line"><span class="number">3</span> <span class="number">6</span> <span class="number">9</span> <span class="number">2</span> <span class="number">7</span> <span class="number">1</span> <span class="number">8</span> <span class="number">5</span> <span class="number">10</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="思路和知识点-7"><a href="#思路和知识点-7" class="headerlink" title="思路和知识点"></a>思路和知识点</h2><p>典型的队列问题。</p><p>这里我们先将$n$个数按照从小到大的顺序以此加入队列，此时我们再每次将$m-1$个数从队前迁移到队尾,那么此时在队伍最前的便是要淘汰的数，输出后直接弹出。</p><p>直到$head == tail$结束。</p><h2 id="AC代码-6"><a href="#AC代码-6" class="headerlink" title="AC代码"></a>AC代码</h2><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> queue[<span class="number">100000</span>];</span><br><span class="line"><span class="type">int</span> head = <span class="number">0</span>, tail = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue[tail++] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue[head++] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">front</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> queue[head];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(head != tail)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">push</span>(<span class="built_in">front</span>());</span><br><span class="line">            <span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">front</span>()&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt=""></p>          </div>]]></content>
    
    
    <summary type="html">让记忆更加深刻</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.sakurasep.site/Butterfly/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C语言" scheme="https://blog.sakurasep.site/Butterfly/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="算法" scheme="https://blog.sakurasep.site/Butterfly/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>博客日志-记录博客最新动态</title>
    <link href="https://blog.sakurasep.site/Butterfly/HexoAbout/%E5%8D%9A%E5%AE%A2%E5%85%AC%E5%91%8A%20-%20%E4%B8%8A%E6%9D%89%E4%B9%9D%E6%9C%88%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://blog.sakurasep.site/Butterfly/HexoAbout/%E5%8D%9A%E5%AE%A2%E5%85%AC%E5%91%8A%20-%20%E4%B8%8A%E6%9D%89%E4%B9%9D%E6%9C%88%E7%9A%84%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-09-21T11:39:01.000Z</published>
    <updated>2022-05-10T11:00:39.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如遇到问题请留言，谢谢支持。</p><p>这里我想要感谢</p><blockquote><p><a href="http://wenchong.space/">雨中的博客(wenchong.space)</a>提供美化问题解答，非常感谢。</p><p><a href="https://inkss.cn/">枋柚梓的猫会发光 (inkss.cn)</a>提供自己网站的源码开放参考，对我的美化进程帮助很大，非常感谢。</p></blockquote><h1 id="网站公告"><a href="#网站公告" class="headerlink" title="网站公告"></a>网站公告</h1><h2 id="关于主站"><a href="#关于主站" class="headerlink" title="关于主站"></a>关于主站</h2><p><strong>网站基本信息</strong></p><p>主站使用的是<code>Github + Hexo + 腾讯云CDN</code>的部署模式，最大程度保证访问速度。</p><p>分享文件全部采用依靠Onedrive API的Cloudreve，毕竟没有限速，文件大小限制也少。</p><p>目前的加载速度已经经过很多优化，如果有加载缓慢的情况请联系站长。</p><p><strong>网站内容</strong></p><p>主要是分享知识。我个人认为知识应当没有门槛，做好知识分级，给不同阶段的朋友们都能带来收获。</p><p>目前个人技术有限，仅仅会写一些入门知识分享。</p><p>希望自己能够慢慢变强吧。</p><p>欢迎各位朋友能在思考之后积极的和我探讨交流。</p><h2 id="关于分站"><a href="#关于分站" class="headerlink" title="关于分站"></a>关于分站</h2><p>分站没有去进行深度优化，仅仅作为一个基本的，保证能够阅读和互动的不同主题。</p><p>注意，分站仅仅是同步主站点的文章更新，有些信息可能没有及时更新。</p><p>当然，你在分站的评论博主也是能够看见的。</p><blockquote><p>本站将以往的配置的主题作为分站部署<code>https://blog.sakurasep.site/主题名称</code>下，通过导航栏可以直接访问</p></blockquote><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Hexo_About/1.jpg" alt="about_me"></p>          </div><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Hexo_About/2.jpg" alt="about_me"></p>          </div><blockquote><p>你可以选择你所喜欢的博客主题进行文章阅读，希望带给你最好的阅读体验。</p></blockquote><h2 id="关于评论"><a href="#关于评论" class="headerlink" title="关于评论"></a>关于评论</h2><ol><li>本站在主站的评论系统已经更换为Twikoo，更棒的评论系统，欢迎大家使用！</li><li>本站的评论邮件提醒已经恢复，你在主站的评论收到回复后将可以接收邮件提醒。</li></ol><h2 id="关于更新"><a href="#关于更新" class="headerlink" title="关于更新"></a>关于更新</h2><p>首先可以确定的是，我会首先保证质量，目前我的技术水平不足，很多地方做的不是很好，还希望各位能提出修改建议，我也会积极进行修改。</p><p>目前将学业与更新做个平衡的话，基本确定是月更，一篇or两篇，得看我的空闲时间。</p><p>目前的规划是</p><ul><li>旧文章的维护</li><li>稳定两个系列的更新（应用使用指南 + 学习笔记）</li></ul><p>以下是更新平台</p><ol><li>首发更新 ：</li></ol><ul><li><a href="https://blog.sakurasep.site/">上杉九月的博客</a></li><li>上杉九月的知识屋（微信公众号）</li></ul><ol><li>其他平台 ：</li></ol><ul><li>酷安数码 </li><li>哔哩哔哩</li><li>微博</li></ul><h1 id="博客日志"><a href="#博客日志" class="headerlink" title="博客日志"></a>博客日志</h1><h2 id="更新预告"><a href="#更新预告" class="headerlink" title="更新预告"></a>更新预告</h2><h3 id="老文章修改计划"><a href="#老文章修改计划" class="headerlink" title="老文章修改计划"></a>老文章修改计划</h3><h4 id="1-《应用使用指南》存储空间隔离-第1期"><a href="#1-《应用使用指南》存储空间隔离-第1期" class="headerlink" title="1. 《应用使用指南》存储空间隔离_第1期"></a>1. <a href="">《应用使用指南》存储空间隔离_第1期</a></h4><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/IndexImg.png" alt=""></p>          </div><h4 id="2-《应用使用指南》Perfdog-第2期"><a href="#2-《应用使用指南》Perfdog-第2期" class="headerlink" title="2. 《应用使用指南》Perfdog_第2期"></a>2. <a href="">《应用使用指南》Perfdog_第2期</a></h4><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/IndexImg.png" alt=""></p>          </div><h3 id="新系列"><a href="#新系列" class="headerlink" title="新系列"></a>新系列</h3><h4 id="1-《Hexo零基础教程》使用Hexo完成博客的基本搭建-第1期"><a href="#1-《Hexo零基础教程》使用Hexo完成博客的基本搭建-第1期" class="headerlink" title="1. 《Hexo零基础教程》使用Hexo完成博客的基本搭建_第1期"></a>1. <a href="">《Hexo零基础教程》使用Hexo完成博客的基本搭建_第1期</a></h4><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Hexo/IndexImg.png" alt=""></p>          </div><h3 id="恢复更新系列"><a href="#恢复更新系列" class="headerlink" title="恢复更新系列"></a>恢复更新系列</h3><h4 id="1-《应用使用指南》FilterBox-第3期"><a href="#1-《应用使用指南》FilterBox-第3期" class="headerlink" title="1. 《应用使用指南》FilterBox_第3期"></a>1. <a href="">《应用使用指南》FilterBox_第3期</a></h4><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/FilterBox/IndexImg.jpg" alt=""></p>          </div><hr><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt="about_me"></p>          </div>]]></content>
    
    
    <summary type="html">本次更新内容 - 全新的图床，全新的Volantis美化</summary>
    
    
    
    <category term="公告" scheme="https://blog.sakurasep.site/Butterfly/categories/%E5%85%AC%E5%91%8A/"/>
    
    
    <category term="博客" scheme="https://blog.sakurasep.site/Butterfly/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="日志" scheme="https://blog.sakurasep.site/Butterfly/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="公告" scheme="https://blog.sakurasep.site/Butterfly/tags/%E5%85%AC%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>《C语言学习笔记》</title>
    <link href="https://blog.sakurasep.site/Butterfly/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.sakurasep.site/Butterfly/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-05-06T11:04:37.000Z</published>
    <updated>2022-05-09T15:31:24.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h1><blockquote><p>作者：上杉九月</p><p>排版与发布：上杉九月</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>记录一下程序开发实训课程的题解。</p><p>我是用的IDE为VsCode，所以在代码中会出现<code>system(&quot;pause&quot;);</code></p></blockquote><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h3 id="P1000-素数判断"><a href="#P1000-素数判断" class="headerlink" title="P1000. 素数判断"></a>P1000. 素数判断</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>编写一个函数isprime(n).判断整数n是否为素数.编写程序使用此函数,当输入一个整数时,对它进行判断,当为素数时,输出1.否则,输出0.</p><h4 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>输入一个整数</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出判断结果0或1</p><h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">45</span><br></pre></td></tr></table></figure><h5 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>本题十分简单。</p><ul><li>使用<code>temp</code>变量存储<code>num</code>的因数个数</li><li>使用for从2循环到<code>num</code>，若出现<code>num</code>整除<code>i</code>时使<code>temp++</code></li><li>最后使用if判断，<code>temp</code>为0则说明只有1和它本身两个因数，故输出1；<code>temp &gt; 0</code>则说明有其他的因数，故输出0</li></ul><h5 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="type">int</span> pr[<span class="number">10000000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isprime</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(num % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            temp++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    cin&gt;&gt;num;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">isprime</span>(num);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P1001-直角三角形"><a href="#P1001-直角三角形" class="headerlink" title="P1001. 直角三角形"></a>P1001. 直角三角形</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>任意输入三条边的边长（实数类型），判断能否组成三角形，如果不可以组成三角形，程序输出“It is not a triangle”；如果可以组成三角形，进而判断该三角形是否是直角三角形，如果是直角三角形，程序输出“It is a right triangle”，否则输出“It is not a right triangle”。</p><h4 id="输入输出格式-1"><a href="#输入输出格式-1" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h5><p>三条边的边长</p><h5 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h5><p>判断结果</p><h4 id="输入输出样例-1"><a href="#输入输出样例-1" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-1"><a href="#输入样例-1-1" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><p>6 8 10</p><h5 id="输出样例-1-1"><a href="#输出样例-1-1" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><p>It is a right triangle</p><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><ul><li>首先为了方便处理数据，先将三条边长按照从小到大的顺序排列。排序算法随意，这里为了省事直接sort</li><li>然后<code>Judge_Triangle</code>对数据预处理，筛选出来是否为三角形。若是，则进入下一个函数<code>Right_Triangle</code>，若不是，直接输出<strong>It is not a triangle</strong></li><li>判断直角三角形也很简单，勾股定理即可</li></ul><h5 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Right_Triangle</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>] * a[<span class="number">0</span>] + a[<span class="number">1</span>] * a[<span class="number">1</span>] == a[<span class="number">2</span>] * a[<span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;It is a right triangle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;It is not a right triangle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Judge_Triangle</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>] + a[<span class="number">1</span>] &gt; a[<span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Right_Triangle</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;It is not a triangle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a,a+<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">Judge_Triangle</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P1002-直角三角形，求最小余弦值"><a href="#P1002-直角三角形，求最小余弦值" class="headerlink" title="P1002. 直角三角形，求最小余弦值"></a>P1002. 直角三角形，求最小余弦值</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>任意输入三条边的边长（整数类型），判断能否组成三角形，如果不可以组成三角形，程序输出“It is not a triangle”；如果可以组成三角形，进而判断该三角形是否是直角三角形，如果不是直角三角形，程序输出“It is not a right triangle”，否则输出最小余弦值的最简分式。比如三边分别是6、8、10时，最小的余弦值是6/10，那么输出的结果应该是3/5。</p><h4 id="输入输出格式-2"><a href="#输入输出格式-2" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h5><p>三条边的边长</p><h5 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h5><p>最小余弦值的最简分式</p><h4 id="输入输出样例-2"><a href="#输入输出样例-2" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-2"><a href="#输入样例-1-2" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 8 10</span><br></pre></td></tr></table></figure><h5 id="输出样例-1-2"><a href="#输出样例-1-2" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3/5</span><br></pre></td></tr></table></figure><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><ul><li>本题是在上题的基础上增加了分式化简，因为已经对边长进行了排序，故余弦值一定是<code>a[0] / a[2]</code></li><li>化简就是找两者的最大公因式，使用<code>temp</code>存储，然后使用for遍历较小的边</li><li>因为<code>temp</code>这里初始为0，所以<code>temp</code>为0说明两者没有公因式，直接输出</li></ul><h5 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GCD</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= a[<span class="number">0</span>]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] % i == <span class="number">0</span> &amp;&amp; a[<span class="number">2</span>] % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Cos_Triangle</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">GCD</span>();</span><br><span class="line">    <span class="keyword">if</span>(temp == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;a[<span class="number">0</span>]&lt;&lt;<span class="string">&quot;/&quot;</span>&lt;&lt;a[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;(a[<span class="number">0</span>] / temp)&lt;&lt;<span class="string">&quot;/&quot;</span>&lt;&lt;(a[<span class="number">2</span>] / temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Right_Triangle</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>] * a[<span class="number">0</span>] + a[<span class="number">1</span>] * a[<span class="number">1</span>] == a[<span class="number">2</span>] * a[<span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Cos_Triangle</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;It is not a right triangle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Judge_Triangle</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>] + a[<span class="number">1</span>] &gt; a[<span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Right_Triangle</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;It is not a triangle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a,a+<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">Judge_Triangle</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P1003-求三角形面积"><a href="#P1003-求三角形面积" class="headerlink" title="P1003. 求三角形面积"></a>P1003. 求三角形面积</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>若已知三角形三个边的长度分别为a,b,c（并假设三个边长度的单位一致，在本编程题中忽略其单位），则可以利用公式 $S = \sqrt{s(s - a)(s - b)(s - c)}$，然后利用上述公式计算面积并输出，结果小数点后保留3位有效数字。</p><h4 id="输入输出格式-3"><a href="#输入输出格式-3" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h5><p>从控制台输入三个整数表示三角形三个边的长度，以空格分隔三个整数。</p><h5 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h5><p>向控制台输出求得的三角形的面积，小数点后保留三位有效数字。</p><h4 id="输入输出样例-3"><a href="#输入输出样例-3" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-3"><a href="#输入样例-1-3" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 4 6</span><br></pre></td></tr></table></figure><h5 id="输出样例-1-3"><a href="#输出样例-1-3" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7.937</span><br></pre></td></tr></table></figure><h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h5><ul><li>有公式$S = \sqrt{s(s - a)(s - b)(s - c)}$，直接根据公式写代码</li><li>使用<code>.3f</code>保留三位小数</li></ul><h5 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    <span class="type">float</span> s, area;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    s = (a + b + c) / <span class="number">2</span>;</span><br><span class="line">    area = <span class="built_in">sqrt</span>((s * (s - a) * (s - b) * (s - c)));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.3f&quot;</span>, area);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P1004-整数各位数求和"><a href="#P1004-整数各位数求和" class="headerlink" title="P1004. 整数各位数求和"></a>P1004. 整数各位数求和</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p> 编写一个函数sum(i),将输入的整形参数i的各位求和，返回求和结果。在main()函数中测试此函数，从键盘输入整数n（n在区间[1,20]），然后再输入n个非负整数，对于每一个非负整数调用sum函数求各位数和，将结果输出到屏幕。</p><h4 id="输入输出格式-4"><a href="#输入输出格式-4" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h5><p>从键盘输入一个正整数n，然后有n行输入，分别表示n个非负整数。</p><h5 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h5><p>在屏幕上分别输出n行，第i行依次对应第i个非负整数的各位之和。</p><h4 id="输入输出样例-4"><a href="#输入输出样例-4" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-4"><a href="#输入样例-1-4" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">234567</span><br><span class="line">0</span><br><span class="line">999999</span><br><span class="line">000432</span><br></pre></td></tr></table></figure><h5 id="输出样例-1-4"><a href="#输出样例-1-4" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">27</span><br><span class="line">0</span><br><span class="line">54</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h5 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">整数234567、0、999999和000432各位之和（个位、十位、百位&amp;hellip;&amp;hellip;相加）分别为：27、0、54和9，故在屏幕上打印输出：</span><br><span class="line">27</span><br><span class="line">0</span><br><span class="line">54</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h4 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h5><ul><li>使用变量<code>temp</code>存储结果，对于保存在数组里的数据，%10取最后一位，/10舍去最后一位，当num舍到个位数，直接加到<code>temp</code>，输出结果</li></ul><h5 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sum_Number</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(num &gt; <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp += num % <span class="number">10</span>;</span><br><span class="line">        num /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp += num;</span><br><span class="line">    cout&lt;&lt;temp&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> a[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Sum_Number</span>(a[i]);</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P1005-玫瑰花数"><a href="#P1005-玫瑰花数" class="headerlink" title="P1005. 玫瑰花数"></a>P1005. 玫瑰花数</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>如果一个四位数各位数字的四次方之和恰好等于该数本身，那么这个四位数就是一个玫瑰花数，例如：</p><p>$1634 = 1^4 + 6^4 + 3^4 + 4^4 = 1 + 1296 + 81 + 256$        </p><p>写一个函数，判断某一个四位数是不是玫瑰花数，如果是玫瑰花数返回1，否则返回0。并在主函数中调用该函数，最终输出所有的玫瑰花数。                </p><h4 id="输入输出格式-5"><a href="#输入输出格式-5" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h5><p>没有输入</p><h5 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h5><p>所有的四位玫瑰花数。（每行中仅显示一个玫瑰花数）</p><h4 id="输入输出样例-5"><a href="#输入输出样例-5" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><p>无</p><h4 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h5><ul><li>该题枚举即可，从1000开始枚举到10000，a数组分别存个十百千四位。</li><li><code>num</code>将每一位四次方的结果存起来，和此时枚举的<code>i</code>作比较，若是，则输出。</li></ul><h5 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span><span class="comment">//pow(10, x)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">4</span>];</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1000</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> temp = i;</span><br><span class="line">        a[<span class="number">0</span>] = temp % <span class="number">10</span>;</span><br><span class="line">        temp /= <span class="number">10</span>;</span><br><span class="line">        a[<span class="number">1</span>] = temp % <span class="number">10</span>;</span><br><span class="line">        temp /= <span class="number">10</span>;</span><br><span class="line">        a[<span class="number">2</span>] = temp % <span class="number">10</span>;</span><br><span class="line">        a[<span class="number">3</span>] = temp / <span class="number">10</span>;</span><br><span class="line">        num = <span class="built_in">pow</span>(a[<span class="number">0</span>], <span class="number">4</span>) + <span class="built_in">pow</span>(a[<span class="number">1</span>], <span class="number">4</span>) + <span class="built_in">pow</span>(a[<span class="number">2</span>], <span class="number">4</span>) + <span class="built_in">pow</span>(a[<span class="number">3</span>], <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span>(num == i)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;i&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="P1006-旋转魔方阵"><a href="#P1006-旋转魔方阵" class="headerlink" title="P1006. 旋转魔方阵"></a>P1006. 旋转魔方阵</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入一个自然数Ｎ（N属于2到15），要求输出如下的魔方阵，即边长为N<em>N，元素取值为1至N</em>N，1在左上角，呈顺时针方向依次放置各元素。<br> N=3时：<br>  1  2  3<br>  8  9  4<br>  7  6  5</p><h4 id="输入输出格式-6"><a href="#输入输出格式-6" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h5><p>从标准输入读取一个整数N。</p><h5 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h5><p>向标准输出打印结果。输出符合要求的方阵，每个数字占5个字符宽度，向右对齐，在每一行末均输出一个回车符。</p><h4 id="输入输出样例-6"><a href="#输入输出样例-6" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-5"><a href="#输入样例-1-5" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h5 id="输出样例-1-5"><a href="#输出样例-1-5" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 1    2    3    4</span><br><span class="line">12   13   14    5</span><br><span class="line">11   16   15    6</span><br><span class="line">10    9    8    7</span><br></pre></td></tr></table></figure><h4 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h5><ul><li>使用模拟算法，<code>x</code>和<code>y</code>为坐标，使用for从1到<code>num</code>循环</li><li>明确四个方向的填数代码，注意两点。一是坐标<code>x</code>和<code>y</code>需要先改变，也就是<code>++x ++y</code>，同时填数变量<code>tmp</code>也需要先增加。（因为我们在填数时始终是在找下一个位置）</li><li>本题存在规律（代码结尾处）。先进行向右的移动，然后就是两次循环，按照下左上右的规律。</li><li>本题和接下来几个题使用的动态二维数组定义代码是通用的，可以直接当作模板套用</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="type">int</span> **element = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line">cin&gt;&gt;size;</span><br><span class="line"></span><br><span class="line">   element = <span class="keyword">new</span> <span class="type">int</span> *[size];</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">   &#123;</span><br><span class="line">       element[i] = <span class="keyword">new</span> <span class="type">int</span> [size];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="AC代码-6"><a href="#AC代码-6" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> x, y, tmp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义动态二维数组</span></span><br><span class="line">    <span class="type">int</span> **element = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    cin&gt;&gt;size;</span><br><span class="line">    <span class="type">int</span> num = size;</span><br><span class="line"></span><br><span class="line">    element = <span class="keyword">new</span> <span class="type">int</span> *[size];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        element[i] = <span class="keyword">new</span> <span class="type">int</span> [size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 核心代码</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = num; j &gt; <span class="number">0</span>; j--)<span class="comment">//right</span></span><br><span class="line">    &#123;</span><br><span class="line">        element[x][y++] = ++tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    y--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(tmp &lt; size * size)</span><br><span class="line">    &#123;</span><br><span class="line">        num--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = num; j &gt; <span class="number">0</span>; j--)<span class="comment">//down</span></span><br><span class="line">        &#123;</span><br><span class="line">            element[++x][y] = ++tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = num; j &gt; <span class="number">0</span>; j--)<span class="comment">//left</span></span><br><span class="line">        &#123;</span><br><span class="line">            element[x][--y] = ++tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        num--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = num; j &gt; <span class="number">0</span>; j--)<span class="comment">//up</span></span><br><span class="line">        &#123;</span><br><span class="line">            element[--x][y] = ++tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = num; j &gt; <span class="number">0</span>; j--)<span class="comment">//right</span></span><br><span class="line">        &#123;</span><br><span class="line">            element[x][++y] = ++tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; size; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            cout&lt;&lt;<span class="built_in">setw</span>(<span class="number">5</span>)&lt;&lt;element[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 面板停留</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 规律</span></span><br><span class="line"><span class="comment">1  2  3  4</span></span><br><span class="line"><span class="comment">12 13 14 5</span></span><br><span class="line"><span class="comment">11 16 15 6</span></span><br><span class="line"><span class="comment">10 9  8  7</span></span><br><span class="line"><span class="comment">3 3 3 2 2 1 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="P1007-折叠方阵"><a href="#P1007-折叠方阵" class="headerlink" title="P1007. 折叠方阵"></a>P1007. 折叠方阵</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个起始数（大于等于1，小于等于20）和方阵的阶数（大于等于1，小于等于20），编程求得并输出该折叠方阵。一个起始数为10，4阶折叠方阵为：</p><p> 10  11  14  19</p><p> 13  12  15  20</p><p> 18  17  16  21</p><p> 25  24  23  22</p><h4 id="输入输出格式-7"><a href="#输入输出格式-7" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h5><p>从标准输入中输入两个正整数分别表示起始数和方阵的阶数，以一个空格分隔这两个数字。</p><h5 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h5><p>将生成的折叠方阵按行输出到标准输出上，每个数字占4个字符的宽度，靠右对齐，各数字之间不再有空格分隔，每行末尾有回车换行。</p><h4 id="输入输出样例-7"><a href="#输入输出样例-7" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-6"><a href="#输入样例-1-6" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 5</span><br></pre></td></tr></table></figure><h5 id="输出样例-1-6"><a href="#输出样例-1-6" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 3   4   7  12  19</span><br><span class="line"> 6   5   8  13  20</span><br><span class="line">11  10   9  14  21</span><br><span class="line">18  17  16  15  22</span><br><span class="line">27  26  25  24  23</span><br></pre></td></tr></table></figure><h4 id="样例说明-1"><a href="#样例说明-1" class="headerlink" title="样例说明"></a>样例说明</h4><p>样例输入的起始数为3，方阵的阶数为5，按行输出生成的折叠方阵，每个数字占4个字符的宽度。</p><p>提示：输出时为了使每个数字占4个字符宽度，c程序可以使用：printf(“%4d”,……)进行控制输出。</p><h4 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h5><ul><li>本题依然有规律，请把方阵分解为朝向左的L。同时把第一行作为每一次循环的开始。</li><li>L的大小是和列号相同。</li><li>核心代码为，向下的循环和向左的循环。</li></ul><h5 id="AC代码-7"><a href="#AC代码-7" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义动态二维数组</span></span><br><span class="line">    <span class="type">int</span> **element = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> start;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    cin&gt;&gt;start&gt;&gt;size;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> tmp = start;</span><br><span class="line"></span><br><span class="line">    element = <span class="keyword">new</span> <span class="type">int</span> *[size];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        element[i] = <span class="keyword">new</span> <span class="type">int</span> [size];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 核心代码</span></span><br><span class="line"></span><br><span class="line">    element[x][y] = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(num = <span class="number">1</span>; num &lt; size; num++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//第一行</span></span><br><span class="line">        x = <span class="number">0</span>;</span><br><span class="line">        y = num;</span><br><span class="line">        <span class="keyword">while</span>(tmp &lt;= num * num - <span class="number">1</span> + start)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= num + <span class="number">1</span>; j++)<span class="comment">//down</span></span><br><span class="line">            &#123;</span><br><span class="line">                element[x++][y] = ++tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            x--;<span class="comment">//纠正X轴</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= num; j++)<span class="comment">//left</span></span><br><span class="line">            &#123;</span><br><span class="line">                element[x][--y] = ++tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; size; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            cout&lt;&lt;<span class="built_in">setw</span>(<span class="number">4</span>)&lt;&lt;element[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 面板停留</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P1008-方阵乘法运算"><a href="#P1008-方阵乘法运算" class="headerlink" title="P1008. 方阵乘法运算"></a>P1008. 方阵乘法运算</h3><h4 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h4><p>从键盘输入一个正整数n（n属于[1,10]），表示进行乘法运算的两个整形方阵的阶。然后分别输入两个整形方阵A和B，计算A*B后将结果输出到屏幕。</p><h4 id="输入输出格式-8"><a href="#输入输出格式-8" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-8"><a href="#输入格式-8" class="headerlink" title="输入格式"></a>输入格式</h5><p>从键盘输入一个正整数，然后再输入两个整形方阵。</p><h5 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式"></a>输出格式</h5><p>在屏幕上输出两个整形方阵的乘积。</p><h4 id="输入输出样例-8"><a href="#输入输出样例-8" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-7"><a href="#输入样例-1-7" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 1 1</span><br><span class="line">3 3 3</span><br><span class="line">6 6 6</span><br><span class="line">9 9 9</span><br><span class="line">6 6 6</span><br><span class="line">5 5 5</span><br></pre></td></tr></table></figure><h5 id="输出样例-1-7"><a href="#输出样例-1-7" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><p>########20########20########20<br>########60########60########60<br>#######120#######120#######120</p><h4 id="样例说明-2"><a href="#样例说明-2" class="headerlink" title="样例说明"></a>样例说明</h4><p>首先输入正整数3,说明接下来要输入的方阵是3<em>3的。因为<br>1 1 1     9 9 9     20 20 20<br>3 3 3  </em>  6 6 6  =  60 60 60<br>6 6 6    5 5 5     120 120 120<br>所以在屏幕上打印：<br>########20########20########20<br>########60########60########60<br>#######120#######120#######120</p><p>注：”#”代表空格，每个输出的整数占10位，不足10位在整数的左边用空格补足。</p><h4 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h5><ul><li><code>element[]</code>为存储第一个矩阵,<code>element_02[]</code>为存储第二个矩阵,<code>element_03[]</code>为输出结果矩阵</li><li><a href="https://baike.baidu.com/item/矩阵乘法/5446029?fr=aladdin">矩阵乘法_百度百科 (baidu.com)</a></li><li>只要是看懂了矩阵的乘法运算规律，通过一一对应，本题便能做出来。</li></ul><h5 id="AC代码-8"><a href="#AC代码-8" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义动态二维数组</span></span><br><span class="line">    <span class="type">int</span> **element = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> **element_02 = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> **element_03 = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    cin&gt;&gt;size;</span><br><span class="line"></span><br><span class="line">    element = <span class="keyword">new</span> <span class="type">int</span> *[size];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        element[i] = <span class="keyword">new</span> <span class="type">int</span> [size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    element_02 = <span class="keyword">new</span> <span class="type">int</span> *[size];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        element_02[i] = <span class="keyword">new</span> <span class="type">int</span> [size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    element_03 = <span class="keyword">new</span> <span class="type">int</span> *[size];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        element_03[i] = <span class="keyword">new</span> <span class="type">int</span> [size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入数据</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; size; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;element[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; size; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;element_02[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 核心代码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; size; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            element_03[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; size; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> num = size;</span><br><span class="line">            <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(num &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                element_03[i][j] += element[i][y] * element_02[y][j];</span><br><span class="line">                y++;</span><br><span class="line">                num--;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结果输出</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; size; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">setw</span>(<span class="number">10</span>)&lt;&lt;element_03[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// VSCode</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 1 1 9 9 9</span></span><br><span class="line"><span class="comment">3 3 3 6 6 6</span></span><br><span class="line"><span class="comment">6 6 6 5 5 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="P1009-N阶魔方阵"><a href="#P1009-N阶魔方阵" class="headerlink" title="P1009. N阶魔方阵"></a>P1009. N阶魔方阵</h3><h4 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h4><p>魔方阵指一个A是NxN矩阵（在本题中N仅为奇数，且N&gt;1），以自然数1，2， 。。。 N2为元素进行填充，每个位置上分别放置一个元素，使每行、每列以及主、副对角线上的元素之和都相等。<br>如3x3魔方阵，图在每行、每列、主对角线、副对角线上元素之和均为15：<br>8 1 6<br>3 5 7<br>4 9 2<br>奇数阶魔方阵的生成算法如下，初始矩阵A为空，从1开始依据下面的规则依次放置各个自然数（注意在下面的叙述中各元素行、列下标均以1-N计数）：<br>\1. 将1放在第一行正中的位置，即A[1, (j+1)/2]；<br>\2. 设最后放置的元素是A[i, j]，则将下一个元素放在最后一个插入位置的右上方，即A[i-1, j+1]。但如果该位置已超出方阵的上边界（即如果i&lt;0），则新位置取该列的最下一个位置，即A[N, j+1]；如果该位置已超出方阵的右边界，取新位置取该行的最左一个位置，即A[i-1, 1]。<br>\3. 若最近一个插入元素为N的整倍数，则新位置取最后插入元素下面的位置，即A[i+1, j]。<br>输入一个奇数N，打印对应的N阶魔方阵。</p><h4 id="输入输出格式-9"><a href="#输入输出格式-9" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-9"><a href="#输入格式-9" class="headerlink" title="输入格式"></a>输入格式</h5><p>控制台输入一奇数N。</p><h5 id="输出格式-9"><a href="#输出格式-9" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出一个N*N的魔方阵，其中每个数字占4位字符的宽度，向右对齐。</p><h4 id="输入输出样例-9"><a href="#输入输出样例-9" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-8"><a href="#输入样例-1-8" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h5 id="输出样例-1-8"><a href="#输出样例-1-8" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">17  24   1   8  15</span><br><span class="line">23   5   7  14  16</span><br><span class="line"> 4   6  13  20  22</span><br><span class="line">10  12  19  21   3</span><br><span class="line">11  18  25   2   9</span><br></pre></td></tr></table></figure><h4 id="样例说明-3"><a href="#样例说明-3" class="headerlink" title="样例说明"></a>样例说明</h4><p>输入奇数5，输出5阶魔方阵。</p><h4 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h5><ul><li>本题主要是考察限定规则，题目中每一次新的位置都是在原来位置的右上方，此时你需要考虑两种情况：一是超出数组的边界，一是右上角已经存在数据。</li><li>本题代码使用了<code>maps</code>数组来标记数据的填充，在每一次填数操作后都使得该位置的<code>maps</code>数组为1。</li><li>判断情况有以下几种。<ul><li>超右边界但是不超上边界</li><li>超上边界但是不超右边界</li><li>既超上边界也超右边界</li><li>既不超上边界也不超右边界</li></ul></li></ul><h5 id="AC代码-9"><a href="#AC代码-9" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 核心代码</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    cin&gt;&gt;size;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, y = (size / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义动态二维数组</span></span><br><span class="line">    <span class="type">int</span> **element = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> **maps = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    element = <span class="keyword">new</span> <span class="type">int</span> *[size];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        element[i] = <span class="keyword">new</span> <span class="type">int</span> [size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    maps = <span class="keyword">new</span> <span class="type">int</span> *[size];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        maps[i] = <span class="keyword">new</span> <span class="type">int</span> [size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; size; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            element[i][j] = <span class="number">0</span>;</span><br><span class="line">            maps[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    element[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> num = <span class="number">2</span>; num &lt;= size * size; num++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((num - <span class="number">1</span>) % size == <span class="number">0</span>)</span><br><span class="line">        &#123;   </span><br><span class="line">            element[++x][y] = num;</span><br><span class="line">            maps[x][y] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x - <span class="number">1</span> &lt; <span class="number">0</span> &amp;&amp; y + <span class="number">1</span> &lt; size &amp;&amp; maps[size - <span class="number">1</span>][++y] == <span class="number">0</span>)<span class="comment">// 超上边界但不超右边界</span></span><br><span class="line">        &#123;</span><br><span class="line">            x = size - <span class="number">1</span>;</span><br><span class="line">            element[x][y] = num;</span><br><span class="line">            maps[x][y] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(y + <span class="number">1</span> &gt; size - <span class="number">1</span> &amp;&amp; x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; maps[--x][<span class="number">0</span>] == <span class="number">0</span>)<span class="comment">// 超右边界但不超上边界</span></span><br><span class="line">        &#123;</span><br><span class="line">            y = <span class="number">0</span>;</span><br><span class="line">            element[x][y] = num;</span><br><span class="line">            maps[x][y] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x - <span class="number">1</span> &lt; <span class="number">0</span> &amp;&amp; y + <span class="number">1</span> &gt; size - <span class="number">1</span> &amp;&amp; maps[size - <span class="number">1</span>][<span class="number">0</span>] == <span class="number">0</span>)<span class="comment">// 既超上边界也超右边界</span></span><br><span class="line">        &#123;</span><br><span class="line">            x = size - <span class="number">1</span>;y = <span class="number">0</span>;</span><br><span class="line">            element[x][y] = num;</span><br><span class="line">            maps[x][y] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; y + <span class="number">1</span> &lt; size &amp;&amp; maps[--x][++y] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            element[x][y] = num;</span><br><span class="line">            maps[x][y] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; size; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">setw</span>(<span class="number">4</span>)&lt;&lt;element[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P1010-完美数"><a href="#P1010-完美数" class="headerlink" title="P1010. 完美数"></a>P1010. 完美数</h3><h4 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h4><p>所有真约数（除本身之外的正约数）的和等于它本身的正整数叫做完美数，又叫做完全数或完备数。当所有真约数（除本身之外的正约数）的和等于它本身的正整数叫做亏数；相反情况时，叫做盈数。</p><p>比如“4”这个数，它的真约数有1，2，其和是3，3比4本身小，这样的自然数就叫做亏数（又叫做缺数），类似的还有5，7，8等等。比如“12”这个数，它真约数有1，2，3，4，6，其和是16，16比12本身大，这样的自然数就叫做盈数（又叫做丰数，或过剩数或富裕数），类似的还有12，18，20等等。</p><p>完美数就是既不盈余，又不亏欠的自然数，比如“6”这个数，它真约数有1，2，3，其和是1+2+3=6，刚好等于6本身。</p><p>要求用户从键盘上输入任意一个自然数，判断该数是盈数、亏数还是完美数。如果该数是亏数，输出“Deficit”；如果该数是盈数，输出“Surplus”；如果该数 是完美数，则输出“Perfect” 。</p><h4 id="输入输出格式-10"><a href="#输入输出格式-10" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-10"><a href="#输入格式-10" class="headerlink" title="输入格式"></a>输入格式</h5><p>一个自然数。</p><h5 id="输出格式-10"><a href="#输出格式-10" class="headerlink" title="输出格式"></a>输出格式</h5><p>如果该数是亏数，输出“Deficit”；如果该数是盈数，输出“Surplus”；如果该数是完美数，输出“Perfect”。</p><h4 id="输入输出样例-10"><a href="#输入输出样例-10" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-9"><a href="#输入样例-1-9" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h5 id="输出样例-1-9"><a href="#输出样例-1-9" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Perfect</span><br></pre></td></tr></table></figure><h4 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h5><ul><li>本题实际上是找因数的改动版本。先找到输入数的因数，然后将所有因数（除它本身以外）相加。</li></ul><h5 id="AC代码-10"><a href="#AC代码-10" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    cin&gt;&gt;num;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Core</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(num % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ans &gt; num)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Surplus&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ans &lt; num)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Deficit&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Perfect&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P1011-一元二次方程的根"><a href="#P1011-一元二次方程的根" class="headerlink" title="P1011. 一元二次方程的根"></a>P1011. 一元二次方程的根</h3><h4 id="题目描述（不考虑虚根）"><a href="#题目描述（不考虑虚根）" class="headerlink" title="题目描述（不考虑虚根）"></a>题目描述（不考虑虚根）</h4><p>在实数范围内求方程$ax^2+bx+c=0$的根。方程的系数$a,b,c$由用户从键盘上输入。</p><h4 id="输入输出格式-11"><a href="#输入输出格式-11" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式 #1"></a>输入格式 #1</h5><p>方程的系数$a,b,c$（假设是整型数据）。</p><h5 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式 #1"></a>输出格式 #1</h5><p>实数范围内求方程的根，如果存在实数根，结果保留两位小数且$x1 \ge x2$。当有两个实根时，要求先输出实根$x=[-b+\sqrt{(b2-4ac)}]/2a$，空格后再输出实根$x=[-b-\sqrt{(b2-4ac)}]/2a$；当有两个相同的实根时，仅输出一个实根$x=[-b+\sqrt{(b2-4ac)}]/2a$或$x=[-b-\sqrt{(b2-4ac)}]/2a$即可；当没有实根时，输出”NONE”。</p><h4 id="输入输出样例-11"><a href="#输入输出样例-11" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-10"><a href="#输入样例-1-10" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 8 4</span><br></pre></td></tr></table></figure><h5 id="输出样例-1-10"><a href="#输出样例-1-10" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-0.54 -7.46</span><br></pre></td></tr></table></figure><h4 id="题解-11"><a href="#题解-11" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h5><ul><li>注意Δ的判断即可，本题没有难度。</li></ul><h5 id="AC代码-11"><a href="#AC代码-11" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    <span class="type">double</span> ans1, ans2;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(b * b - <span class="number">4</span> * a * c &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;NONE&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans1 = (-b + <span class="built_in">sqrt</span>(b * b - <span class="number">4</span> * a * c)) / (<span class="number">2</span> * a);</span><br><span class="line">    ans2 = (-b - <span class="built_in">sqrt</span>(b * b - <span class="number">4</span> * a * c)) / (<span class="number">2</span> * a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ans1 == ans2)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>, ans1);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf %.2lf&quot;</span>, ans1, ans2);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目描述-考虑虚根"><a href="#题目描述-考虑虚根" class="headerlink" title="题目描述(考虑虚根)"></a>题目描述(考虑虚根)</h4><p>在实数范围内求方程$ax^2+bx+c=0$的根。方程的系数$a,b,c$由用户从键盘上输入。</p><h4 id="输入输出格式-12"><a href="#输入输出格式-12" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-11"><a href="#输入格式-11" class="headerlink" title="输入格式"></a>输入格式</h5><p>方程的系数$a,b,c$（假设是整型数据）。</p><h5 id="输出格式-11"><a href="#输出格式-11" class="headerlink" title="输出格式"></a>输出格式</h5><p>实数范围内求方程的根，如果存在实数根，结果保留两位小数且$x1 \ge x2$。当有两个实根时，要求先输出实根$x=[-b+\sqrt{(b2-4ac)}]/2a$，空格后再输出实根$x=[-b-\sqrt{(b2-4ac)}]/2a$；当有两个相同的实根时，仅输出一个实根$x=[-b+\sqrt{(b2-4ac)}]/2a$或$x=[-b-\sqrt{(b2-4ac)}]/2a$即可；当没有实根时，输出一对共轭复根。</p><h4 id="输入输出样例-12"><a href="#输入输出样例-12" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-11"><a href="#输入样例-1-11" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3</span><br></pre></td></tr></table></figure><h5 id="输出样例-1-11"><a href="#输出样例-1-11" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1.00+1.41i -1.00-1.41i</span><br></pre></td></tr></table></figure><h4 id="题解-12"><a href="#题解-12" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h5><ul><li>当Δ &lt; 0时，根为$(-b±\sqrt{(-Δ)i})/2a$</li></ul><h5 id="AC代码-12"><a href="#AC代码-12" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> a, b, c;</span><br><span class="line">    <span class="type">double</span> ans1, ans2;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    <span class="type">int</span> delta = b * b - <span class="number">4</span> * a * c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(delta &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans1 = (-b) / (<span class="number">2</span> * a);</span><br><span class="line">        ans2 = (<span class="built_in">sqrt</span>(-delta)) / (<span class="number">2.0</span> * a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf+%.2lfi &quot;</span>, ans1, ans2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf-%.2lfi&quot;</span>, ans1, ans2);</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans1 = (-b + <span class="built_in">sqrt</span>(b * b - <span class="number">4</span> * a * c)) / (<span class="number">2</span> * a);</span><br><span class="line">    ans2 = (-b - <span class="built_in">sqrt</span>(b * b - <span class="number">4</span> * a * c)) / (<span class="number">2</span> * a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ans1 == ans2)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>, ans1);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf %.2lf&quot;</span>, ans1, ans2);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt=""></p>          </div>]]></content>
    
    
    <summary type="html">零散的一些C语言习题</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.sakurasep.site/Butterfly/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C语言" scheme="https://blog.sakurasep.site/Butterfly/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>《洛谷刷题日记》</title>
    <link href="https://blog.sakurasep.site/Butterfly/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E6%B4%9B%E8%B0%B7%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://blog.sakurasep.site/Butterfly/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E6%B4%9B%E8%B0%B7%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2021-04-02T09:00:07.000Z</published>
    <updated>2022-04-19T11:57:28.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h1><blockquote><p>作者：上杉九月</p><p>排版与发布：上杉九月</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录一下洛谷的做题详细思路，方便自己，也方便其他想要做题的同学。</p><p>为了方便访问，所有内容将在此文章更新，我会做好分类。</p><p>欢迎收藏！</p><p>如果你有对于这些题目不同的算法，欢迎在评论区与我交流。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="P1217-USACO1-5-回文质数-Prime-Palindromes"><a href="#P1217-USACO1-5-回文质数-Prime-Palindromes" class="headerlink" title="P1217 [USACO1.5]回文质数 Prime Palindromes"></a><a href="https://www.luogu.com.cn/problem/P1217">P1217 [USACO1.5]回文质数 Prime Palindromes</a></h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>因为 151 既是一个质数又是一个回文数（从左到右和从右到左是看一样的），所以 151 是回文质数。</p><p>写一个程序来找出范围 $[a,b] (5 \le a &lt; b \le 100,000,000)$( 一亿)间的所有回文质数。</p><h4 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>第 1 行: 二个整数 a 和 b .</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出一个回文质数的列表，一行一个。</p><h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 500</span><br></pre></td></tr></table></figure><h5 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">7</span><br><span class="line">11</span><br><span class="line">101</span><br><span class="line">131</span><br><span class="line">151</span><br><span class="line">181</span><br><span class="line">191</span><br><span class="line">313</span><br><span class="line">353</span><br><span class="line">373</span><br><span class="line">383</span><br></pre></td></tr></table></figure><h4 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h4><p>Hint 1: Generate the palindromes and see if they are prime.</p><p>提示 1: 找出所有的回文数再判断它们是不是质数（素数）</p><p>Hint 2: Generate palindromes by combining digits properly. You might need more than one of the loops like below.</p><p>提示 2: 要产生正确的回文数，你可能需要几个像下面这样的循环。</p><p>题目翻译来自NOCOW。</p><p>产生长度为5的回文数:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (d1 = <span class="number">1</span>; d1 &amp;lt;= <span class="number">9</span>; d1+=<span class="number">2</span>) &#123;    <span class="comment">// 只有奇数才会是素数</span></span><br><span class="line">     <span class="keyword">for</span> (d2 = <span class="number">0</span>; d2 &amp;lt;= <span class="number">9</span>; d2++) &#123;</span><br><span class="line">         <span class="keyword">for</span> (d3 = <span class="number">0</span>; d3 &amp;lt;= <span class="number">9</span>; d3++) &#123;</span><br><span class="line">           palindrome = <span class="number">10000</span>*d1 + <span class="number">1000</span>*d2 +<span class="number">100</span>*d3 + <span class="number">10</span>*d2 + d1;<span class="comment">//(处理回文数...)</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p><p>线性筛素数算法：洛谷@学委</p><p>原理性证明：<a href="https://www.luogu.com.cn/blog/cicos/notprime">学委的博客</a></p></blockquote><h5 id="回文数判断"><a href="#回文数判断" class="headerlink" title="回文数判断"></a>回文数判断</h5><blockquote><p>从个位开始，倒序输出，最后与原数判断</p></blockquote><h5 id="质数判断"><a href="#质数判断" class="headerlink" title="质数判断"></a>质数判断</h5><blockquote><p>这里用到线性筛</p><p>关于质数<a href="https://sakurasep.site/posts/13253/">请看</a></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> Prime_Map[<span class="number">100000001</span>];<span class="comment">//创建质数地图</span></span><br><span class="line"><span class="type">int</span> Prime[<span class="number">1000000</span>];<span class="comment">//int数组存质数</span></span><br><span class="line"><span class="type">int</span> cnt;<span class="comment">//定义一个标记，记录质数的存储下标</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Judge_Hw</span><span class="params">(<span class="type">int</span> n)</span><span class="comment">//回文数判断</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> x = n;<span class="comment">//n为输入数据，x为中介数据</span></span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m = m * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( m == n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Judge_Prime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Prime_Map, <span class="number">1</span>, <span class="built_in">sizeof</span>(Prime_Map));<span class="comment">//初始化</span></span><br><span class="line">    Prime_Map[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Prime_Map[i])</span><br><span class="line">        &#123;</span><br><span class="line">            Prime[++cnt] = i;<span class="comment">//如果下标i没有被筛选掉，存入质数数组</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; i * Prime[j] &lt;= n; j++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//对质数倍数进行筛出</span></span><br><span class="line">            Prime_Map[i * Prime[j]] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i % Prime[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">if</span>(b &gt;= <span class="number">10000000</span>)<span class="comment">//没有超过1千万的质数回文数，洛谷最后一个点会卡RE</span></span><br><span class="line">    &#123;</span><br><span class="line">        b = <span class="number">10000000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Judge_Prime</span>(b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Judge_Hw</span>(Prime[i]) == <span class="number">1</span> &amp;&amp; Prime[i] &gt;= a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Prime[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt=""></p>          </div>]]></content>
    
    
    <summary type="html">记录自己在洛谷的做题记录</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.sakurasep.site/Butterfly/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C语言" scheme="https://blog.sakurasep.site/Butterfly/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="洛谷" scheme="https://blog.sakurasep.site/Butterfly/tags/%E6%B4%9B%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>《应用使用指南》Perfdog_第2期</title>
    <link href="https://blog.sakurasep.site/Butterfly/HowToUse/%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%20-%20Perfdog/"/>
    <id>https://blog.sakurasep.site/Butterfly/HowToUse/%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%20-%20Perfdog/</id>
    <published>2021-03-22T12:04:51.000Z</published>
    <updated>2022-04-19T11:50:38.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h1><blockquote><p>作者：酷安@上杉九月</p><p>头图设计：酷安@上杉九月</p><p>排版及其发布：酷安@上杉九月</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>当我们作为一位消费者购买电子产品时，我们获取第一手信息的方式大多是从各大视频平台的自媒体的首发测评。当我们拿到电子产品之后，如何对它的性能进行测试呢？</p><p>有的朋友首先会想到娱乐兔，HappyMatser等跑分软件。毕竟跑分很直观，高就是强，低就是弱。但是当跑分论成为大众的标准，厂商便会想出各种各样的方法来获取更高的跑分。例如前几天被曝光的Realme GT跑分作弊，还有各大厂商的跑分白名单（MIUI检测到跑分软件运行，会将CPU锁在最高频率）。这样的测试只能算是极限性能，可是真正的去游戏里测试，散热设计的不同，调度优化的不同便会产生巨大的差距。</p><p>很早之前我也对手里的电子产品进行测试，当时用的是GameBench，不过经常出问题，正版的价格更是无法接受。第二个使用的软件是快否，虽然偶尔会出现一些bug，但是使用体验还是很不错的。不过因为这软件最后一次更新时间是2019年6月，emmm，基本是凉凉了。</p><p>去年的时候，把手里的米9换成了米10，因为听说865的性能与功耗都平衡的很好，便产生了测试的想法。这一款由腾讯旗下WeTest开发的软件Perfdog吸引了我。支持<code>Windows</code>，<code>Mac OS X</code>两个PC平台，可以对安卓和iOS设备进行测试。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="软件测试环境"><a href="#软件测试环境" class="headerlink" title="软件测试环境"></a>软件测试环境</h2><blockquote><ol><li>小米10 12G RAM MIUI12.5 21.3.12 官方包</li><li>iPad 2020 第八代 A12 iPad OS 14</li></ol></blockquote><h2 id="软件基本安装操作"><a href="#软件基本安装操作" class="headerlink" title="软件基本安装操作"></a>软件基本安装操作</h2><blockquote><p><a href="https://perfdog.qq.com/">Perfdog官方网站</a></p></blockquote><p>在Perfdog的官网下载对应平台的软件压缩包后，将压缩包解压到电脑的目录中。</p><p>在目录找到Perfdog.exe可执行文件，打开后显示登陆界面，这里可以注册账号或使用QQ扫码登陆。</p><p><strong>软件登录界面</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/1.png" alt=""></p>          </div><p>登录后便会进入到软件的UI界面</p><p><strong>软件界面</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/2.png" alt=""></p>          </div><p>此时便可以将你的测试设备与电脑进行链接。初始化之后，在左侧的两个选项中选择测试方式（无线or有线 无线可以测试电池相关内容，有线可以同步显示并记录手机画面）和测试应用（支持应用名称搜索）</p><p><strong>选择模式和设备（Windows平台可以多开Perfdog并同时对多部设备测试）</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/5.jpg" alt=""></p>          </div><p>右下角的加号是添加和减少测试项目。勾选左边的对号便是对此项目进行测试，点击右边的方框选择是否在软件中显示该项目的数据。</p><p><strong>安卓设备与iOS设备的测试项目稍有出入</strong></p><p><strong>安卓设备</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/3.jpg" alt=""></p>          </div><p><strong>iOS设备</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/4.jpg" alt=""></p>          </div><p>选择好测试应用，调整好测试项目，拿起你的设备，准备开始吧。</p><h2 id="软件数据解释与详细使用步骤"><a href="#软件数据解释与详细使用步骤" class="headerlink" title="软件数据解释与详细使用步骤"></a>软件数据解释与详细使用步骤</h2><p>建议有能力的朋友前往<a href="https://bbs.perfdog.qq.com/article-detail.html?id=5">官网</a>去详细了解测试项目的具体作用。以下内容是我个人的解读，可能会有一些不准确的地方，还请多多指教。</p><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/6.jpg" alt=""></p>          </div><ul><li>平均帧率 - Avg(FPS)<br>这一个数据对应的是整个测试过程的平均帧率，可以粗略的反应游戏的流畅程度。</li><li>卡顿次数/每10分钟 - Jank(/10min)</li><li>严重卡顿次数/每10分钟 - BigJank(/10min)</li></ul><p>这里放出perfdog官方给出的计算思路和计算方式</p><h4 id="PerfDog-Jank-计算思路："><a href="#PerfDog-Jank-计算思路：" class="headerlink" title="PerfDog Jank 计算思路："></a>PerfDog Jank 计算思路：</h4><blockquote><p>考虑视觉惯性，假设以前三帧的平均帧耗时为参考，作为vsync时间间隔，连续两次vsync没有新渲染画面刷新，则认为是一次潜在卡顿，也就是说下一帧耗时大于前三帧平均帧耗时2倍，则认为一次潜在卡顿。同时单帧耗时满足大于两倍电影帧耗时1000ms/24x2(由于人眼低于24帧才能辨别画面不连续性)，则认为是一次真正卡顿。同时若单帧耗时大于3倍电影帧耗时，则认为是一次严重卡顿。</p></blockquote><h4 id="PerfDog-Jank计算方法："><a href="#PerfDog-Jank计算方法：" class="headerlink" title="PerfDog Jank计算方法："></a>PerfDog Jank计算方法：</h4><blockquote><p>同时满足两条件，则认为是一次卡顿Jank.<br>①Display FrameTime&gt;前三帧平均耗时2倍。<br>②Display FrameTime&gt;两帧电影帧耗时 (1000ms/24x2≈83.33ms)。<br>同时满足两条件，则认为是一次严重卡顿BigJank.<br>①Display FrameTime &gt;前三帧平均耗时2倍。<br>②Display FrameTime &gt;三帧电影帧耗时(1000ms/24x3=125ms)。</p></blockquote><ul><li>未规范化应用CPU利用率 - Avg(AppCPU)[%]<br>这里未规范化CPU利用率的计算方式 = CPU执行时间/CPU总时间。如果使用这一项利用率计算APP的性能消耗，会出现在低频运行时和高频运行时CPU利用率相同的情况。<br>所以Perfdog官方建议使用规范化CPU利用率。</li><li>CPU平均温度 - Avg(CTemp)[°C]</li><li>规范化应用CPU利用率 - Avg(AppCPU)[%]Normalized<br>这种CPU利用率的计算方法将CPU的频率考虑进去。<br>CPU Usage(Normalized)= (CPU执行时间/CPU总时间) * (当前时刻所有CPU频率之和/所有CPU频率最大值之和)<br>这种计算方法可以更真实的反映出APP的性能消耗。</li><li>最大内存占用 - Peak(Memory)[MB]</li><li>平均上传速度 - Avg(Send)[KB/s]</li><li>平均下载速度 - Avg(Recv)[KB/s]</li><li>平均功耗 - Avg(Power)[mW]</li></ul><h4 id="FPS"><a href="#FPS" class="headerlink" title="FPS"></a>FPS</h4><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/7.jpg" alt=""></p>          </div><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/8.jpg" alt=""></p>          </div><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/9.jpg" alt=""></p>          </div><ul><li><p>平均帧率 - Avg(FPS)<br>这一个数据对应的是整个测试过程的平均帧率，可以粗略的反应游戏的流畅程度</p></li><li><p>帧率方差 - Var(FPS)<br>这一个数据反映的是帧率的波动大小</p></li><li><p>大于等于某一帧率的测试数据百分比 - FPS&gt;=30[%] FPS&gt;=45[%]<br>这一数据显示可以修改，在右下角，可以看数据的大致分布</p></li><li><p>降帧次数 - Drop(FPS)[/h]<br>平均每小时两个相邻的FPS点相差大于8帧的次数，反映的是画面的流畅程度</p></li><li><p>卡顿次数/每10分钟 - Jank(/10min)</p></li><li><p>严重卡顿次数/每10分钟 - BigJank(/10min)</p></li><li><p>卡顿率 - Stutter[%]<br>计算方式 卡顿率 = 卡顿时长 / 总时长</p></li><li><p>平均单帧渲染时间 - Avg(FTime)[ms]<br>这一个数据可以结合第三张图 Frame Time分析<br>如果Frame Time时长在某一个点很大幅度超过平均单帧渲染时间，那么大概率是一次卡顿</p></li><li><p>单帧渲染时间超过100ms - FTime&gt;=100ms[%]<br>单帧渲染时间过长，很有可能导致屏幕没有内容可以刷新，所以画面不动，即为卡顿</p></li><li><p>增量耗时 - Delta(FTime)&gt;100ms[/h]</p></li></ul><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/10.jpg" alt=""></p>          </div><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/11.jpg" alt=""></p>          </div><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/12.jpg" alt=""></p>          </div><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/13.jpg" alt=""></p>          </div><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/14.jpg" alt=""></p>          </div><ul><li>未规范化应用CPU利用率 - Avg(AppCPU)[%]<br>这里未规范化CPU利用率的计算方式 = CPU执行时间/CPU总时间。如果使用这一项利用率计算APP的性能消耗，会出现在低频运行时和高频运行时CPU利用率相同的情况。</li></ul><p>所以Perfdog官方建议使用规范化CPU利用率。</p><ul><li><p>未规范化应用CPU利用率小于等于50%/70% - AppCPU&lt;=50%[%] AppCPU&lt;=70%[%]</p></li><li><p>未规范化总的CPU利用率 - Avg(TotalCPU)[%]</p></li><li><p>未规范化总的CPU利用率小于等于50%/70% - TotalCPU&lt;=50%[%] TotalCPU&lt;=70%[%]</p></li><li><p>CPU平均温度 - Avg(CTemp)[°C]<br>下面一排都是规范化的CPU指标，不多赘述</p></li><li><p>CPU时钟频率 - CPU Clock<br>反映的是当前时间CPU各个核心的频率</p></li></ul><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>这部分对于性能测试的参考性不是很高。</p><p>这里Perfdog提醒：在极限测试情况下，例如开启游戏超高帧率，建议不要勾选收集Memory Usage和Memory Detail，因为部分机型会有性能损耗。</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/15.jpg" alt=""></p>          </div><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/16.jpg" alt=""></p>          </div><h3 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h3><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/17.jpg" alt=""></p>          </div><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/18.jpg" alt=""></p>          </div><ul><li><p>平均GPU利用率 - Avg(GUsage)[%]<br>反映的是应用是否可以充分利用GPU性能</p></li><li><p>平均CPU时钟频率 - Avg(GClock)[MHz]<br>反映的是应用的负载压力</p></li></ul><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><p>这一部分对于非实时对战游戏参考性不是很高。测试王者荣耀等对网络要求较高的游戏可以进行关注。</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/19.jpg" alt=""></p>          </div><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/20.jpg" alt=""></p>          </div><h3 id="Battery"><a href="#Battery" class="headerlink" title="Battery"></a>Battery</h3><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/21.jpg" alt=""></p>          </div><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/22.jpg" alt=""></p>          </div><ul><li><p>平均功耗 - Avg(Power)[mW]<br>在一定程度上反映了当前手机的功耗</p></li><li><p>耗电量 - Sum(Battery)[mWh]<br>手机在运行测试期间所消耗的电量</p></li><li><p>平均电压 - Avg(Voltage)[mV]</p></li><li><p>平均电流 - Avg(Current)[mA]</p></li></ul><h3 id="Energy-Usage"><a href="#Energy-Usage" class="headerlink" title="Energy Usage"></a>Energy Usage</h3><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/23.jpg" alt=""></p>          </div><p>监控应用使用的能耗情况，可以监控CPU，GPU，网络模块，定位模块等等</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于芯片的性能测试，我认为主要应该关注的数据项目为</p><ul><li><p>平均帧率 - Avg(FPS)<br>反映的是设备的游戏运行稳定性，越接近设定的游戏帧率越好。</p></li><li><p>帧率方差 - Var(FPS)<br>反映的是设备掉帧的严重程度，越小越好。</p></li><li><p>降帧次数 - Drop(FPS)[/h]<br>反映的是设备的掉帧次数（掉帧次数不等于卡顿次数），越少越好。</p></li><li><p>卡顿次数/每10分钟 - Jank(/10min)<br>反映的是人所能感知的小卡顿次数，越少越好。</p></li><li><p>严重卡顿次数/每10分钟 - BigJank(/10min)<br>反映的是人所能感知的严重卡顿次数，越少越好。</p></li><li><p>平均单帧渲染时间 - Avg(FTime)[ms]<br>反映的是设备对画面单一帧的渲染平均时间，若某一时刻对画面渲染的时间远远超过平均值，说明此时屏幕内容没有刷新，会觉得明显卡顿，单帧渲染时间越贴近平均值越好。</p></li><li><p>规范化的应用CPU利用率 - Avg(AppCPU)[%]Normalized<br>反映的是排除其他影响因素后应用对于CPU性能的消耗。</p></li><li><p>CPU平均温度 - Avg(CTemp)[°C]<br>反映的是应用长时间运行使CPU升高的温度，作为温控降频的参考数据。</p></li><li><p>CPU时钟频率 - CPU Clock<br>反映的是应用运行时CPU的调度情况，作为卡顿分析和功耗分析的参考数据。</p></li><li><p>平均GPU利用率 - Avg(GUsage)[%]<br>反映的是应用对于GPU的使用情况。</p></li><li><p>平均CPU时钟频率 - Avg(GClock)[MHz]<br>反映的是应用运行时GPU的调度情况，作为卡顿分析和功耗分析的参考数据。</p></li><li><p>平均功耗 - Avg(Power)[mW]<br>反映的是应用运行时的平均功耗，高中低负载在功耗这一测试项目差距较大，例如骁龙888在高负载可以跑到11w的功耗，在低负载只有4w，续航和发热因此不同。</p></li></ul><h2 id="云端页面功能介绍"><a href="#云端页面功能介绍" class="headerlink" title="云端页面功能介绍"></a>云端页面功能介绍</h2><h3 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h3><h4 id="我的数据"><a href="#我的数据" class="headerlink" title="我的数据"></a>我的数据</h4><p>存放着测试结束后上传的测试结果，当测试结果较多时可以设置条件筛选数据。</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/24.jpg" alt=""></p>          </div><h4 id="任务数据"><a href="#任务数据" class="headerlink" title="任务数据"></a>任务数据</h4><p>Perfdog支持创建测试任务，你可以邀请小伙伴一起进行测试，并将数据归档到任务中进行分享。想加入SGPT测试计划的朋友可以在酷安私信我，我会发给你邀请链接，同时你可以看到SGPT计划的最新进展并且参与进来。</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/25.jpg" alt=""></p>          </div><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>在这里可以针对不同应用数据进行分类显示</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/26.jpg" alt=""></p>          </div><h3 id="具体数据"><a href="#具体数据" class="headerlink" title="具体数据"></a>具体数据</h3><h4 id="图表基本操作（数据统计范围修改，图标曲线显示）"><a href="#图表基本操作（数据统计范围修改，图标曲线显示）" class="headerlink" title="图表基本操作（数据统计范围修改，图标曲线显示）"></a>图表基本操作（数据统计范围修改，图标曲线显示）</h4><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/27.jpg" alt=""></p>          </div><h4 id="图表拖选操作（查看某一时间段的测试数据）"><a href="#图表拖选操作（查看某一时间段的测试数据）" class="headerlink" title="图表拖选操作（查看某一时间段的测试数据）"></a>图表拖选操作（查看某一时间段的测试数据）</h4><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/28.jpg" alt=""></p>          </div><h4 id="点选查看卡顿具体场景"><a href="#点选查看卡顿具体场景" class="headerlink" title="点选查看卡顿具体场景"></a>点选查看卡顿具体场景</h4><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/29.jpg" alt=""></p>          </div><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/30.jpg" alt=""></p>          </div><h4 id="不同测试范例对比"><a href="#不同测试范例对比" class="headerlink" title="不同测试范例对比"></a>不同测试范例对比</h4><h5 id="可以添加5条测试用例"><a href="#可以添加5条测试用例" class="headerlink" title="可以添加5条测试用例"></a>可以添加5条测试用例</h5><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/31.jpg" alt=""></p>          </div><h5 id="对比不同的测试用例"><a href="#对比不同的测试用例" class="headerlink" title="对比不同的测试用例"></a>对比不同的测试用例</h5><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/32.jpg" alt=""></p>          </div><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>今天本来是想要发两篇文章的，顺便开一个能让大家都参与进来的一个企划。先把企划的头图设计放出来吧。</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/SGPT.png" alt=""></p>          </div><p>本篇文章是《应用使用指南》的第二期，我相信大家可以学会Perfdog这款游戏性能测试软件的使用方法。我的一个想法是，从这个系列可以引出很多新的，有趣的系列，让大家都可以参与进去。</p><p>如上图所示，从第二期引出了一个SGPT（Soc Game Performance Test）计划，我希望根据自己的理解设计一个游戏测试标准，来测试不同机型对于游戏性能的调度能力。</p><p>这一个计划如果只有我一个人收集数据，第一是我个人学业的原因，我并不能有太多时间来进行游戏测试；第二是我个人并没有经济能力去购买设备。如果大家都能参与进来，那么收集到数据会越来越多，我们也能在众多测评里获得一份最真实的数据。</p><p>这里我们采用的是Perfdog的团队功能，这里把加入的链接放在这里<strong><a href="https://perfdog.qq.com/taskdata/201592">上杉九月的团队</a></strong>。希望大家可以参与进来，后续会加入激励计划，争取给此计划贡献多的朋友一些动力。</p><p>简单介绍结束，说一下目前这个企划遇到的问题。因为我个人平时玩的游戏种类比较少，目前只玩崩坏3和原神，这两类游戏都属于高负载的类型。而对于中等负载和低负载的游戏，个人的了解很少，希望各位可以在评论区讨论一下，什么游戏可以被纳入中负载和低负载的测试计划中，谢谢各位！</p><h2 id="各平台更新计划"><a href="#各平台更新计划" class="headerlink" title="各平台更新计划"></a>各平台更新计划</h2><ul><li>个人博客 周六晚八点</li><li>酷安 微信公众号 周日晚八点</li><li>哔哩哔哩 微博 周一晚八点</li></ul><hr><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt=""></p>          </div>]]></content>
    
    
    <summary type="html">PerfDog已经收费，本教程不再更新</summary>
    
    
    
    <category term="应用使用指南" scheme="https://blog.sakurasep.site/Butterfly/categories/%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    
    
    <category term="零基础" scheme="https://blog.sakurasep.site/Butterfly/tags/%E9%9B%B6%E5%9F%BA%E7%A1%80/"/>
    
    <category term="PC" scheme="https://blog.sakurasep.site/Butterfly/tags/PC/"/>
    
    <category term="应用使用指南" scheme="https://blog.sakurasep.site/Butterfly/tags/%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>《应用使用指南》存储空间隔离_第1期</title>
    <link href="https://blog.sakurasep.site/Butterfly/HowToUse/%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%20-%20%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E9%9A%94%E7%A6%BB/"/>
    <id>https://blog.sakurasep.site/Butterfly/HowToUse/%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%20-%20%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E9%9A%94%E7%A6%BB/</id>
    <published>2021-03-13T13:35:26.000Z</published>
    <updated>2022-04-20T01:06:17.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h1><blockquote><p>作者： 上杉九月</p><p>头图设计：上杉九月</p><p>排版及发布：上杉九月</p><p>感谢提供修改建议: </p><ul><li>酷安@量子米君 </li><li>酷安@苍玄之包 </li></ul></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="安卓根目录的混乱现象"><a href="#安卓根目录的混乱现象" class="headerlink" title="安卓根目录的混乱现象"></a>安卓根目录的混乱现象</h3><p>每一次打开文件管理去寻找你所想要的文件，或是在聊天软件给朋友发送文件，总会看到目录里有着大量莫名奇妙的文件夹。一是不方便找到目标文件所在，二是对于强迫症挺不舒服的。</p><p><strong>优化前的根目录，充斥着各种文件夹</strong></p><p>造成这种现象，主要是国内软件厂商不遵守开发规范导致。根据安卓规范，在 <code>Android/data/包名</code> 路径应该保存对应应用的数据文件，<code>Android/obb/包名</code>路径应该保存对应应用的数据包文件。这两个文件夹是用户不应该去访问的，因此安卓11的新规范禁止系统（仅对于定制UI）的文件管理直接访问。如果介意（例如MIUI的默认文件管理）访问受限，可以安装相应的旧版本。</p><h3 id="安卓11的新限制"><a href="#安卓11的新限制" class="headerlink" title="安卓11的新限制"></a>安卓11的新限制</h3><p><strong>如图所示，MIUI的文件管理在一次升级中已经不在允许访问，点击前往查看将会跳转安卓原生的文件管理。</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/1.jpg" alt=""></p>          </div><p>应用应该将自身数据保存在Android文件夹内部，将用户数据按照分类保存在标准文件夹，但是国内应用大部分不会遵循开发规范，便造成了安卓根目录混乱的现状。</p><h3 id="某些应用开发者的错误理解"><a href="#某些应用开发者的错误理解" class="headerlink" title="某些应用开发者的错误理解"></a>某些应用开发者的错误理解</h3><p>很多应用开发者为了适配安卓11的要求，做出了很多令人迷惑的行为。这里以腾讯的令人迷惑的操作举例。在QQ 8.2.8版本之后，将用户的下载文件位置从根目录更改到了Android文件夹内部，同时也是自身的数据文件夹。这让用户去查看自己下载的文件时十分麻烦。而且QQ在根目录仍然有着许多未知用途的文件夹。</p><h3 id="标准文件夹的示例（MIUI）"><a href="#标准文件夹的示例（MIUI）" class="headerlink" title="标准文件夹的示例（MIUI）"></a>标准文件夹的示例（MIUI）</h3><ul><li>DCIM 保存相机拍摄的照片和视频（MIUI在该文件夹还存储了截图和屏幕录制）</li><li>Documents 保存文档</li><li>Download 保存下载文件</li><li>Fonts 保存字体文件（MIUI系统字体文件保存在主题文件夹中）</li><li>Movie 保存视频文件</li><li>Music 保存音频文件</li><li>Pictures 保存图片文件</li><li>等等</li></ul><p>对于不同的定制系统同时也有自己存放关键系统文件的文件夹，例如MIUI会在根目录建立一个MIUI文件夹，用来存放各种系统软件的缓存文件和数据。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>依靠安卓大版本更新更严格的文件访问策略，强制应用使用更高的targetAPI。</li><li>依靠定制系统完善文件访问限制功能，感觉最近Flyme和MIUI的沙盒已经有了雏形了。</li><li>依靠Rikka开发的存储空间隔离（原名存储重定向），这也是我写本文的目的。</li></ul><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>这款软件在酷安上即有下载，原名存储重定向，现名存储空间隔离。<br>在使用这款软件之前，你需要接受以下的要求</p><ul><li>手机已经获取了root权限</li><li>愿意为这款软件支付一定的费用</li><li>有耐心</li><li>可以接受某些奇奇怪怪的问题</li><li>可以主动寻找问题的解决方法</li></ul><h2 id="第一步-安装必要的环境"><a href="#第一步-安装必要的环境" class="headerlink" title="第一步 安装必要的环境"></a>第一步 安装必要的环境</h2><h3 id="本机的使用环境为"><a href="#本机的使用环境为" class="headerlink" title="本机的使用环境为"></a>本机的使用环境为</h3><ul><li>小米10 MIUI12.5 21.2.3 Simplicity官改</li><li>Magsik 21.4 App 22.0</li></ul><h3 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h3><p><strong>在满足root的环境下，在Magsik模块安装页面，搜索riru关键字便可以看到riru系列模块</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/2.jpg" alt=""></p>          </div><p><strong>我们这里只安装两个模块</strong></p><p>Riru V23.6</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/4.jpg" alt=""></p>          </div><p>Riru - Enhanced mode for Storage Isolation V23.6</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/3.jpg" alt=""></p>          </div><p>这里提醒一下，如果不安装Riru，而先去安装Riru - Enhanced mode for Storage Isolation，将会无法安装。所以请按照顺序安装模块。</p><h2 id="第二步-安装软件并进行基本配置"><a href="#第二步-安装软件并进行基本配置" class="headerlink" title="第二步 安装软件并进行基本配置"></a>第二步 安装软件并进行基本配置</h2><h3 id="下载途径"><a href="#下载途径" class="headerlink" title="下载途径"></a>下载途径</h3><h4 id="在酷安搜索存储空间隔离并下载"><a href="#在酷安搜索存储空间隔离并下载" class="headerlink" title="在酷安搜索存储空间隔离并下载"></a>在酷安搜索存储空间隔离并下载</h4><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/6_02.jpg" alt=""></p>          </div><h4 id="在Google-Play搜索存储空间隔离并下载"><a href="#在Google-Play搜索存储空间隔离并下载" class="headerlink" title="在Google Play搜索存储空间隔离并下载"></a>在Google Play搜索存储空间隔离并下载</h4><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/6.jpg" alt=""></p>          </div><p>这里我推荐从Google Play下载，在Play商店购买的该软件，使用同一个谷歌账号可以多设备使用。</p><p>目前软件的内购验证做的很完善，如果你是在Google Play下载，无需登录外网，直接点击恢复购买即可。</p><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p><strong>下载完成后打开软件，便显示了软件的基本介绍</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/8.jpg" alt=""></p>          </div><p><strong>允许存储空间隔离获取Root权限，当出现提示成功时便可以进行下一步了。</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/9.jpg" alt=""></p>          </div><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/10.jpg" alt=""></p>          </div><p>如果出现问题，请按照以上步骤重新安装环境。</p><p>不过有的机型的确是有兼容问题。</p><p><strong>到这一步，就已经安装完成了</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/11.jpg" alt=""></p>          </div><h3 id="备份文件"><a href="#备份文件" class="headerlink" title="备份文件"></a>备份文件</h3><p>在这里，我会提供一份自己使用，基本没有错误的配置文件，你只需要在备份与还原里还原备份文件即可开始使用。</p><blockquote><p><strong><a href="https://cloud.sakurasep.club/s/wRcq">备份文件_密码0314</a></strong></p></blockquote><p>注意：</p><ul><li>本配置文件的应用可能无法包含你所使用的应用，如果你想达到近乎完美的效果，请继续看下去。</li><li>本配置文件有的地方会有一些问题，你需要自行修改。已知QQ存在侧漏问题。</li></ul><h2 id="第三步-原理解释以及详细配置"><a href="#第三步-原理解释以及详细配置" class="headerlink" title="第三步 原理解释以及详细配置"></a>第三步 原理解释以及详细配置</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在存储空间隔离的官网，我们可以找到一些我们所需要的内容</p><blockquote><p><a href="https://sr.rikka.app/zh-hans/">官方网站</a></p></blockquote><p>以下内容是对官网指南的部分摘录以及我自己的理解</p><ul><li>公共文件夹</li></ul><p>DCIM,Pictures,Download 等公共文件夹，用来保存用户的文件，允许应用在此根据需求新建文件夹来保存对应的文件。例如QQ应该将用户下载的文件保存在 <code>Download/QQ</code>，而不是<code>Android/data/包名</code>。</p><p>但是应用对于公共文件夹的访问应该是一次性的，有目的的。例如在QQ发送图片给好友，QQ在获取用户的允许后访问DCIM和Pictures文件夹，发送结束后系统应该收回访问权限。</p><ul><li>数据文件夹</li></ul><p>Android文件夹内部对于用户来说是不应该进行访问的，对于应用来说则是无需授权就能够访问，在此保存应用的数据和缓存。</p><p>遗憾的是，目前原生安卓对于存储权限的选项只有允许和拒绝，此外，国内存在的大量“坏应用”如果被拒绝授权将不会运行。</p><p>存储空间隔离便是为了解决这一乱象而开发，这里感谢Rikka大佬开发了这款应用，在一定程度上很好解决了以上问题。</p><p>一般来说，不规范的应用会在根目录创建各种各样的文件夹。在启用存储空间隔离之后，应用将会在<code>Android/data/包名/sdcard</code> 内保存文件。</p><p>优点如下</p><ul><li>因为卸载应用时只会清理应用的数据文件夹，在对应用进行隔离后，卸载时将会将下载文件和应用数据一并删除</li><li>系统统计应用占用空间大小仅会统计数据文件夹，在对应用进行隔离后，系统统计大小功能将会正常工作</li></ul><h3 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h3><h4 id="软件权限"><a href="#软件权限" class="headerlink" title="软件权限"></a>软件权限</h4><p>对于MIUI用户，因为MIUI魔改了很多对于应用的控制权限，这里需要手动为存储空间隔离打开部分权限</p><ul><li>在后台弹出界面</li></ul><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/12.jpg" alt=""></p>          </div><ul><li>应用自启动以及省电策略</li></ul><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/13.jpg" alt=""></p>          </div><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/14.jpg" alt=""></p>          </div><h4 id="默认存储空间位置"><a href="#默认存储空间位置" class="headerlink" title="默认存储空间位置"></a>默认存储空间位置</h4><p><strong>在软件的设置 - 行为 - 默认隔离存储空间位置中，你有两种选择</strong></p><ul><li>保存在数据文件夹</li><li>保存在缓存文件夹</li><li>缓存文件夹有着和数据文件夹一样的特性，但是缓存文件夹可能被清理软件所清理。这里根据自己的需求吧。一般来说保存在数据文件夹即可。</li></ul><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/15.jpg" alt=""></p>          </div><h4 id="可访问文件夹模板"><a href="#可访问文件夹模板" class="headerlink" title="可访问文件夹模板"></a>可访问文件夹模板</h4><p>然后回到上一级，在可访问文件夹模板中进行设置<br>在这里所设置的文件夹就是允许应用访问的公共文件夹</p><p><strong>我在默认的基础上添加了对于Movie文件夹的访问</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/16.jpg" alt=""></p>          </div><p>现在回到主页面，点击应用管理，就可以对应用进行单独设置</p><p><strong>为了避免重定向系统应用带来各种各样的bug，我们先对第三方应用进行配置</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/17.jpg" alt=""></p>          </div><h3 id="根据需求配置"><a href="#根据需求配置" class="headerlink" title="根据需求配置"></a>根据需求配置</h3><p>白描是一款特别好用的OCR识别和PDF导出应用，这里我们拿它来讲解如何对一款应用重定向。</p><h4 id="需求考虑"><a href="#需求考虑" class="headerlink" title="需求考虑"></a>需求考虑</h4><p>我们应该考虑，这款应用会获取什么信息，因为我常常用它将图片转成PDF格式，所以DCIM（拍摄的图片）和Pictures（下载的图片）是可访问的文件夹。所以说我们对白描设置可访问文件夹为DCIM和Pictures。</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/18.jpg" alt=""></p>          </div><h4 id="模拟正常使用过程"><a href="#模拟正常使用过程" class="headerlink" title="模拟正常使用过程"></a>模拟正常使用过程</h4><p>使用白描正常导出一次PDF，在查看文件历史里可以看到PDF保存在Download/Baimiao中。因为我希望保存在Document/白描，所以我们打开白描的Download访问权限（刚才是白描试图访问Download，但是被定向到了数据文件夹内部的Download），重新保存一次PDF，这时白描就会创建此文件夹。</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/19.jpg" alt=""></p>          </div><h4 id="将隔离的文件同步到标准文件夹"><a href="#将隔离的文件同步到标准文件夹" class="headerlink" title="将隔离的文件同步到标准文件夹"></a>将隔离的文件同步到标准文件夹</h4><p>在导出被隔离的文件中添加同步文件夹规则，来源路径选择Download（新版存储空间隔离导出时会将该应用在目录内的全部文件进行同步）</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/20.jpg" alt=""></p>          </div><h4 id="4-检查结果"><a href="#4-检查结果" class="headerlink" title="4.检查结果"></a>4.检查结果</h4><p>可以看到PDF文件成功保存到指定位置</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/21.jpg" alt=""></p>          </div><p>这里很多使用者都会有一个误区-既然我要把文件保存到Documents目录，那么为什么不把Documents设置为可访问的文件夹呢？其实很好解释，你把可访问的文件夹当做读取权限，把导出被隔离的文件当作写入权限，这样就明白了吧。</p><p>但是有些应用是很规范的，他们保存在标准文件夹，所以你应该允许该应用访问。</p><h3 id="应用之间互相访问"><a href="#应用之间互相访问" class="headerlink" title="应用之间互相访问"></a>应用之间互相访问</h3><p>用过存储重定向的老用户都应该遇到过哔哩哔哩的视频分享到QQ，会出现系统繁忙的提示，就算偶尔可能分享成功，视频的封面也不见了。</p><p>这是因为哔哩哔哩老版本在根目录的tv.danmuku.bili存放自己的图片缓存，而对哔哩哔哩和QQ进行隔离后，QQ是访问不到这个文件夹的，就造成了分享失败的问题。</p><p><del>目前这个问题貌似得到了解决，哔哩哔哩在某一个版本对缓存文件的位置做了更改，移动到了数据文件夹，这是一个可能的原因。此外还可能因为哔哩哔哩的分享在QQ上被改为了小程序分享，分享短链接包含了封面地址，所以分享成功进行。</del></p><p><del>因为目前我并没有遇到该问题，所以希望各位可以在评论区反馈你们的使用情况，我会抽时间测试一下对应的软件版本。</del></p><p>好了，最近遇到了这一问题。同时也讲一下解决方案。同类问题都可以按照此思路解决。</p><p>哔哩哔哩的视频想要分享到QQ（空间，联系人等），QQ需要读取哔哩哔哩的封面缓存信息，而因为存储重定向的缘故，QQ无法对你允许访问文件夹之外的内容进行读取和写入操作，这就导致了分享的失败。所以为了解决这一问题，首先通过文件历史找到正常情况下哔哩哔哩的缓存保存位置。最新版缓存保存位置在 <code>Android/data/tv.danmaku.bili/files/Images</code> 。然后在QQ可访问的文件夹，在其他应用的文件夹中创建新的规则。</p><p><strong>如下图所示。</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/22.jpg" alt=""></p>          </div><h3 id="最终的清理"><a href="#最终的清理" class="headerlink" title="最终的清理"></a>最终的清理</h3><p>按照以上的例子，对用户应用一一设置。设置完成之后，删除除了标准文件夹的所有冗余文件，正常使用一段时间，你会发现根目录仍然会有一些文件夹，这时候就需要精准定位。</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/23.jpg" alt=""></p>          </div><p>如上图所示，比如说我们想知道<code>com.miui.voiceassist</code>(其实很明显，是小爱同学，但请假装不知道)是由哪一个应用创建。</p><p><strong>我们将文件夹名复制，在文件监视中粘贴。</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/24.jpg" alt=""></p>          </div><p>然后就会显示有那些应用对该文件夹进行读取或者是写入。</p><p>不过我们要清楚读取和写入的区别，比如说这里显示了媒体存储设备对该文件夹的访问，而我们了解一点相关内容便可以知道个该软件是在扫描各个文件夹来查找媒体文件，并没有进行写入，所以文件夹不是由它创建。</p><p><strong>向下拉便可以找到小爱同学的文件访问记录。</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/25.jpg" alt=""></p>          </div><p><strong>现在点击小爱同学，对其进行隔离。</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/26.jpg" alt=""></p>          </div><h3 id="或许会更完美"><a href="#或许会更完美" class="headerlink" title="或许会更完美"></a>或许会更完美</h3><h4 id="解决某些文件无法读取媒体文件的问题"><a href="#解决某些文件无法读取媒体文件的问题" class="headerlink" title="解决某些文件无法读取媒体文件的问题"></a>解决某些文件无法读取媒体文件的问题</h4><p>在安卓11使用存储空间隔离会导致导出的媒体文件不在软件显示的问题。实际举例（QQ发送图片无法获取导出的媒体文件）。</p><p><strong><a href="https://www.coolapk.com/feed/24310395?shareKey=NDVlZDZkYjUzNDBmNjA0Y2I2NmU~&amp;shareUid=3334957&amp;shareFrom=com.coolapk.market_11.0.3">酷安@余空_Yuk</a></strong></p><p>开发的给安卓11启用sdcardfs的模块可以解决这一问题。</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/27.jpg" alt=""></p>          </div><h4 id="2-解决下载文件被某些应用存储在Android目录的问题"><a href="#2-解决下载文件被某些应用存储在Android目录的问题" class="headerlink" title="2. 解决下载文件被某些应用存储在Android目录的问题"></a>2. 解决下载文件被某些应用存储在Android目录的问题</h4><p>QQ这类将用户下载的文件保存在数据文件夹的应用</p><p><strong><a href="https://www.coolapk.com/feed/24654978?shareKey=MzIxM2M0ZDcxYmE2NjA0Y2I3MzU~&amp;shareUid=3334957&amp;shareFrom=com.coolapk.market_11.0.3">酷安@阿巴酱</a></strong>给出了一种解决方案。</p><p>我采用的是Rikka开发的另一款应用-保存副本</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/28.jpg" alt=""></p>          </div><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/29.jpg" alt=""></p>          </div><p><strong>当你在QQ下载文件之后，只需要在打开方式里选择保存副本，软件就可以在Download目录复制一份相同的文件。</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/30.jpg" alt=""></p>          </div><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/31.jpg" alt=""></p>          </div><h2 id="第四步-效果展示"><a href="#第四步-效果展示" class="headerlink" title="第四步 效果展示"></a>第四步 效果展示</h2><p>这里我自己把Malody的谱面文件存在了Map文件夹。</p><p>miad这一个空文件是为了防止MIUI的应用开屏广告产生（直接卸载掉智能服务<code>com.miui.systemAdSolution</code>即可。可以使用搞机助手进行卸载。一直用官改，不知道MIUI将广告服务集成在此应用里，感谢<strong>酷安@水水水淼</strong>的建议）</p><p>mm是Magsik的MM管理器</p><p><strong>如果和文章开头对比一下，可以说是强迫症狂喜。</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/32.jpg" alt=""></p>          </div><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>简单说一些东西吧</p><h2 id="个人情况"><a href="#个人情况" class="headerlink" title="个人情况"></a>个人情况</h2><p>我在寒假里策划了很多内容，从这一篇文章开始，我会逐渐向给各位展示我策划的优质内容。</p><h2 id="新的开始"><a href="#新的开始" class="headerlink" title="新的开始"></a>新的开始</h2><p>这算是一个新坑，目的就是向各位推荐一些优质的应用，他们真的可以方便你的生活。目前我的更新频率（如果没有什么意外的话基本就是一个月更新两次，一次是安卓上的应用，一次是PC上的应用），毕竟我刚进入大学，自己安排了很多学习的内容，时间并不是很充裕，保证质量是第一位（还有要填坑）。</p><h2 id="欢迎交流"><a href="#欢迎交流" class="headerlink" title="欢迎交流"></a>欢迎交流</h2><p>这些应用对于各位来说有的可能没用过，有的可能早就熟练上手。我希望我写的图文可以帮助小白零基础上手优质应用，从而提高效率。同时期待和各路大佬交流使用心得，不断完善文章内容和呈现形式。</p><p>在这里我也会虚心听取意见，无论是对图文内容的建议，或是对某些优质应用的推荐等等。</p><h1 id="多平台发布"><a href="#多平台发布" class="headerlink" title="多平台发布"></a>多平台发布</h1><p>周六晚八点：</p><ul><li><a href="https://blog.sakurasep.site/">个人博客</a></li></ul><p>周日晚八点：</p><ul><li>Bilibili专栏：上杉九月</li><li>微信公众号：上杉九月的知识屋</li><li>Weibo：上杉九月</li><li>酷安：上杉九月</li></ul><hr><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt=""></p>          </div>]]></content>
    
    
    <summary type="html">安卓系统的根目录，本不应该如此混乱。</summary>
    
    
    
    <category term="应用使用指南" scheme="https://blog.sakurasep.site/Butterfly/categories/%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    
    
    <category term="零基础" scheme="https://blog.sakurasep.site/Butterfly/tags/%E9%9B%B6%E5%9F%BA%E7%A1%80/"/>
    
    <category term="应用使用指南" scheme="https://blog.sakurasep.site/Butterfly/tags/%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    
    <category term="安卓" scheme="https://blog.sakurasep.site/Butterfly/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>《零基础教程》云服务器实现定时签到_第1期</title>
    <link href="https://blog.sakurasep.site/Butterfly/HowToDo/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%20-%20%E6%99%BA%E6%85%A7%E6%9B%B2%E5%9B%AD%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1%E4%BA%91%E7%AB%AF/"/>
    <id>https://blog.sakurasep.site/Butterfly/HowToDo/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%20-%20%E6%99%BA%E6%85%A7%E6%9B%B2%E5%9B%AD%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1%E4%BA%91%E7%AB%AF/</id>
    <published>2021-01-20T13:27:35.000Z</published>
    <updated>2022-05-02T10:06:55.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h2><blockquote><p>作者：上杉九月</p><p>排版及发布：上杉九月</p><p>项目原作者：Polo</p><p><strong>本篇教程在腾讯云会出现问题，请等待更新！</strong></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每日健康提交？要不是不交，要不是随便填。</p><p>意义何在？</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><blockquote><p>原贴:<a href="https://polosec.github.io/2021/01/19/server%E9%85%B1%E5%AE%9E%E7%8E%B0%E7%AD%BE%E5%88%B0%E6%8F%90%E9%86%92/">Polo’s Blog 智慧曲园自动签到+微信推送</a></p><p>github项目地址:<a href="https://github.com/polosec/qfnuAutoTemperatureSubmit">qfnuAutoTemperatureSubmit</a></p></blockquote><h3 id="1-需要准备"><a href="#1-需要准备" class="headerlink" title="1.需要准备"></a>1.需要准备</h3><ul><li>云服务器（使用宝塔面板）</li><li>配置好的python脚本 或者 项目原脚本</li></ul><h3 id="2-开始配置"><a href="#2-开始配置" class="headerlink" title="2.开始配置"></a>2.开始配置</h3><p>在宝塔面板的文件管理中新建文件夹用来存放项目的脚本文件。</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Qfnu/1.jpg" alt=""></p>          </div><h4 id="方案一：对python脚本进行单独配置"><a href="#方案一：对python脚本进行单独配置" class="headerlink" title="方案一：对python脚本进行单独配置"></a>方案一：对python脚本进行单独配置</h4><p>如图所示是我们宿舍四人的python脚本</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Qfnu/2.jpg" alt=""></p>          </div><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Qfnu/3.jpg" alt=""></p>          </div><p>所以此时的脚本执行命令为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 /www/wwwroot/qfnuAutoTemperatureSubmit/xxx.py</span><br></pre></td></tr></table></figure></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Qfnu/4.jpg" alt=""></p>          </div><h4 id="方案二：使用原python文件"><a href="#方案二：使用原python文件" class="headerlink" title="方案二：使用原python文件"></a>方案二：使用原python文件</h4><p>直接将demo1.py放在文件夹内<br>此时命令变为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 /www/wwwroot/qfnuAutoTemperatureSubmit/demo1.py 学号 密码</span><br></pre></td></tr></table></figure></p><h3 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3.注意事项"></a>3.注意事项</h3><p>执行python脚本报错的话</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Qfnu/5.png" alt=""></p>          </div><hr><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt=""></p>          </div>]]></content>
    
    
    <summary type="html">每天签到就是笑话，谁不是敷衍了事</summary>
    
    
    
    <category term="零基础教程" scheme="https://blog.sakurasep.site/Butterfly/categories/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="零基础" scheme="https://blog.sakurasep.site/Butterfly/tags/%E9%9B%B6%E5%9F%BA%E7%A1%80/"/>
    
    <category term="Python" scheme="https://blog.sakurasep.site/Butterfly/tags/Python/"/>
    
    <category term="云服务器" scheme="https://blog.sakurasep.site/Butterfly/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>我的2020年度总结</title>
    <link href="https://blog.sakurasep.site/Butterfly/Year/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%20-%202020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.sakurasep.site/Butterfly/Year/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%20-%202020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2021-01-19T13:52:06.000Z</published>
    <updated>2022-04-20T01:05:15.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h1><blockquote><p>作者：上杉九月</p><p>排版与发布：上杉九月</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>咕咕咕了好久的2020年度总结终于来啦！</p><p>～～才不是因为我懒～～</p><p>本文中所有内容截止于2021.1.1日</p><p>未来，一定更精彩！</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="第一阶段-高三下学期—高考"><a href="#第一阶段-高三下学期—高考" class="headerlink" title="第一阶段 高三下学期—高考"></a>第一阶段 高三下学期—高考</h2><p>紧张的学习生活，每天基本都是两点一线的路线。</p><p>枯燥的学习生活，在最后的高考100天尤为如此，从周考到天天做不完的卷子。</p><p>温暖的学习生活，在向着理想的大学奋斗的路上，感谢每一位同学的陪伴，感谢老班的悉心辅导，感谢每一位老师的辛苦付出，满满的回忆。</p><p>终究有一个好结果。</p><p>下一个人生阶段，在曲师大度过。</p><h2 id="第二阶段-暑假"><a href="#第二阶段-暑假" class="headerlink" title="第二阶段 暑假"></a>第二阶段 暑假</h2><p>放下了高三的压力，暑假便成为了我尽情发挥的舞台。</p><h3 id="1-第一台自己组装的主机"><a href="#1-第一台自己组装的主机" class="headerlink" title="1. 第一台自己组装的主机"></a>1. 第一台自己组装的主机</h3><p>个人算是一个果粉吧。于是在进行配件选购的时候，并没有选择热门的AMD + N卡的组合，而是为了方便黑苹果的安装，选择了Intel + A卡的组合。</p><p>配置如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CPU：Intel i5-9600K </span><br><span class="line">GPU：AMD RX5700 XT</span><br><span class="line">内存：Kingston 骇客神条 3200MHz 8G x 2</span><br><span class="line">固态：Western Digital SN750 500GB x 2</span><br><span class="line">机械：TOSHIBA P300 3T</span><br><span class="line">主板：MSI Z390 Gaming Puls</span><br><span class="line">电源：Segotep 600W</span><br><span class="line">散热：玄冰400</span><br><span class="line">机箱：SAHARA 逆行者606</span><br><span class="line">显示器：AOC 23.8英寸 24G2 1080P144</span><br><span class="line">无线网卡：BCM943602CS</span><br></pre></td></tr></table></figure></p><p>总体感觉还行吧，组装完成之后做了一个用OC引导的win10和macOS的双系统，这台电脑便是我暑假的主力机器。</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/1.png" alt="about_me"></p>          </div><p>关于macOS Catalina 10.15.6的EFI文件，我是参考<a href="https://blog.xjn819.com">Xjn´s Blog</a>进行自己配置和调试，截止到文章书写的2021.1.18日，一切运行正常</p><p>关于macOS与其他苹果设备的联动，我个人用的是iPad mini2(网课专用板)。为了当前稳定的Wi-Fi链接和蓝牙功能(最初我是用的是USB网卡，不稳定，需要驱动支持)，我入手了BCM943602CS这一款PCIE网卡。</p><p>从同学那里借来iPad Pro 2020做了一下测试，随航，接力，隔空投送都很完美。</p><blockquote><p>macOS镜像下载：<a href="https://blog.daliansky.net">黑果小兵的部落阁</a></p><p>本机EFI下载：<a href="https://cloud.sakurasep.club/s/OXFR">Cloudreve 密码:1234</a></p></blockquote><p>这里建议对于macOS或是苹果全家桶生态有着需求的，不要考虑黑苹果主机，黑苹果在稳定性和方便程度都不如白苹果，而且，M1的MacBook好香！</p><h3 id="2-第一台个人笔记本"><a href="#2-第一台个人笔记本" class="headerlink" title="2. 第一台个人笔记本"></a>2. 第一台个人笔记本</h3><p>去上大学，当然不可以搬着一个MATX机箱去。<br>所以入手了一台R7000P(首发价格) </p><blockquote><p>用了两年，看到当年的我说AMD YES，我真想穿越回去，告诉当年的我，Intel YES。</p></blockquote><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/2.png" alt="about_me"></p>          </div><p>桌面如图<br><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/3.jpg" alt="about_me"></p>          </div><br>用了仿macOS的软件，还不错，基本的动画实现了，UI设计也挺不错的，但是经常出现崩溃。</p><p>正版macOS<br><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/4.png" alt="about_me"></p>          </div><br>因为大学是软件工程专业，笔记本上搭建了python2，，python3，java，c等众多环境</p><h3 id="3-小米9-—-小米10"><a href="#3-小米9-—-小米10" class="headerlink" title="3. 小米9 — 小米10"></a>3. 小米9 — 小米10</h3><blockquote><p>2022年了 865还是顶，4750的电池还是比较大，90Hz的屏幕还是舒服，完全没有换手机的欲望。而且手机对我个人来说就是休闲小游戏加联系工具，下一次换手机估计换个Redmi Note了。</p></blockquote><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/6.jpg" alt="about_me"></p>          </div><h3 id="4-Sony-ZV-1"><a href="#4-Sony-ZV-1" class="headerlink" title="4. Sony ZV-1"></a>4. Sony ZV-1</h3><blockquote><p>2022年了，还在吃灰。。。。</p></blockquote><h2 id="第三阶段-初步迈入大学生活"><a href="#第三阶段-初步迈入大学生活" class="headerlink" title="第三阶段 初步迈入大学生活"></a>第三阶段 初步迈入大学生活</h2><h3 id="1-Chevereto图片站"><a href="#1-Chevereto图片站" class="headerlink" title="1. Chevereto图片站"></a>1. Chevereto图片站</h3><p>通过自己搭建图床，学到了不少关于云服务器的知识(之前搭建Wordpress博客接触过)。</p><blockquote><h4 id="Demo：上杉九月的图片站"><a href="#Demo：上杉九月的图片站" class="headerlink" title="Demo：上杉九月的图片站"></a>Demo：<a href="https://pic.sakurasep.top/">上杉九月的图片站</a></h4></blockquote><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/7.png" alt="about_me"></p>          </div><p>搭建教程已经出了</p><blockquote><h4 id="搭建教程：博客原文"><a href="#搭建教程：博客原文" class="headerlink" title="搭建教程：博客原文"></a>搭建教程：<a href="">博客原文</a></h4></blockquote><h3 id="2-Hexo"><a href="#2-Hexo" class="headerlink" title="2. Hexo"></a>2. Hexo</h3><blockquote><h4 id="上杉九月的博客"><a href="#上杉九月的博客" class="headerlink" title="上杉九月的博客"></a><a href="https://blog.sakurasep.site/">上杉九月的博客</a></h4></blockquote><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/8.png" alt="about_me"></p>          </div><blockquote><h4 id="九月的生活"><a href="#九月的生活" class="headerlink" title="九月的生活"></a><a href="https://blog.sakurasep.club/">九月的生活</a></h4></blockquote><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/9.png" alt="about_me"></p>          </div><h3 id="3-云服务器"><a href="#3-云服务器" class="headerlink" title="3. 云服务器"></a>3. 云服务器</h3><p>云服务器定时执行python脚本</p><blockquote><p><a href="https://github.com/polosec/qfnuAutoTemperatureSubmit">python脚本原地址</a></p></blockquote><h3 id="4-初接触CTF"><a href="#4-初接触CTF" class="headerlink" title="4. 初接触CTF"></a>4. 初接触CTF</h3><p>想作为一个兴趣爱好，寒假继续学习。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>2020年经历了人生大考，虽然有很多波折，但也是顺利的度过了。</p><p>在2020年我个人多是在实践应用投入了精力，2021年我将会在原理以及应用的代码实现付出。</p><p>目标就是有事情做，写写教程，平平安安就是理想啦。</p><p>2020年真的是魔幻的一年，疫情迅速席卷全球，中国顶着巨大压力成功遏制，没想到（应该是意料之中），自由的西方资本主义国家没能遏制疫情传播，天灾人祸，诸如此类。</p><p>2021年一定会好起来的，提前在这祝福各位新年快乐，事事顺利，一切安好。</p><hr><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt=""></p>          </div>]]></content>
    
    
    <summary type="html">回顾一下我的2020</summary>
    
    
    
    <category term="年度总结" scheme="https://blog.sakurasep.site/Butterfly/categories/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="年度总结" scheme="https://blog.sakurasep.site/Butterfly/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>《零基础教程》Chevereto-年轻人的第一个私人图床_第2期</title>
    <link href="https://blog.sakurasep.site/Butterfly/HowToDo/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%20-%20Chevereto%E5%9B%BE%E5%BA%8A/"/>
    <id>https://blog.sakurasep.site/Butterfly/HowToDo/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%20-%20Chevereto%E5%9B%BE%E5%BA%8A/</id>
    <published>2020-12-25T12:20:23.000Z</published>
    <updated>2022-04-19T10:20:21.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h1><blockquote><p>作者：上杉九月</p><p>排版：上杉九月</p><p>封面设计：苍玄之包</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>前几天用hexo搭建博客首页的时候，想给网站来一张高清的壁纸。然后用picgo把一张比较大的图片上传到gitee。</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/1.png" alt="chevereto"></p>          </div><p><strong>这时出现了第一个问题，picgo不显示该图片的缩略图</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/2.png" alt="chevereto"></p>          </div><p><strong>本来以为是picgo的bug（beta3版本），便用手机上的图床软件上传</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/3.png" alt="chevereto"></p>          </div><p>显示上传成功，打开gitee的仓库也可以正常访问</p><p>在感到很疑惑的同时，我将该图片的URL发到了群里，让朋友看看能不能访问</p><p><strong>然后我收到了朋友的截图</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/4.png" alt="chevereto"></p>          </div><p>gitee图床大于1M以上的图片必须登录访问</p><p>也就是说把大于1M的图片URL引用到博客，其实并不会跳转显示图片</p><p><strong>这时候我在图床APP的其他图床中看到了一段对于chevereto图床的描述</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/5.png" alt="chevereto"></p>          </div><p>粗略的看了一下教程，实现效果还不错。</p><blockquote><p><a href="https://pic.sakurasep.top/">上杉九月的图片站</a></p></blockquote><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="方案总结"><a href="#方案总结" class="headerlink" title="方案总结"></a>方案总结</h2><ul><li>方案一：神枫云 + FTP外部存储</li><li>方案二：域名 + 轻量应用服务器</li><li>方案三：备案域名 + ECS服务器</li></ul><p>我个人最推荐方案二</p><p>我个人是在腾讯云购买了一个轻量应用服务器，地区中国香港，这样就免去了备案的繁琐</p><p>阿里云的服务器不知道为啥访问比较慢，买了之后就退款了</p><p>建议买腾讯云，价格是相同的<strong>34RMB一个月</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/6.png" alt="chevereto"></p>          </div><p>当然我之前介绍的神枫云也可以，而且可以省去配置宝塔面板的步骤</p><h2 id="基本安装"><a href="#基本安装" class="headerlink" title="基本安装"></a>基本安装</h2><h3 id="方案一：神枫云-FTP外部存储"><a href="#方案一：神枫云-FTP外部存储" class="headerlink" title="方案一：神枫云 + FTP外部存储"></a>方案一：神枫云 + FTP外部存储</h3><p><a href="https://www.sfxyun.cn/">神枫云首页</a>注册账号，充值，购买主机。</p><p>建议购买这个3RMB/月的服务器</p><p>相比于1RMB/月的，月流量变为无限是很重要的</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/7.png" alt="chevereto"></p>          </div><p><strong>稍微配置一下，进入主机的管理界面，进入在线文件管理</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/8.png" alt="chevereto"></p>          </div><p><strong>上传chevereto底包到根目录</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/9.png" alt="chevereto"></p>          </div><p>这里chevereto有免费版和付费版，我们使用付费版来进行搭建，因为付费版才可以使用外部存储，神枫云只提供了300M的数据库，存不了几张图片</p><blockquote><p><a href="https://cloud.sakurasep.club/s/M9sR">chevereto免费版-Cloudreve-密码2333</a><br><a href="https://cloud.sakurasep.club/s/ZyIE">chevereto收费版-Cloudreve-密码2333</a></p></blockquote><p>然后解压底包到wwwroot文件夹</p><p><strong>此时wwwroot文件夹内应该是下图所示的目录结构</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/16.png" alt="chevereto"></p>          </div><p><strong>解压完成之后，进入域名绑定选项，这里有一个赠送的域名</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/13.png" alt="chevereto"></p>          </div><p>访问该域名进入安装进程，只修改三项</p><p><strong>如果忘记了可以在面板首页-虚拟主机信息找到</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/13.png" alt="chevereto"></p>          </div><p><strong>然后是注册管理员的界面</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/25.png" alt="chevereto"></p>          </div><p><strong>顺利安装完成</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/26.png" alt="chevereto"></p>          </div><p><strong>如果一切顺利的话现在网站已经跳转到了chevereto图床的首页</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/17.png" alt="chevereto"></p>          </div><p>点击右上角的登录，把刚刚注册的管理员账号输入进去，然后进入仪表盘，到这里整个安装过程基本结束了。</p><p>不过因为神枫云的数据库空间很小，只有300M，根本存不了几张图片，所以下文的外部存储功能便十分重要。</p><h3 id="方案二：域名-腾讯云轻量服务器"><a href="#方案二：域名-腾讯云轻量服务器" class="headerlink" title="方案二：域名 + 腾讯云轻量服务器"></a>方案二：域名 + 腾讯云轻量服务器</h3><p><strong>首先去腾讯云购买一个轻量应用服务器，并且选择香港地区来免去备案，镜像选择宝塔面板</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/10.png" alt="chevereto"></p>          </div><p><strong>然后来到服务器的控制台，在防火墙里添加8888端口来允许宝塔面板的访问</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/11.png" alt="chevereto"></p>          </div><p><strong>在应用管理里面可以获取默认宝塔面板的登录密码</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/12.png" alt="chevereto"></p>          </div><p><strong>后期记得修改宝塔面板的登录端口以及默认用户名和密码</strong></p><p><strong>登录实例，可以选择网页直接登录，上图右下角，先复制命令，然后点击登录</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/17.png" alt="chevereto"></p>          </div><p>进入宝塔面板，在软件商店里安装（仅搭建图床）</p><ul><li>Nginx 1.16</li><li>php 7.3</li><li>MySQL 5.6</li><li>phpMyadmin 4.9</li></ul><p><strong>软件列表如下</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/27.jpg" alt="chevereto"></p>          </div><p>然后在侧边栏找到网站，添加站点</p><p><strong>填入你购买的域名，创建数据库</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/19.png" alt="chevereto"></p>          </div><p><strong>然后在站点的设置里添加伪静态代码（如果是现在修改了代码，等会复制的时候不需要复制<code>.htaccess</code>)</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    index index.php;</span><br><span class="line">    try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/20.png" alt="chevereto"></p>          </div><p><strong>然后在你申请域名的服务商添加DNS解析</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/21.png" alt="chevereto"></p>          </div><blockquote><p>主机记录@ 记录类型A 解析线路默认 记录值是IP地址 TTL 10分钟</p></blockquote><p>稍微等上一段时间，就可以用域名访问你的chevereto图床进行安装了</p><p>安装过程同神枫云的安装过程</p><p><strong>如果你使用的是这种方式，那么一般来说数据库就有了一定的存储空间，例如我个人使用的就有约45G的数据空间</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/22.png" alt="chevereto"></p>          </div><p>这样的话存一些个人的图片还是没有问题的</p><h3 id="方案三：备案域名-阿里云ECS服务器"><a href="#方案三：备案域名-阿里云ECS服务器" class="headerlink" title="方案三：备案域名 + 阿里云ECS服务器"></a>方案三：备案域名 + 阿里云ECS服务器</h3><p>这里ECS服务器我购买的是学生优惠版本</p><p><a href="https://dashi.aliyun.com/site/buy/activity">购买地址</a></p><p><strong>这里虽然显示最少购买6个月，其实可以在调整配置的时候可以买一个月先试试</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/33.jpg" alt="chevereto"></p>          </div><p>我这里因为已经购买了一次，限购一台，所以价格是121RMB</p><p><strong>这里仅需要修改购买时长，操作系统等会去更换</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/34.jpg" alt="chevereto"></p>          </div><p>购买完成后去阿里云ECS控制台，将实例停止运行以更换操作系统和购买云盘容量</p><p>注意：云盘容量按需购买，因为服务器的云盘是按月付费</p><p><strong>在镜像市场将操作系统更换为宝塔linux面板</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/35.jpg" alt="chevereto"></p>          </div><p>自定义实例登录密码，一会要用到</p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/36.jpg" alt="chevereto"></p>          </div><p><strong>在实例管理界面，进行远程登录</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/37.jpg" alt="chevereto"></p>          </div><p><strong>选择第一项网页登录</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/38.jpg" alt="chevereto"></p>          </div><p><strong>输入”bt default”来获取宝塔面板的默认登录密码</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/40.jpg" alt="chevereto"></p>          </div><p>记得放行安全组端口8888，然后用<code>公网IP:8888</code>访问宝塔面板</p><p>剩下的步骤与腾讯云教程类似</p><h2 id="为域名添加Https访问"><a href="#为域名添加Https访问" class="headerlink" title="为域名添加Https访问"></a>为域名添加Https访问</h2><p>打开你所购买域名服务商的控制台（这里以阿里云为例子）</p><p>在域名控制台-基本信息-SSL证书</p><p>用免费版就可以</p><p><strong>填写一些必要的信息，审核通过后下载证书</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/41.jpg" alt="chevereto"></p>          </div><p><strong>这里因为我们云服务器安装的是Nginx，所以下载该类型</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/42.jpg" alt="chevereto"></p>          </div><p><strong>然后解压缩得到两个文件，一个key，一个pem，现在登录宝塔面板，复制证书密钥和内容到网站-设置-SSL-其他证书</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/43.jpg" alt="chevereto"></p>          </div><p>保存后你的域名就可以使用https访问了</p><h2 id="FTP服务器搭建"><a href="#FTP服务器搭建" class="headerlink" title="FTP服务器搭建"></a>FTP服务器搭建</h2><p>如果你购买的服务器自带的数据库空间不足的话，就要使用到chevereto图床专业版的外部存储功能<br>仪表盘-设置-外部存储-添加存储</p><p>搭建FTP服务器的方式应该有很多，这里介绍一下利用云服务器和宝塔面板搭建。</p><p><strong>原理：FTP服务+域名解析</strong></p><h3 id="1-利用腾讯云轻量应用服务器（价格参考50GB-一个月34RMB-域名年付）"><a href="#1-利用腾讯云轻量应用服务器（价格参考50GB-一个月34RMB-域名年付）" class="headerlink" title="1. 利用腾讯云轻量应用服务器（价格参考50GB/一个月34RMB + 域名年付）"></a>1. 利用腾讯云轻量应用服务器（价格参考50GB/一个月34RMB + 域名年付）</h3><p>教程前面的部分与前文内容相同，不同点在于需要在宝塔面板额外安装一个<code>Pure-Ftpd</code></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/28.jpg" alt="chevereto"></p>          </div><p><strong>因为使用chevereto图床的外部存储功能需要将ftp服务器存储的图片映射到一个域名，所以要在宝塔面板里新建网站</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/29.jpg" alt="chevereto"></p>          </div><p><strong>然后记得放行安全组端口</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/30.jpg" alt="chevereto"></p>          </div><p><strong>然后将相关信息填到chevereto的外部存储设置中</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/23.jpg" alt="chevereto"></p>          </div><p><strong>这样就成功将chevereto图床与腾讯云FTP服务器连接了</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/32.jpg" alt="chevereto"></p>          </div><h3 id="2-利用阿里云ECS服务器（价格参考200GB-一个月50RMB-域名年付备案）"><a href="#2-利用阿里云ECS服务器（价格参考200GB-一个月50RMB-域名年付备案）" class="headerlink" title="2. 利用阿里云ECS服务器（价格参考200GB/一个月50RMB + 域名年付备案）"></a>2. 利用阿里云ECS服务器（价格参考200GB/一个月50RMB + 域名年付备案）</h3><p>方法与前文腾讯云搭建FTP服务器相同</p><p><strong>记得放行安全组端口</strong></p><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/30.jpg" alt="chevereto"></p>          </div><h2 id="chevereto图床基本设置"><a href="#chevereto图床基本设置" class="headerlink" title="chevereto图床基本设置"></a>chevereto图床基本设置</h2><h3 id="1-网站"><a href="#1-网站" class="headerlink" title="1. 网站"></a>1. 网站</h3><p>推荐修改</p><ul><li>网站名称</li><li>网站标题</li><li>网站描述</li><li>默认时区</li><li>网站运营模式</li><li>网站隐私模式</li></ul><h3 id="2-用户"><a href="#2-用户" class="headerlink" title="2. 用户"></a>2. 用户</h3><p>推荐修改</p><ul><li>开放注册</li></ul><h3 id="3-图片上传"><a href="#3-图片上传" class="headerlink" title="3. 图片上传"></a>3. 图片上传</h3><p>推荐修改</p><ul><li>最大文件大小</li><li>缩略图大小</li><li>中等图片大小</li><li>水印</li></ul><h3 id="4-主页"><a href="#4-主页" class="headerlink" title="4. 主页"></a>4. 主页</h3><p>推荐修改</p><ul><li>样式</li><li>封面图片</li><li>标题</li><li>段落</li></ul><h3 id="5-电子邮件"><a href="#5-电子邮件" class="headerlink" title="5. 电子邮件"></a>5. 电子邮件</h3><p>推荐修改</p><ul><li>发送名称</li><li>发件人的电子邮件地址</li><li>电子邮件地址</li></ul><h3 id="6-防洪保护"><a href="#6-防洪保护" class="headerlink" title="6. 防洪保护"></a>6. 防洪保护</h3><p>推荐修改</p><ul><li>防洪保护</li><li>以电子邮件通知</li><li>每分钟限额</li><li>每小时限额</li><li>每日限额</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>chevereto图床作为一个图片站来说还是很不错的，用来存放一些高清图片（壁纸，美图）等还是很不错的。不过搭建chevereto是需要一定的成本的，如果预算不是很多建议去找一些其他的公益图床。阿里云ECS是我认为最好的组合。</p><p><del>如果平时只是写写文章的话，我还是推荐使用gitee图床，上传之前记得用格式工厂压缩一下图片，压缩成JPG格式，可以极大程度避免图片过大的问题</del></p><p>Gitee图床审查变得严格起来，出现了很多误封现象，这里建议使用<code>Github仓库 + jsDelivr</code>。后续会出教程。 </p><hr><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/about_me.png" alt="about_me"></p>          </div>]]></content>
    
    
    <summary type="html">哪一个男孩子不想拥有一个属于自己的图床？</summary>
    
    
    
    <category term="零基础教程" scheme="https://blog.sakurasep.site/Butterfly/categories/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="云服务器" scheme="https://blog.sakurasep.site/Butterfly/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="图床" scheme="https://blog.sakurasep.site/Butterfly/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>《算法学习笔记》</title>
    <link href="https://blog.sakurasep.site/Butterfly/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.sakurasep.site/Butterfly/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-22T11:26:54.000Z</published>
    <updated>2022-04-19T16:03:59.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h1><blockquote><p>作者：上杉九月</p><p>排版及发布：上杉九月</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>开一个讲解算法的栏目？我准备准备。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="普通判断法"><a href="#普通判断法" class="headerlink" title="普通判断法"></a>普通判断法</h2><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 10000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> pr[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Prime</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">2</span>; j &lt; <span class="built_in">sqrt</span>(i); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % j == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp &lt;= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pr[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    cin&gt;&gt;num;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(pr[i] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;i&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="埃拉托斯特尼筛法"><a href="#埃拉托斯特尼筛法" class="headerlink" title="埃拉托斯特尼筛法"></a>埃拉托斯特尼筛法</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>埃拉托斯特尼筛法，简称埃氏筛或爱氏筛，是一种由希腊数学家埃拉托斯特尼所提出的一种简单检定素数的算法。要得到自然数n以内的全部素数，必须把不大于根号n的所有素数的倍数剔除，剩下的就是素数。</p><h3 id="图片演示"><a href="#图片演示" class="headerlink" title="图片演示"></a>图片演示</h3><p><img src="https://cdn.jsdelivr.net/gh/sakurasep/images@1.4/stduy/idea/1.gif" alt=""></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 10000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> prime[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FindNum</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(num); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(prime[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i * <span class="number">2</span>; j &lt;= num; j += i)</span><br><span class="line">            &#123;</span><br><span class="line">                prime[j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    cin&gt;&gt;num;</span><br><span class="line">    <span class="built_in">FindNum</span>(num);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(prime[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><a href="https://www.luogu.com.cn/blog/cicos/notprime">洛谷用户@学委的原理性证明</a></p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 1000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> prime[MAXN];</span><br><span class="line"><span class="type">bool</span> check[MAXN];</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FindNum</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(check[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            prime[++temp] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= temp &amp;&amp; i * prime[j] &lt;= num; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            check[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">             &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    cin&gt;&gt;num;</span><br><span class="line">    <span class="built_in">FindNum</span>(num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= temp; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;prime[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><div class="fj-gallery"><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt=""></p>          </div>]]></content>
    
    
    <summary type="html">最新内容--质数筛选法</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.sakurasep.site/Butterfly/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C语言" scheme="https://blog.sakurasep.site/Butterfly/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="算法" scheme="https://blog.sakurasep.site/Butterfly/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
