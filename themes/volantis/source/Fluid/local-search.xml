<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>从零开始部署Hexo博客(番外篇一)</title>
    <link href="/Fluid/Hexo/Hexo%E7%B3%BB%E5%88%97-%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <url>/Fluid/Hexo/Hexo%E7%B3%BB%E5%88%97-%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此文件是对于Hexo最基本的修改，在使用主题后，由于主题作者设计的不同，某些设置将不会生效，你只需要填写必要设置，并且按照主题作者的文档进行修改即可。</p><p>本文参考了以下文章，对部分内容进行了修改</p><p><a href="https://blog.csdn.net/zemprogram/article/details/104288872">个人博客搭建笔记-hexo根目录下的<code>_config.yml</code>配置解释-前端小黑的博客-CSDN博客</a></p><h2 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h2><figure class="highlight yml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 网站标题(必填)</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">九月的生活</span> <br><span class="hljs-comment"># 副标题(在某些主题不生效)</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">New</span> <span class="hljs-string">Dream</span> <span class="hljs-string">New</span> <span class="hljs-string">Start</span> <br><span class="hljs-comment"># 网站描述(建议填写，优化SEO)</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">希望在这里分享我的经验与生活！</span> <br><span class="hljs-comment"># 网站的关键字(选填，优化SEO)</span><br><span class="hljs-attr">keywords:</span> <br><span class="hljs-comment"># 网站作者(必填)</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">上杉九月</span> <br><span class="hljs-comment"># 网站使用的语言(取决于你主题目录下的语言文件)</span><br><span class="hljs-attr">language:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">en</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">zh-TW</span> <br><span class="hljs-comment"># 网站对应的时区(无需设置)</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span> <br></code></pre></td></tr></table></figure><h2 id="Url"><a href="#Url" class="headerlink" title="Url"></a>Url</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">## url这里有个主题分站的玩法，后期会讲到</span><br><span class="hljs-comment"># 网站网址，如果设置了自定义域名，这里改为自定义的域名(必填)</span><br><span class="hljs-comment"># Github: https://Github用户名.github.io</span><br><span class="hljs-comment"># Gitee: https://Gitee仓库路径名.gitee.io</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://sakurasep.gitee.io</span> <br><span class="hljs-comment"># 文章的永久链接格式(选择性修改)</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:title/</span>  <br><span class="hljs-comment"># (无需修改)</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <br>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <br></code></pre></td></tr></table></figure><h2 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 以下内容保持默认即可</span><br><span class="hljs-attr">source_dir:</span> <span class="hljs-string">source</span><br><span class="hljs-attr">public_dir:</span> <span class="hljs-string">public</span><br><span class="hljs-attr">tag_dir:</span> <span class="hljs-string">tags</span><br><span class="hljs-attr">archive_dir:</span> <span class="hljs-string">archives</span><br><span class="hljs-attr">category_dir:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">code_dir:</span> <span class="hljs-string">downloads/code</span><br><span class="hljs-attr">i18n_dir:</span> <span class="hljs-string">:lang</span><br><span class="hljs-comment"># 跳过指定文件的渲染，这里在后期做分站时需要跳过分站的目录，防止二次渲染</span><br><span class="hljs-attr">skip_render:</span><br></code></pre></td></tr></table></figure><h2 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 新建文章的默认名称(无需修改)</span><br><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:title.md</span> <br><span class="hljs-comment"># 预设布局，hexo new命令可以创建post,draft,page三种页面，这里的值为post，hexo new &quot;文章名“ 默认生成的是post</span><br><span class="hljs-attr">default_layout:</span> <span class="hljs-string">post</span><br><span class="hljs-comment"># 将标题转换为首字母大写(无需修改)</span><br><span class="hljs-comment"># 影响的是title属性，后续可以通过安装插件实现该功能，所以此处的设置在某些主题不生效</span><br><span class="hljs-attr">titlecase:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 是否在新标签页中打开链接(按需修改)</span><br><span class="hljs-attr">external_link:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <br>  <span class="hljs-comment"># 仅仅对post类型的文章生效</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">site</span> <br>  <span class="hljs-comment"># 排除的域名</span><br>  <span class="hljs-attr">exclude:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment"># 文件名称转换 0是不转换 1小写 2大写(无需修改)</span><br><span class="hljs-attr">filename_case:</span> <span class="hljs-number">0</span><br><span class="hljs-comment"># 是否渲染草稿文件(无需修改)</span><br><span class="hljs-attr">render_drafts:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 是否启用资源文件夹(按需修改)</span><br><span class="hljs-comment"># 开启此选项后在hexo new文章时，会创建一个同名文件夹，用于保存你文章中所需资源。不过我建议使用网络图床。</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 相对链接(无需修改)</span><br><span class="hljs-attr">relative_link:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 是否显示未来的文章(按需修改)</span><br><span class="hljs-comment"># 如果你文章的时间设置的未来的时间，打开这个即可显示</span><br><span class="hljs-comment"># 这个可以用于定时发布某些文章，建议关闭</span><br><span class="hljs-attr">future:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 代码块高亮设置(根据所用主题按需设置)</span><br><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hljs:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">prismjs:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Home-page-setting"><a href="#Home-page-setting" class="headerlink" title="Home page setting"></a>Home page setting</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">index_generator:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-comment"># 每页显示的文章数量(按需修改)</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">7</span><br>  <span class="hljs-comment"># 文章排序方式，默认最新日期在最前面(无需修改)</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><br></code></pre></td></tr></table></figure><h2 id="Category-amp-Tag"><a href="#Category-amp-Tag" class="headerlink" title="Category &amp; Tag"></a>Category &amp; Tag</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 以下内容不建议修改</span><br><span class="hljs-comment"># 默认分类</span><br><span class="hljs-attr">default_category:</span> <span class="hljs-string">uncategorized</span><br><span class="hljs-comment"># 分类别名</span><br><span class="hljs-attr">category_map:</span><br><span class="hljs-comment"># 标签别名</span><br><span class="hljs-attr">tag_map:</span><br></code></pre></td></tr></table></figure><h2 id="Metadata-elements"><a href="#Metadata-elements" class="headerlink" title="Metadata elements"></a>Metadata elements</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 元数据元素(无需修改)</span><br><span class="hljs-attr">meta_generator:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="Date-x2F-Time-format"><a href="#Date-x2F-Time-format" class="headerlink" title="Date &#x2F; Time format"></a>Date &#x2F; Time format</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 时间/日期格式(无需修改)</span><br><span class="hljs-attr">date_format:</span> <span class="hljs-string">YYYY-MM-DD</span><br><span class="hljs-attr">time_format:</span> <span class="hljs-string">HH:mm:ss</span><br><span class="hljs-comment"># 文章更新时间格式(按需修改)</span><br><span class="hljs-comment"># 提供了三个选项 </span><br><span class="hljs-comment"># mtime: 将文章修改时间作为文章更新时间</span><br><span class="hljs-comment"># date: 将文章创建时间作为文章更新时间</span><br><span class="hljs-comment"># empty: 没有文章更新时间</span><br><span class="hljs-attr">updated_option:</span> <span class="hljs-string">&#x27;mtime&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Pagination"><a href="#Pagination" class="headerlink" title="Pagination"></a>Pagination</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 分页时每页文章数量 设置为0 不分页(按需修改)</span><br><span class="hljs-attr">per_page:</span> <span class="hljs-number">7</span><br><span class="hljs-attr">pagination_dir:</span> <span class="hljs-string">page</span><br></code></pre></td></tr></table></figure><h2 id="Include-x2F-Exclude-file-s"><a href="#Include-x2F-Exclude-file-s" class="headerlink" title="Include &#x2F; Exclude file(s)"></a>Include &#x2F; Exclude file(s)</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 包括/不包括的文件(无需修改)</span><br><span class="hljs-attr">include:</span><br><span class="hljs-attr">exclude:</span><br><span class="hljs-attr">ignore:</span><br></code></pre></td></tr></table></figure><h2 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 主题</span><br><span class="hljs-comment"># 使用的主题名</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">volantis</span><br></code></pre></td></tr></table></figure><h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 部署设置</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-comment"># 仓库地址</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://gitee.com/sakurasep/sakurasep.git</span><br>  <span class="hljs-comment"># 仓库分支</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><hr><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png"></p>]]></content>
    
    
    <categories>
      
      <category>Hexo系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>零基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始部署Hexo博客(一)</title>
    <link href="/Fluid/Hexo/Hexo%E7%B3%BB%E5%88%97-%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%90%AD%E5%BB%BA/"/>
    <url>/Fluid/Hexo/Hexo%E7%B3%BB%E5%88%97-%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客的基本搭建"><a href="#Hexo博客的基本搭建" class="headerlink" title="Hexo博客的基本搭建"></a>Hexo博客的基本搭建</h1><h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><p>需要的软件环境，以我本人的运行环境为例子</p><h3 id="1-Git官网"><a href="#1-Git官网" class="headerlink" title="1. Git官网"></a>1. <a href="https://git-scm.com/">Git官网</a></h3><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/4.jpg"></p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/5.jpg"></p><h3 id="2-Node-js-v12版本"><a href="#2-Node-js-v12版本" class="headerlink" title="2. Node.js v12版本"></a>2. <a href="https://registry.npmmirror.com/binary.html?path=node/latest-v12.x/">Node.js v12版本</a></h3><p>   Node.js建议使用v12版本，使用高版本会出现不影响使用的小bug，如果你并非强迫症，以及你的其他项目要求更高版本，请下载最新版</p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/6.jpg"></p><p>   如果你的网络无法进行下载，请访问以下链接进行下载</p><blockquote><p><a href="https://cloud.sakurasep.club/api/v3/file/source/16/Git-2.35.1.2-64-bit.exe?sign=YRIorNXqrSq89bc4BujGL10Klg4clmkBRKC3efReYpQ=:0">Git-来自上杉九月的网盘分享</a></p></blockquote><blockquote><p><a href="https://cloud.sakurasep.club/api/v3/file/source/17/node-v12.22.10-x64_2.msi?sign=oeBdUBvJMtOa5UYLPHJ2jvfzSW5_GZwRgytdnfxXK1U=:0">Node.js-来自上杉九月的网盘分享</a></p></blockquote><h3 id="3-检查安装是否成功"><a href="#3-检查安装是否成功" class="headerlink" title="3. 检查安装是否成功"></a>3. 检查安装是否成功</h3><p>   打开cmd命令行，输入<code>node -v</code>后显示下图所示，即为安装成功</p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/7.jpg"></p><p>   在电脑的任意目录点击右键，能够显示<code>Git Bash Here</code></p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/8.jpg"></p><h2 id="博客本地化部署"><a href="#博客本地化部署" class="headerlink" title="博客本地化部署"></a>博客本地化部署</h2><h3 id="1-更改npm为cnpm源"><a href="#1-更改npm为cnpm源" class="headerlink" title="1. 更改npm为cnpm源"></a>1. 更改npm为cnpm源</h3><p>   国内某些网络环境访问npm会出现问题，建议使用taobao镜像源，能有效减少故障的发生</p>   <figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">npm install -g cnpm --registry=https:<span class="hljs-regexp">//</span>registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/1.jpg"></p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/2.jpg"></p><h3 id="2-安装hexo命令行"><a href="#2-安装hexo命令行" class="headerlink" title="2. 安装hexo命令行"></a>2. 安装hexo命令行</h3><p>   -g是对全局安装hexo命令行</p>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">cnpm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/3.jpg"></p><h3 id="3-Hexo博客初始化"><a href="#3-Hexo博客初始化" class="headerlink" title="3. Hexo博客初始化"></a>3. Hexo博客初始化</h3><p>   选取一个想要安装Hexo的目录，路径中最好不要含有中文，后续会更好处理</p>   <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/9.jpg"></p><p>   此时文件夹内应有初始化文件</p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/10.jpg"></p><h3 id="4-运行博客"><a href="#4-运行博客" class="headerlink" title="4. 运行博客"></a>4. 运行博客</h3><p>   在博客根目录右键打开<code>Git Bash Here</code></p><p>   输入以下指令</p>   <figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo s<br></code></pre></td></tr></table></figure><blockquote><p>hexo clean 清除已经部署的网页静态文件</p><p>hexo g 编译当前博客</p><p>hexo s 启动本地服务器</p></blockquote><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/11.jpg"></p><p>   出现上图最后一句话，并且没有后续的警告语句，说明部署成功，在浏览器中输入以下网址查看部署效果</p>   <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">4000</span><br></code></pre></td></tr></table></figure><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/12.jpg"></p><blockquote><p> 如果你的端口4000被占用，可以使用hexo s -p 端口号</p><p> 然后访问<code>http://localhost:端口号</code></p></blockquote><p>   以上，博客的最基本的本地化部署已经完成，接下来将部署到Gitee或者Github</p><h2 id="博客部署到网络"><a href="#博客部署到网络" class="headerlink" title="博客部署到网络"></a>博客部署到网络</h2><p>Hexo博客部署一般部署到Github或者Gitee，对于我个人的使用理解来说，优先推荐使用Github，如果Github不方便使用，再改用Gitee。</p><p>Gitee虽然是国内的代码托管平台，访问速度可以保证，但是它的Pages页面需要手动更新，并且不能够绑定自定义的域名。</p><h3 id="一-部署到Github-推荐"><a href="#一-部署到Github-推荐" class="headerlink" title="一. 部署到Github(推荐)"></a>一. 部署到Github(推荐)</h3><p><a href="https://github.com/">GitHub: Where the world builds software · GitHub</a>   </p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/13.jpg"></p><h4 id="1-创建Github仓库"><a href="#1-创建Github仓库" class="headerlink" title="1. 创建Github仓库"></a>1. 创建Github仓库</h4><p>   注册完成Github账号，新建仓库用于保存上传博客代码</p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/14.jpg"></p><blockquote><p>这里我已经存在该仓库，所以会爆红</p></blockquote><p>   按照图示修改好仓库名后，确保仓库为公开(Public)，其他设置按需更改，创建仓库。</p><h4 id="2-获取与Github的连接"><a href="#2-获取与Github的连接" class="headerlink" title="2. 获取与Github的连接"></a>2. 获取与Github的连接</h4><p>   在任意位置打开<code>Git Bash Here</code>，输入以下指令</p>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;你的GitHub用户名&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;你的GitHub注册邮箱&quot;</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的GitHub注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/15.jpg"></p><p>   输入第三个命令后只需要连续按下三次回车，就会在<code>C:\Users\用户名\.ssh</code>中生成密钥文件</p><p>   打开<code>id_rsa.pub</code>，复制文件内容，添加到</p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/17.jpg"></p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/18.jpg"></p><p>   然后在<code>Git Bash</code>中输入以下命令测试是否连通Github</p>   <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/19.jpg"></p><h4 id="3-上传博客到Github"><a href="#3-上传博客到Github" class="headerlink" title="3.  上传博客到Github"></a>3.  上传博客到Github</h4><p>   首先在<code>Git Bash</code>中输入以下命令安装部署插件</p>   <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">cnpm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/20.jpg"></p><p>   打开根目录下的<code>_config.yml</code>文件</p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/21.jpg"></p><p>   repo 可以复制此处的链接</p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/22.jpg"></p><p>   填好后在<code>Git Bash</code>中输入下列命令部署到Github仓库</p>   <figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo d<br></code></pre></td></tr></table></figure><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/23.jpg"></p><p>   此时访问<code>https://Github用户名.github.io</code>即可访问</p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/24.jpg"></p><h4 id="4-绑定自定义域名"><a href="#4-绑定自定义域名" class="headerlink" title="4. 绑定自定义域名"></a>4. 绑定自定义域名</h4><p>你可以自行选择域名提供商，购买完域名后，在域名解析里设置以下解析记录</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/33.jpg"></p><blockquote><p> 主机记录：设置为<code>@</code>为泛解析，即访问域名为<code>https://域名</code>。如果想要设置为二级域名，请将主机记录设置为想要设置的名称，比如主机记录设置为<code>hexo</code>，即访问域名为<code>https://hexo.域名</code></p><p> 记录类型：设置为CNAME，将域名解析到网址。因为Github建议将自定义域名以CNAME解析到<code>Github用户名.github.io</code></p></blockquote><p>然后在<code>_config.yml</code>中设置url为你解析的域名</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/34.jpg"></p><p>最后再<code>博客根目录/source</code>下新建CNAME文件</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/36.jpg"></p><p>文件内容为自定义的域名</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/35.jpg"></p><h3 id="二-部署到Gitee-备用方法"><a href="#二-部署到Gitee-备用方法" class="headerlink" title="二. 部署到Gitee(备用方法)"></a>二. 部署到Gitee(备用方法)</h3><p>   <a href="https://gitee.com/">Gitee - 基于 Git 的代码托管和研发协作平台</a></p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/25.jpg"></p><h4 id="1-创建Gitee仓库"><a href="#1-创建Gitee仓库" class="headerlink" title="1.  创建Gitee仓库"></a>1.  创建Gitee仓库</h4><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/26.jpg"></p><h4 id="2-获取与Gitee的连接"><a href="#2-获取与Gitee的连接" class="headerlink" title="2. 获取与Gitee的连接"></a>2. 获取与Gitee的连接</h4><p>   在任意位置打开<code>Git Bash Here</code>，输入以下指令</p>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;你的Gitee用户名&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;你的Gitee注册邮箱&quot;</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的Gitee注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/15.jpg"></p><p>   输入第三个命令后只需要连续按下三次回车，就会在<code>C:\Users\用户名\.ssh</code>中生成密钥文件</p><p>   打开<code>id_rsa.pub</code>，复制文件内容，添加到</p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/27.jpg"></p><p>   然后在<code>Git Bash</code>中输入以下命令测试是否连通Gitee</p>   <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@gitee</span>.com<br></code></pre></td></tr></table></figure><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/28.jpg"></p><h4 id="3-上传博客到Gitee"><a href="#3-上传博客到Gitee" class="headerlink" title="3.  上传博客到Gitee"></a>3.  上传博客到Gitee</h4><p>   首先在<code>Git Bash</code>中输入以下命令安装部署插件</p>   <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">cnpm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/20.jpg"></p><p>   打开根目录下的<code>_config.yml</code>文件</p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/29.jpg"></p><p>   repo 可以复制此处的链接</p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/30.jpg"></p><p>   填好后在<code>Git Bash</code>中输入下列命令部署到Gitee仓库</p>   <figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo d<br></code></pre></td></tr></table></figure><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/23.jpg"></p><p>   在仓库的<code>服务-Gitee Pages</code>进行手动部署</p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/31.jpg"></p><p>   打开<code>强制使用Https</code>，更新部署</p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/32.jpg"></p><p>   等待部署结束后，访问<code>Https://Gitee用户名.gitee.io</code>查看部署结果</p><p>   <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/hexo/24.jpg"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>本篇文章基本讲述了Hexo博客的基本部署，包括了本地化部署测试和上传到Github或者Gitee代码托管平台，使用托管平台提供的Page服务进行远程访问。</p><p>本篇教程属于面向与小白的零基础教程系列，如果在安装过程中出现任何问题，你可以在评论区提问，你的提问也是我充实文章的助力！</p><hr><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png"></p>]]></content>
    
    
    <categories>
      
      <category>Hexo系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>零基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的2021年度总结</title>
    <link href="/Fluid/Year/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%20-%202021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/Fluid/Year/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%20-%202021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h1><blockquote><p>作者：上杉九月</p></blockquote><blockquote><p>排版与发布：上杉九月</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2021年，我对自己算是一半满意，一半不满意吧，有些事情不尽如人意，有些事情自己做的很好，希望在2022年我能够有所进步。</p><p>本文中所有内容截止于2022.1.1</p><p><strong>New Dream New Start</strong></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>这次的年终总结并不是按阶段划分的，而是分成了两个部分。</p><p>第一部分是对2021年全年的回顾，自己做了什么，还有什么需要改进的地方。</p><p>第二部分是对2022年的一个总体的规划，新的一年我应该向什么方向努力。</p><h2 id="第一部分-我的2021"><a href="#第一部分-我的2021" class="headerlink" title="第一部分 我的2021"></a>第一部分 我的2021</h2><p>对于我来说，2021年研究了很多网站搭建的内容，熟练的掌握云服务器的各种应用方式，接下来就让我一一给各位梳理一下。</p><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><h3 id="上杉九月的博客-Hexo"><a href="#上杉九月的博客-Hexo" class="headerlink" title="上杉九月的博客 - Hexo"></a><a href="https://blog.sakurasep.site/">上杉九月的博客</a> - Hexo</h3><h4 id="图片介绍"><a href="#图片介绍" class="headerlink" title="图片介绍"></a>图片介绍</h4><blockquote><p>首页图</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/1.jpg"></p><blockquote><p>主页信息流</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/3.jpg"></p><blockquote><p>文章阅读</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/2.jpg"></p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>使用Hexo博客框架 + Github Pages</p></blockquote><p>Hexo作为目前活跃度较高的博客框架，主题丰富，功能齐全，个人是十分喜欢由Hexo框架生成的静态博客，Github Pages的访问速度还是可以的，而且如果担心访问速度的话也可以将博客部署到Gitee。</p><blockquote><p>主题使用了<a href="https://volantis.js.org/">Volantis 5.0 Beta</a> 美化思路参考<a href="https://inkss.cn/">枋柚梓的猫会发光 (inkss.cn)</a></p></blockquote><p>Volantis算是一个不错的博客主题，属于是上限高，下限也高，新手通过Volantis官方文档也能配置完成一个不错的页面，而如果想更进一步，Volantis官方还收录了很多大佬的美化教程，可以进行参考。</p><blockquote><p>该博客内容主攻计算机相关内容</p></blockquote><p>由于是静态博客，写作相比于其他博客框架稍微有些繁琐，不适合日常更新。（不过有大佬写的HPP组件看起来还不错，等完善）。我在新的一年保证文章更新的情况下也会记录一下自己的其他方面的内容，放到博客分站吧。</p><blockquote><p>还有些正在调试的内容</p></blockquote><p>Hexo是支持分站的，即可以将其他Hexo主题作为主站点的其他访问风格，目前还在做主站的调试，等主站稳定了把分站会恢复的。</p><h3 id="上杉九月的博客-Halo"><a href="#上杉九月的博客-Halo" class="headerlink" title="上杉九月的博客 - Halo"></a><a href="https://halo.sakurasep.club/">上杉九月的博客</a> - Halo</h3><h4 id="图片介绍-1"><a href="#图片介绍-1" class="headerlink" title="图片介绍"></a>图片介绍</h4><blockquote><p>首页图</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/4.jpg"></p><blockquote><p>主页信息流</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/5.jpg"></p><blockquote><p>文章阅读</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/6.jpg"></p><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>网站还处于调试期，打算把其他内容放在这里更新。</p><blockquote><p>网站是由<a href="https://halo.run/">Halo博客框架</a>搭建</p></blockquote><p>Halo博客框架属于是动态部署的博客类型，需要依托于Java环境。我把该博客部署在腾讯云上。</p><p>主题使用的是<a href="https://github.com/LIlGG/halo-theme-sakura">GitHub - LIlGG&#x2F;halo-theme-sakura: Halo 版本的樱花🌸主题</a></p><h3 id="上杉九月的博客-Typecho"><a href="#上杉九月的博客-Typecho" class="headerlink" title="上杉九月的博客 - Typecho"></a><a href="https://blog.sakurasep.club/">上杉九月的博客</a> - Typecho</h3><h4 id="图片介绍-2"><a href="#图片介绍-2" class="headerlink" title="图片介绍"></a>图片介绍</h4><blockquote><p>首页图</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/7.jpg"></p><blockquote><p>文章阅读</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/8.jpg"></p><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>Typecho是我最喜欢的博客框架之一，响应速度快，写作方便。</p><p>不过Typecho也有它的缺点，就是很多插件已经不更新了。</p><p>Typecho的主题很多是需要付费的，当然也有免费的主题。这里我使用的是<a href="https://blog.zwying.com/">秦枫鸢梦 - 🌸花有重开日,人无再少年🏃‍♂️ (zwying.com)</a></p><h2 id="图片站-Chevereto"><a href="#图片站-Chevereto" class="headerlink" title="图片站 - Chevereto"></a><a href="https://pic.sakurasep.top/">图片站</a> - Chevereto</h2><h4 id="图片介绍-3"><a href="#图片介绍-3" class="headerlink" title="图片介绍"></a>图片介绍</h4><blockquote><p>首页</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/9.jpg"></p><blockquote><p>图片浏览</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/10.jpg"></p><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><p>图片站在去年年底就进入测试阶段，年初开始稳定运行。属于我这些网站中运行最为稳定的一个。。。</p><p>图片站可以注册（目前仅为邀请码开放，如果想上传图片的话，可以评论区留言邮箱，私发邀请码）</p><p>小服务器，空间不大，带宽不大，没法做到开放注册。</p><p>当然如果只是浏览和下载还是完全开放的。</p><p><strong>图片链接是无法进行引用的，网站开启了防盗链</strong></p><h2 id="第二部分-我的2022"><a href="#第二部分-我的2022" class="headerlink" title="第二部分 我的2022"></a>第二部分 我的2022</h2><p>去年对于我来说，其实是荒废了很多时间。</p><p>直到年底的几个月才认清了方向，明确了自己的未来的道路。</p><h3 id="第一件事：健康的身体"><a href="#第一件事：健康的身体" class="headerlink" title="第一件事：健康的身体"></a>第一件事：健康的身体</h3><p>185cm的高个子 87KG的体重，BMI是稍微超标的。</p><p>对于我来说，身体长时间处于一个亚健康状态，精神支撑不了我去干一些事情，容易累，嗜睡。</p><details><summary>2022 ：第一件事</summary><ul><li><input disabled="" type="checkbox"> BMI回归正常水平，适当的增加肌肉</li></ul></details><h3 id="第二件事：英语"><a href="#第二件事：英语" class="headerlink" title="第二件事：英语"></a>第二件事：英语</h3><details><summary>2022 ：第二件事</summary><ul><li><input disabled="" type="checkbox"> 2022年的两场考试，争取一遍过四级和六级</li></ul></details><h3 id="第三件事：考研"><a href="#第三件事：考研" class="headerlink" title="第三件事：考研"></a>第三件事：考研</h3><details><summary>2022 ：第三件事</summary><ul><li><input disabled="" type="checkbox"> 准备考研相关内容</li></ul></details><h3 id="第四件事：专业水平"><a href="#第四件事：专业水平" class="headerlink" title="第四件事：专业水平"></a>第四件事：专业水平</h3><details><summary>2022 ：第四件事</summary><ul><li><input disabled="" type="checkbox"> 全面提高自己的代码能力</li></ul></details><h3 id="第五件事：文章更新"><a href="#第五件事：文章更新" class="headerlink" title="第五件事：文章更新"></a>第五件事：文章更新</h3><details><summary>2022 ：第五件事</summary><ul><li><input disabled="" type="checkbox"> 持续产出高质量文章 </li></ul></details><h3 id="第六件事：远足"><a href="#第六件事：远足" class="headerlink" title="第六件事：远足"></a>第六件事：远足</h3><details><summary>2022 ：第六件事</summary><ul><li><input disabled="" type="checkbox"> 暑假里组织一次远足</li></ul></details><hr><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png"></p>]]></content>
    
    
    <categories>
      
      <category>年度总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>年度总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《CTF学习笔记》</title>
    <link href="/Fluid/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20CTF(Crypto)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/Fluid/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20CTF(Crypto)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h1><blockquote><p>作者：上杉九月</p><p>排版：上杉九月</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近一位朋友入坑CTF，想起来开学还加了一个相关社团参加了几场比赛。还是挺有趣的。</p><p>每天做上一两个，就当是放松了。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="BUUCTF在线评测-buuoj-cn-–-MD5"><a href="#BUUCTF在线评测-buuoj-cn-–-MD5" class="headerlink" title="BUUCTF在线评测 (buuoj.cn) – MD5"></a><a href="https://buuoj.cn/challenges#MD5">BUUCTF在线评测 (buuoj.cn) – MD5</a></h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/1.png"></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>e00cf25ad42683b3df678c61f42c6bda</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>题目写的很清楚 MD5，然后给出的这一端字符串（用多了能看出来很像MD5）</p><p>扔到**<a href="https://www.cmd5.com/">MD5解密网站</a>**得到<code>flag&#123;admin1&#125;</code></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/2.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/3.png"></p><h2 id="BUUCTF在线评测-buuoj-cn-–-一眼就解密"><a href="#BUUCTF在线评测-buuoj-cn-–-一眼就解密" class="headerlink" title="BUUCTF在线评测 (buuoj.cn) – 一眼就解密"></a><a href="https://buuoj.cn/challenges#%E4%B8%80%E7%9C%BC%E5%B0%B1%E8%A7%A3%E5%AF%86">BUUCTF在线评测 (buuoj.cn) – 一眼就解密</a></h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/4.png"></p><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>flag：ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30&#x3D;</p><h2 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h2><p>Base64编码有个特点，编码末尾会出现<code>=</code></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/5.png"></p><p>所以说仍然是放到**<a href="https://www.qqxiuzi.cn/bianma/base64.htm">Base64解密网站</a>**</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/6.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/7.png"></p><hr><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《学习笔记》</title>
    <link href="/Fluid/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/Fluid/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>要填的坑挺多的，精力有限，目前先集中更新本篇文章。</p><p>本篇文章参考书籍为<strong>《洛谷-深入浅出程序设计竞赛》</strong></p><h1 id="2021-09-24"><a href="#2021-09-24" class="headerlink" title="2021.09.24"></a>2021.09.24</h1><h2 id="1-P3156-【深基15-例1】询问学号-洛谷-入门"><a href="#1-P3156-【深基15-例1】询问学号-洛谷-入门" class="headerlink" title="1. P3156 【深基15.例1】询问学号 - 洛谷 - 入门"></a>1. <a href="https://www.luogu.com.cn/problem/P3156">P3156 【深基15.例1】询问学号 - 洛谷 - 入门</a></h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有 $n(n \le 2 \times 10^6)$ 名同学陆陆续续进入教室。我们知道每名同学的学号（在 1 到 $10^9$ 之间），按进教室的顺序给出。上课了，老师想知道第 $i$ 个进入教室的同学的学号是什么（最先进入教室的同学 $i&#x3D;1$），询问次数不超过 $10^5$ 次。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行 2 个整数 n 和 m，表示学生个数和询问次数。</p><p>第二行 n 个整数，表示按顺序进入教室的学号。</p><p>第三行 m 个整数，表示询问第几个进入教室的同学。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>m 个整数表示答案，用换行隔开。</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp">输入：<br><span class="hljs-number">10</span> <span class="hljs-number">3</span><br><span class="hljs-number">1</span> <span class="hljs-number">9</span> <span class="hljs-number">2</span> <span class="hljs-number">60</span> <span class="hljs-number">8</span> <span class="hljs-number">17</span> <span class="hljs-number">11</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">14</span><br><span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">9</span><br>输出：<br><span class="hljs-number">1</span><br><span class="hljs-number">8</span><br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h2 id="思路和知识点"><a href="#思路和知识点" class="headerlink" title="思路和知识点"></a>思路和知识点</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector基本用法<br><span class="hljs-number">1.</span> vector &lt;<span class="hljs-type">int</span>&gt; <span class="hljs-built_in">array</span> (N, i); 新建一个初始长度为N，N个数据为i的vector数组<br><span class="hljs-number">2.</span> array.<span class="hljs-built_in">push_back</span>(a); 将a元素添加到数组array的末尾，并增加数组长度<br><span class="hljs-number">3.</span> array.<span class="hljs-built_in">size</span>(); 返回数组的长度<br><span class="hljs-number">4.</span> array.<span class="hljs-built_in">resize</span>(n, m); 重新将数组长度设置为n，若原数组比n长，则删除多余元素，若短，新增加的数组初始化为m<br><span class="hljs-number">5.</span> array.<span class="hljs-built_in">begin</span>(); 返回array数组的首元素，也就是array[<span class="hljs-number">0</span>]的指针<br><span class="hljs-number">6.</span> array.<span class="hljs-built_in">end</span>(); 返回array数组末尾下一个元素的指针<br></code></pre></td></tr></table></figure><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    vector &lt;<span class="hljs-type">int</span>&gt; student; <span class="hljs-comment">// 创建vector数组</span><br>    <span class="hljs-type">int</span> temp = <span class="hljs-number">0</span>;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cin&gt;&gt;temp;<br>        student.<span class="hljs-built_in">push_back</span>(temp); <span class="hljs-comment">// 将temp压入动态vector数组的末尾，并且vector数组的长度+1</span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    &#123;<br>        cin&gt;&gt;temp;<br>        cout&lt;&lt;student[temp - <span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-comment">// 数组一般是从0开始存储数据，而我们询问学号是从1开始寻找</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="2-P3613-【深基15-例2】寄包柜-洛谷-普及"><a href="#2-P3613-【深基15-例2】寄包柜-洛谷-普及" class="headerlink" title="2. P3613 【深基15.例2】寄包柜 - 洛谷 - 普及 "></a>2. <a href="https://www.luogu.com.cn/problem/P3613">P3613 【深基15.例2】寄包柜 - 洛谷 - 普及 </a></h2><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>超市里有 $n(n\le10^5)$ 个寄包柜。每个寄包柜格子数量不一，第 $i$ 个寄包柜有 $a_i(a_i\le10^5)$ 个格子，不过我们并不知道各个 $a_i$ 的值。对于每个寄包柜，格子编号从 1 开始，一直到 $a_i$。现在有 $q(q\le10^5)$ 次操作：</p><ul><li><code>1 i j k</code>：在第 $i$ 个柜子的第 $j$ 个格子存入物品 $k(0\le k\le 10^9)$。当 $k&#x3D;0$ 时说明清空该格子。</li><li><code>2 i j</code>：查询第 $i$ 个柜子的第 $j$ 个格子中的物品是什么，保证查询的柜子有存过东西。</li></ul><p>已知超市里共计不会超过 $10^7$ 个寄包格子，$a_i$ 是确定然而未知的，但是保证一定不小于该柜子存物品请求的格子编号的最大值。当然也有可能某些寄包柜中一个格子都没有。</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行 2 个整数 n 和 q，寄包柜个数和询问次数。</p><p>接下来 q 个整数，表示一次操作。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>对于查询操作时，输出答案。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">输入：<br><span class="hljs-number">5</span> <span class="hljs-number">4</span><br><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">10000</span> <span class="hljs-number">114514</span><br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">10000</span><br><span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br>输出：<br><span class="hljs-number">114514</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="思路和知识点-1"><a href="#思路和知识点-1" class="headerlink" title="思路和知识点"></a>思路和知识点</h2><p><a href="#%E6%80%9D%E8%B7%AF%E5%92%8C%E7%9F%A5%E8%AF%86%E7%82%B9">vector相关操作</a></p><p>注意 此题的数据范围是$10^5$,如果开一个$10^5$ * $10^5$ 的二维数组，空间占用将会十分离谱</p><p>所以此类题目使用vector便可以最大程度的减少空间的占用</p><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, q, op;<br>    <span class="hljs-type">int</span> i, j, k;<br>    cin&gt;&gt;n&gt;&gt;q;<br>    vector &lt; vector &lt;<span class="hljs-type">int</span>&gt; &gt; <span class="hljs-built_in">block</span> (n + <span class="hljs-number">1</span>);<span class="hljs-comment">// 此时仅仅是开了一个长度为n的一维数组</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> count = <span class="hljs-number">0</span>; count &lt; q; count++)<br>    &#123;<br>        cin&gt;&gt;op;<br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-number">1</span>)<br>        &#123;<br>            cin&gt;&gt;i&gt;&gt;j&gt;&gt;k;<br>            <span class="hljs-keyword">if</span>(block[i].<span class="hljs-built_in">size</span>() &lt; j + <span class="hljs-number">1</span>)<span class="hljs-comment">// 如果柜子里格子不足，那么就扩展第i个柜子的格子到j + 1</span><br>            &#123;<br>                block[i].<span class="hljs-built_in">resize</span>(j + <span class="hljs-number">1</span>);<br>            &#125;<br>            block[i][j] = k;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cin&gt;&gt;i&gt;&gt;j;<br>            cout&lt;&lt;block[i][j]&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="3-手写栈的操作"><a href="#3-手写栈的操作" class="headerlink" title="3. 手写栈的操作"></a>3. <a href="about:blank">手写栈的操作</a></h2><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>栈作为一个先进先出的数据结构，尽管<stack>头文件已经提供了现成的关于栈的操作</p><p>但是在STL里面，使用这些操作而不使用O2优化</p><p>会导致程序有一点点慢</p><h2 id="思路和知识点-2"><a href="#思路和知识点-2" class="headerlink" title="思路和知识点"></a>思路和知识点</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">C语言提供了栈的相关快捷操作&lt;stack&gt;<br><span class="hljs-number">1.</span> stack &lt;<span class="hljs-type">int</span>&gt; s; 新建一个栈<br><span class="hljs-number">2.</span> s.<span class="hljs-built_in">push</span>(a); 将元素a压入栈<br><span class="hljs-number">3.</span> s.<span class="hljs-built_in">pop</span>(); 将s的栈顶元素弹出<br><span class="hljs-number">4.</span> s.<span class="hljs-built_in">top</span>(); 查询s的栈顶元素<br><span class="hljs-number">5.</span> s.<span class="hljs-built_in">size</span>(); 查询s的元素个数<br><span class="hljs-number">6.</span> s.<span class="hljs-built_in">empty</span>(); 查询s是否为空<br></code></pre></td></tr></table></figure><h2 id="手写栈模板-请根据实际情况进行修改"><a href="#手写栈模板-请根据实际情况进行修改" class="headerlink" title="手写栈模板(请根据实际情况进行修改)"></a>手写栈模板(请根据实际情况进行修改)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> stack[<span class="hljs-number">10000</span>];<br><span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<span class="hljs-comment">// 指针，指向的是下一个栈元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><span class="hljs-comment">// 压栈操作</span></span><br><span class="hljs-function"></span>&#123;<br>    stack[p++] = x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span><span class="hljs-comment">// 弹出栈顶元素</span></span><br><span class="hljs-function"></span>&#123;<br>    stack[--p] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span><span class="hljs-comment">// 查询栈顶元素</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> stack[p - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="4-UVA673-平衡的括号-Parentheses-Balance-洛谷-普及"><a href="#4-UVA673-平衡的括号-Parentheses-Balance-洛谷-普及" class="headerlink" title="4. UVA673 平衡的括号 Parentheses Balance - 洛谷 - 普及 "></a>4. <a href="https://www.luogu.com.cn/problem/UVA673">UVA673 平衡的括号 Parentheses Balance - 洛谷 - 普及 </a></h2><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个包含“()”和“[]”的括号序列，判断是否合法。<br>具体规则：</p><ol><li>空串合法；</li><li>如果A和B合法，那么AB合法；</li><li>如果A合法(A)和[A]都合法</li></ol><p>感谢 @陶文祥  提供的翻译。</p><h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例"></a>样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">输入:<br><span class="hljs-number">3</span><br>([])<br>(([()])))<br>([()[]()])()<br>输出:<br>Yes<br>No<br>Yes<br></code></pre></td></tr></table></figure><h2 id="思路和知识点-3"><a href="#思路和知识点-3" class="headerlink" title="思路和知识点"></a>思路和知识点</h2><p>你可以将含有括号的这一个字符串人为的分为左右两边。</p><p>出栈判定是右边的括号可以将左边正处于栈顶的括号匹配消除</p><p>入栈判定是栈为空或者是没有对应的括号可以匹配</p><h2 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> stack[<span class="hljs-number">1000</span>];<br><span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<span class="hljs-comment">// 栈顶指针,指的是下一个待插入的数组位置</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><span class="hljs-comment">// 压栈操作</span></span><br><span class="hljs-function"></span>&#123;<br>    stack[p++] = x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    stack[--p] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> stack[p - <span class="hljs-number">1</span>];<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">char</span> a)</span><span class="hljs-comment">// 因为要让右边的括号匹配左边的括号，所以说对于每一种右括号都应该返回相对应的左括号形式</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a == <span class="hljs-string">&#x27;)&#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;(&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a == <span class="hljs-string">&#x27;]&#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;[&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a == <span class="hljs-string">&#x27;&#125;&#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;/0&#x27;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> num;<br>    cin&gt;&gt;num;<br>    string str;<br>    <span class="hljs-built_in">getline</span>(cin, str);<span class="hljs-comment">// C++在使用cin输入时，光标停留在数字行的末尾，如果此时用getline读取一行，那么将读取到空行</span><br>    <span class="hljs-keyword">while</span>(num--)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(p != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-built_in">getline</span>(cin, str);<span class="hljs-comment">// 这里才是真正的去读入字符串</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(p == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">push</span>(str[i]);<span class="hljs-comment">// 栈空则压入数据</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(str[i]) == <span class="hljs-built_in">top</span>())<span class="hljs-comment">// 栈顶左括号与右括号匹配</span><br>            &#123;<br>                <span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">push</span>(str[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(p == <span class="hljs-number">0</span>)<br>        &#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;Yes\n&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;No\n&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="2021-09-26"><a href="#2021-09-26" class="headerlink" title="2021.09.26"></a>2021.09.26</h1><h2 id="5-P1449-后缀表达式-洛谷-普及"><a href="#5-P1449-后缀表达式-洛谷-普及" class="headerlink" title="5. P1449 后缀表达式 - 洛谷 - 普及 "></a>5. <a href="https://www.luogu.com.cn/problem/P1449">P1449 后缀表达式 - 洛谷 - 普及 </a></h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>所谓后缀表达式是指这样的一个表达式：式中不再引用括号，运算符号放在两个运算对象之后，所有计算按运算符号出现的顺序，严格地由左而右新进行（不用考虑运算符的优先级）。</p><p>如：3*(5–2)+7对应的后缀表达式为：3．5．2．-*7．+@。’@’为表达式的结束符号。‘.’为操作数的结束符号。</p><h2 id="样例-3"><a href="#样例-3" class="headerlink" title="样例"></a>样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">输入：<br><span class="hljs-number">3.5</span><span class="hljs-number">.2</span>.-*<span class="hljs-number">7.</span>+@<br>输出：<br><span class="hljs-number">16</span>  <br></code></pre></td></tr></table></figure><h2 id="思路和知识点-4"><a href="#思路和知识点-4" class="headerlink" title="思路和知识点"></a>思路和知识点</h2><p>首先注意一点，运算符号前面的两位数字便是进行运算的两位数。</p><p>当在字符串读取到运算符号的时候，便从栈顶的顶部取两个数，然后进行运算，运算后的结果仍然放在栈顶。</p><h2 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> stack[<span class="hljs-number">1000</span>];<br><span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    stack[p++] = x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    stack[--p] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> stack[p - <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x, y; <span class="hljs-comment">// x, y是用于存放两个算数的临时变量</span><br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        ch = <span class="hljs-built_in">getchar</span>();<br>        <span class="hljs-keyword">if</span>(ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span> &amp;&amp; ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span>)<br>        &#123;<br>            sum = sum * <span class="hljs-number">10</span> + (ch - <span class="hljs-string">&#x27;0&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;.&#x27;</span>)<br>        &#123;<br>            <span class="hljs-built_in">push</span>(sum);<br>            sum = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch != <span class="hljs-string">&#x27;@&#x27;</span>)<br>        &#123;<br>            x = <span class="hljs-built_in">top</span>();<br>            <span class="hljs-built_in">pop</span>();<br>            y = <span class="hljs-built_in">top</span>();<br>            <span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">switch</span> (ch)<br>            &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>                    <span class="hljs-built_in">push</span>(x + y);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>                    <span class="hljs-built_in">push</span>(y - x);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>                    <span class="hljs-built_in">push</span>(x * y);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>                    <span class="hljs-built_in">push</span>(y / x);<br>                    <span class="hljs-keyword">break</span>;            <br>                <span class="hljs-comment">//default:</span><br>                    <span class="hljs-comment">//break;</span><br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> (ch != <span class="hljs-string">&#x27;@&#x27;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-built_in">top</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="6-P1739-表达式括号匹配-洛谷-入门"><a href="#6-P1739-表达式括号匹配-洛谷-入门" class="headerlink" title="6. P1739 表达式括号匹配 - 洛谷 - 入门"></a>6. <a href="https://www.luogu.com.cn/problem/P1739">P1739 表达式括号匹配 - 洛谷 - 入门</a></h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>假设一个表达式有英文字母（小写）、运算符（+，—，*，&#x2F;）和左右小（圆）括号构成，以“@”作为表达式的结束符。请编写一个程序检查表达式中的左右圆括号是否匹配，若匹配，则返回“YES”；否则返回“NO”。表达式长度小于255，左圆括号少于20个。</p><h2 id="样例-4"><a href="#样例-4" class="headerlink" title="样例"></a>样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">输入：<br><span class="hljs-number">2</span>*(x+y)/(<span class="hljs-number">1</span>-x)@<br>输出：<br>YES<br>输入：<br>(<span class="hljs-number">25</span>+x)*(a*(a+b+b)@<br>输出<br>NO<br></code></pre></td></tr></table></figure><h2 id="思路和知识点-5"><a href="#思路和知识点-5" class="headerlink" title="思路和知识点"></a>思路和知识点</h2><p>这个相比于前面那道括号匹配题更加简单。</p><p>只要程序读取到左括号就压入栈顶，读入右括号就将栈顶弹出。</p><p>如果到最后栈非空，输出NO，反之，输出YES。</p><h2 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> stack[<span class="hljs-number">1000</span>];<br><span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    stack[p++] = x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    stack[--p] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> stack[p - <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    <span class="hljs-built_in">getline</span>(cin, s);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;(&#x27;</span>)<br>        &#123;<br>            <span class="hljs-built_in">push</span>(s[i]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;)&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;(&#x27;</span>)<br>            &#123;<br>                <span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">push</span>(s[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="7-P1044-NOIP2003-普及组-栈-洛谷-普及"><a href="#7-P1044-NOIP2003-普及组-栈-洛谷-普及" class="headerlink" title="7. P1044 (NOIP2003 普及组)栈 - 洛谷 - 普及"></a>7. <a href="https://www.luogu.com.cn/problem/P1044">P1044 (NOIP2003 普及组)栈 - 洛谷 - 普及</a></h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>栈是计算机中经典的数据结构，简单的说，栈就是限制在一端进行插入删除操作的线性表。</p><p>栈有两种最重要的操作，即 pop（从栈顶弹出一个元素）和 push（将一个元素进栈）。</p><p>栈的重要性不言自明，任何一门数据结构的课程都会介绍栈。宁宁同学在复习栈的基本概念时，想到了一个书上没有讲过的问题，而他自己无法给出答案，所以需要你的帮忙。</p><p><img src="https://cdn.luogu.com.cn/upload/pic/18.png"> </p><p>宁宁考虑的是这样一个问题：一个操作数序列，$1,2,\ldots ,n$（图示为 1 到 3 的情况），栈 A 的深度大于 $n$。</p><p>现在可以进行两种操作，</p><ol><li>将一个数，从操作数序列的头端移到栈的头端（对应数据结构栈的 push 操作）</li><li>将一个数，从栈的头端移到输出序列的尾端（对应数据结构栈的 pop 操作）</li></ol><p>使用这两种操作，由一个操作数序列就可以得到一系列的输出序列，下图所示为由 <code>1 2 3</code> 生成序列 <code>2 3 1</code> 的过程。</p><p><img src="https://cdn.luogu.com.cn/upload/pic/19.png"> </p><p>（原始状态如上图所示）</p><p>你的程序将对给定的 $n$，计算并输出由操作数序列 $1,2,\ldots,n$ 经过操作可能得到的输出序列的总数。</p><h2 id="样例-5"><a href="#样例-5" class="headerlink" title="样例"></a>样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">输入：<br><span class="hljs-number">3</span><br>输出：<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h2 id="思路和知识点-6"><a href="#思路和知识点-6" class="headerlink" title="思路和知识点"></a>思路和知识点</h2><p>本题我暂时也没搞得太明白，只是推算出了数学规律为卡特兰数。</p><p>至于卡特兰数怎么推导的，我再看看吧。</p><h2 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> k[<span class="hljs-number">100</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    k[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; k[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)<br>        &#123;<br>            k[i] += k[j] * k[i - j - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;k[n];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="P1996-约瑟夫问题-洛谷-普及"><a href="#P1996-约瑟夫问题-洛谷-普及" class="headerlink" title="P1996 约瑟夫问题 - 洛谷 - 普及"></a><a href="https://www.luogu.com.cn/problem/P1996">P1996 约瑟夫问题 - 洛谷 - 普及</a></h2><h2 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h2><p>$n$ 个人围成一圈，从第一个人开始报数,数到 $m$ 的人出列，再由下一个人重新从 $1$ 开始报数，数到 $m$ 的人再出圈，依次类推，直到所有的人都出圈，请输出依次出圈人的编号。</p><p><strong>注意：本题和《深入浅出-基础篇》上例题的表述稍有不同。书上表述是给出淘汰 n-1 名小朋友，而该题是全部出圈。</strong></p><h2 id="样例-6"><a href="#样例-6" class="headerlink" title="样例"></a>样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">输入：<br><span class="hljs-number">10</span> <span class="hljs-number">3</span><br>输出：<br><span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">9</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">8</span> <span class="hljs-number">5</span> <span class="hljs-number">10</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="思路和知识点-7"><a href="#思路和知识点-7" class="headerlink" title="思路和知识点"></a>思路和知识点</h2><p>典型的队列问题。</p><p>这里我们先将$n$个数按照从小到大的顺序以此加入队列，此时我们再每次将$m-1$个数从队前迁移到队尾,那么此时在队伍最前的便是要淘汰的数，输出后直接弹出。</p><p>直到$head &#x3D;&#x3D; tail$结束。</p><h2 id="AC代码-6"><a href="#AC代码-6" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> queue[<span class="hljs-number">100000</span>];<br><span class="hljs-type">int</span> head = <span class="hljs-number">0</span>, tail = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    queue[tail++] = x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    queue[head++] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">front</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> queue[head];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span> &amp;&amp; m == <span class="hljs-number">0</span>)<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">push</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(head != tail)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++)<br>        &#123;<br>            <span class="hljs-built_in">push</span>(<span class="hljs-built_in">front</span>());<br>            <span class="hljs-built_in">pop</span>();<br>        &#125;<br>        cout&lt;&lt;<span class="hljs-built_in">front</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-built_in">pop</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客日志-记录博客最新动态</title>
    <link href="/Fluid/About/%E5%8D%9A%E5%AE%A2%E5%85%AC%E5%91%8A%20-%20%E4%B8%8A%E6%9D%89%E4%B9%9D%E6%9C%88%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/Fluid/About/%E5%8D%9A%E5%AE%A2%E5%85%AC%E5%91%8A%20-%20%E4%B8%8A%E6%9D%89%E4%B9%9D%E6%9C%88%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如遇到问题请留言，谢谢支持。</p><p>这里我想要感谢</p><blockquote><p><a href="http://wenchong.space/">雨中的博客(wenchong.space)</a>提供美化问题解答，非常感谢。</p><p><a href="https://inkss.cn/">枋柚梓的猫会发光 (inkss.cn)</a>提供自己网站的源码开放参考，对我的美化进程帮助很大，非常感谢。</p></blockquote><h1 id="网站公告"><a href="#网站公告" class="headerlink" title="网站公告"></a>网站公告</h1><h2 id="关于主站"><a href="#关于主站" class="headerlink" title="关于主站"></a>关于主站</h2><p><strong>网站基本信息</strong></p><p>主站使用的是<code>Github + Hexo + 腾讯云CDN</code>的部署模式，最大程度保证访问速度。</p><p>分享文件全部采用依靠Onedrive API的Cloudreve，毕竟没有限速，文件大小限制也少。</p><p>目前的加载速度已经经过很多优化，如果有加载缓慢的情况请联系站长。</p><p><strong>网站内容</strong></p><p>主要是分享知识。我个人认为知识应当没有门槛，做好知识分级，给不同阶段的朋友们都能带来收获。</p><p>目前个人技术有限，仅仅会写一些入门知识分享。</p><p>希望自己能够慢慢变强吧。</p><p>欢迎各位朋友能在思考之后积极的和我探讨交流。</p><h2 id="关于分站"><a href="#关于分站" class="headerlink" title="关于分站"></a>关于分站</h2><p>注意，分站仅仅是同步主站点的文章更新，有些信息可能没有及时更新。</p><p>当然，你在分站的评论博主也是能够看见的。</p><blockquote><p>本站将以往的配置的主题作为分站部署<code>https://blog.sakurasep.site/主题名称</code>下，通过导航栏可以直接访问</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Hexo_About/1.jpg" alt="about_me"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Hexo_About/2.jpg" alt="about_me"></p><blockquote><p>你可以选择你所喜欢的博客主题进行文章阅读，希望带给你最好的阅读体验。</p></blockquote><h2 id="关于评论"><a href="#关于评论" class="headerlink" title="关于评论"></a>关于评论</h2><ol><li>本站在主站的评论系统已经更换为Twikoo，更棒的评论系统，欢迎大家使用！</li><li>本站的评论邮件提醒已经恢复，你在主站的评论收到回复后将可以接收邮件提醒。</li></ol><h2 id="关于更新"><a href="#关于更新" class="headerlink" title="关于更新"></a>关于更新</h2><p>首先可以确定的是，我会首先保证质量，目前我的技术水平不足，很多地方做的不是很好，还希望各位能提出修改建议，我也会积极进行修改。</p><p>目前将学业与更新做个平衡的话，基本确定是月更，一篇or两篇，得看我的空闲时间。</p><p>目前的规划是</p><ul><li>旧文章的维护</li><li>稳定两个系列的更新（应用使用指南 + 学习笔记）</li></ul><p>以下是更新平台</p><ol><li>首发更新 ：</li></ol><ul><li><a href="https://blog.sakurasep.site/">上杉九月的博客</a></li><li>上杉九月的知识屋（微信公众号）</li></ul><ol start="2"><li>其他平台 ：</li></ol><ul><li>酷安数码 </li><li>哔哩哔哩</li><li>微博</li></ul><h1 id="博客日志"><a href="#博客日志" class="headerlink" title="博客日志"></a>博客日志</h1><h2 id="更新预告"><a href="#更新预告" class="headerlink" title="更新预告"></a>更新预告</h2><h3 id="老文章修改计划"><a href="#老文章修改计划" class="headerlink" title="老文章修改计划"></a>老文章修改计划</h3><h4 id="1-《应用使用指南》存储空间隔离-第1期"><a href="#1-《应用使用指南》存储空间隔离-第1期" class="headerlink" title="1. 《应用使用指南》存储空间隔离_第1期"></a>1. <a href="">《应用使用指南》存储空间隔离_第1期</a></h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/IndexImg.png"></p><h4 id="2-《应用使用指南》Perfdog-第2期"><a href="#2-《应用使用指南》Perfdog-第2期" class="headerlink" title="2. 《应用使用指南》Perfdog_第2期"></a>2. <a href="">《应用使用指南》Perfdog_第2期</a></h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/IndexImg.png"></p><h3 id="新系列"><a href="#新系列" class="headerlink" title="新系列"></a>新系列</h3><h4 id="1-《Hexo零基础教程》使用Hexo完成博客的基本搭建-第1期"><a href="#1-《Hexo零基础教程》使用Hexo完成博客的基本搭建-第1期" class="headerlink" title="1. 《Hexo零基础教程》使用Hexo完成博客的基本搭建_第1期"></a>1. <a href="">《Hexo零基础教程》使用Hexo完成博客的基本搭建_第1期</a></h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Hexo/IndexImg.png"></p><h3 id="恢复更新系列"><a href="#恢复更新系列" class="headerlink" title="恢复更新系列"></a>恢复更新系列</h3><h4 id="1-《应用使用指南》FilterBox-第3期"><a href="#1-《应用使用指南》FilterBox-第3期" class="headerlink" title="1. 《应用使用指南》FilterBox_第3期"></a>1. <a href="">《应用使用指南》FilterBox_第3期</a></h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/FilterBox/IndexImg.jpg"></p><hr><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt="about_me"></p>]]></content>
    
    
    <categories>
      
      <category>公告</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>日志</tag>
      
      <tag>公告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《C语言学习笔记》</title>
    <link href="/Fluid/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/Fluid/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h1><blockquote><p>作者：上杉九月</p><p>排版与发布：上杉九月</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>记录一下程序开发实训课程的题解。</p><p>我是用的IDE为VsCode，所以在代码中会出现<code>system(&quot;pause&quot;);</code></p></blockquote><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h3 id="P1000-素数判断"><a href="#P1000-素数判断" class="headerlink" title="P1000. 素数判断"></a>P1000. 素数判断</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>编写一个函数isprime(n).判断整数n是否为素数.编写程序使用此函数,当输入一个整数时,对它进行判断,当为素数时,输出1.否则,输出0.</p><h4 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>输入一个整数</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出判断结果0或1</p><h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs">45<br></code></pre></td></tr></table></figure><h5 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">0<br></code></pre></td></tr></table></figure><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>本题十分简单。</p><ul><li>使用<code>temp</code>变量存储<code>num</code>的因数个数</li><li>使用for从2循环到<code>num</code>，若出现<code>num</code>整除<code>i</code>时使<code>temp++</code></li><li>最后使用if判断，<code>temp</code>为0则说明只有1和它本身两个因数，故输出1；<code>temp &gt; 0</code>则说明有其他的因数，故输出0</li></ul><h5 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> temp;<br><span class="hljs-type">int</span> pr[<span class="hljs-number">10000000</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isprime</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> temp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; num; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(num % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            temp++;<br>        &#125;<br>    &#125;<br>        <span class="hljs-keyword">if</span>(temp == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> num;<br>    cin&gt;&gt;num;<br>    cout&lt;&lt;<span class="hljs-built_in">isprime</span>(num);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="P1001-直角三角形"><a href="#P1001-直角三角形" class="headerlink" title="P1001. 直角三角形"></a>P1001. 直角三角形</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>任意输入三条边的边长（实数类型），判断能否组成三角形，如果不可以组成三角形，程序输出“It is not a triangle”；如果可以组成三角形，进而判断该三角形是否是直角三角形，如果是直角三角形，程序输出“It is a right triangle”，否则输出“It is not a right triangle”。</p><h4 id="输入输出格式-1"><a href="#输入输出格式-1" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h5><p>三条边的边长</p><h5 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h5><p>判断结果</p><h4 id="输入输出样例-1"><a href="#输入输出样例-1" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-1"><a href="#输入样例-1-1" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><p>6 8 10</p><h5 id="输出样例-1-1"><a href="#输出样例-1-1" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><p>It is a right triangle</p><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><ul><li>首先为了方便处理数据，先将三条边长按照从小到大的顺序排列。排序算法随意，这里为了省事直接sort</li><li>然后<code>Judge_Triangle</code>对数据预处理，筛选出来是否为三角形。若是，则进入下一个函数<code>Right_Triangle</code>，若不是，直接输出<strong>It is not a triangle</strong></li><li>判断直角三角形也很简单，勾股定理即可</li></ul><h5 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[<span class="hljs-number">3</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Right_Triangle</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>] * a[<span class="hljs-number">0</span>] + a[<span class="hljs-number">1</span>] * a[<span class="hljs-number">1</span>] == a[<span class="hljs-number">2</span>] * a[<span class="hljs-number">2</span>])<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;It is a right triangle&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;It is not a right triangle&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Judge_Triangle</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>] + a[<span class="hljs-number">1</span>] &gt; a[<span class="hljs-number">2</span>])<br>    &#123;<br>        <span class="hljs-built_in">Right_Triangle</span>();<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;It is not a triangle&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a,a+<span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">Judge_Triangle</span>();<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="P1002-直角三角形，求最小余弦值"><a href="#P1002-直角三角形，求最小余弦值" class="headerlink" title="P1002. 直角三角形，求最小余弦值"></a>P1002. 直角三角形，求最小余弦值</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>任意输入三条边的边长（整数类型），判断能否组成三角形，如果不可以组成三角形，程序输出“It is not a triangle”；如果可以组成三角形，进而判断该三角形是否是直角三角形，如果不是直角三角形，程序输出“It is not a right triangle”，否则输出最小余弦值的最简分式。比如三边分别是6、8、10时，最小的余弦值是6&#x2F;10，那么输出的结果应该是3&#x2F;5。</p><h4 id="输入输出格式-2"><a href="#输入输出格式-2" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h5><p>三条边的边长</p><h5 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h5><p>最小余弦值的最简分式</p><h4 id="输入输出样例-2"><a href="#输入输出样例-2" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-2"><a href="#输入样例-1-2" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">6 </span><span class="hljs-number">8</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h5 id="输出样例-1-2"><a href="#输出样例-1-2" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>/<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><ul><li>本题是在上题的基础上增加了分式化简，因为已经对边长进行了排序，故余弦值一定是<code>a[0] / a[2]</code></li><li>化简就是找两者的最大公因式，使用<code>temp</code>存储，然后使用for遍历较小的边</li><li>因为<code>temp</code>这里初始为0，所以<code>temp</code>为0说明两者没有公因式，直接输出</li></ul><h5 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[<span class="hljs-number">3</span>];<br><span class="hljs-type">int</span> temp;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GCD</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= a[<span class="hljs-number">0</span>]; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>] % i == <span class="hljs-number">0</span> &amp;&amp; a[<span class="hljs-number">2</span>] % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            temp = i;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Cos_Triangle</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">GCD</span>();<br>    <span class="hljs-keyword">if</span>(temp == <span class="hljs-number">0</span>)<br>    &#123;<br>        cout&lt;&lt;a[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-string">&quot;/&quot;</span>&lt;&lt;a[<span class="hljs-number">2</span>];<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout&lt;&lt;(a[<span class="hljs-number">0</span>] / temp)&lt;&lt;<span class="hljs-string">&quot;/&quot;</span>&lt;&lt;(a[<span class="hljs-number">2</span>] / temp);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Right_Triangle</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>] * a[<span class="hljs-number">0</span>] + a[<span class="hljs-number">1</span>] * a[<span class="hljs-number">1</span>] == a[<span class="hljs-number">2</span>] * a[<span class="hljs-number">2</span>])<br>    &#123;<br>        <span class="hljs-built_in">Cos_Triangle</span>();<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;It is not a right triangle&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Judge_Triangle</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>] + a[<span class="hljs-number">1</span>] &gt; a[<span class="hljs-number">2</span>])<br>    &#123;<br>        <span class="hljs-built_in">Right_Triangle</span>();<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;It is not a triangle&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a,a+<span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">Judge_Triangle</span>();<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="P1003-求三角形面积"><a href="#P1003-求三角形面积" class="headerlink" title="P1003. 求三角形面积"></a>P1003. 求三角形面积</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>若已知三角形三个边的长度分别为a,b,c（并假设三个边长度的单位一致，在本编程题中忽略其单位），则可以利用公式 $S &#x3D; \sqrt{s(s - a)(s - b)(s - c)}$，然后利用上述公式计算面积并输出，结果小数点后保留3位有效数字。</p><h4 id="输入输出格式-3"><a href="#输入输出格式-3" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h5><p>从控制台输入三个整数表示三角形三个边的长度，以空格分隔三个整数。</p><h5 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h5><p>向控制台输出求得的三角形的面积，小数点后保留三位有效数字。</p><h4 id="输入输出样例-3"><a href="#输入输出样例-3" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-3"><a href="#输入样例-1-3" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">4</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h5 id="输出样例-1-3"><a href="#输出样例-1-3" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">7</span>.<span class="hljs-number">937</span><br></code></pre></td></tr></table></figure><h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h5><ul><li>有公式$S &#x3D; \sqrt{s(s - a)(s - b)(s - c)}$，直接根据公式写代码</li><li>使用<code>.3f</code>保留三位小数</li></ul><h5 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    <span class="hljs-type">float</span> s, area;<br>    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>    s = (a + b + c) / <span class="hljs-number">2</span>;<br>    area = <span class="hljs-built_in">sqrt</span>((s * (s - a) * (s - b) * (s - c)));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3f&quot;</span>, area);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="P1004-整数各位数求和"><a href="#P1004-整数各位数求和" class="headerlink" title="P1004. 整数各位数求和"></a>P1004. 整数各位数求和</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p> 编写一个函数sum(i),将输入的整形参数i的各位求和，返回求和结果。在main()函数中测试此函数，从键盘输入整数n（n在区间[1,20]），然后再输入n个非负整数，对于每一个非负整数调用sum函数求各位数和，将结果输出到屏幕。</p><h4 id="输入输出格式-4"><a href="#输入输出格式-4" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h5><p>从键盘输入一个正整数n，然后有n行输入，分别表示n个非负整数。</p><h5 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h5><p>在屏幕上分别输出n行，第i行依次对应第i个非负整数的各位之和。</p><h4 id="输入输出样例-4"><a href="#输入输出样例-4" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-4"><a href="#输入样例-1-4" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">4<br>234567<br>0<br>999999<br>000432<br></code></pre></td></tr></table></figure><h5 id="输出样例-1-4"><a href="#输出样例-1-4" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">27<br>0<br>54<br>9<br></code></pre></td></tr></table></figure><h5 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">整数234567、0、999999和000432各位之和（个位、十位、百位<span class="hljs-symbol">&amp;hellip;</span><span class="hljs-symbol">&amp;hellip;</span>相加）分别为：27、0、54和9，故在屏幕上打印输出：<br>27<br>0<br>54<br>9<br></code></pre></td></tr></table></figure><h4 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h5><ul><li>使用变量<code>temp</code>存储结果，对于保存在数组里的数据，%10取最后一位，&#x2F;10舍去最后一位，当num舍到个位数，直接加到<code>temp</code>，输出结果</li></ul><h5 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Sum_Number</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> temp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(num &gt; <span class="hljs-number">10</span>)<br>    &#123;<br>        temp += num % <span class="hljs-number">10</span>;<br>        num /= <span class="hljs-number">10</span>;<br>    &#125;<br>    temp += num;<br>    cout&lt;&lt;temp&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> a[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">Sum_Number</span>(a[i]);<br>    &#125;  <br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="P1005-玫瑰花数"><a href="#P1005-玫瑰花数" class="headerlink" title="P1005. 玫瑰花数"></a>P1005. 玫瑰花数</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>如果一个四位数各位数字的四次方之和恰好等于该数本身，那么这个四位数就是一个玫瑰花数，例如：</p><p>$1634 &#x3D; 1^4 + 6^4 + 3^4 + 4^4 &#x3D; 1 + 1296 + 81 + 256$        </p><p>写一个函数，判断某一个四位数是不是玫瑰花数，如果是玫瑰花数返回1，否则返回0。并在主函数中调用该函数，最终输出所有的玫瑰花数。                </p><h4 id="输入输出格式-5"><a href="#输入输出格式-5" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h5><p>没有输入</p><h5 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h5><p>所有的四位玫瑰花数。（每行中仅显示一个玫瑰花数）</p><h4 id="输入输出样例-5"><a href="#输入输出样例-5" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><p>无</p><h4 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h5><ul><li>该题枚举即可，从1000开始枚举到10000，a数组分别存个十百千四位。</li><li><code>num</code>将每一位四次方的结果存起来，和此时枚举的<code>i</code>作比较，若是，则输出。</li></ul><h5 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span><span class="hljs-comment">//pow(10, x)</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">4</span>];<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1000</span>; i &lt; <span class="hljs-number">10000</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> temp = i;<br>        a[<span class="hljs-number">0</span>] = temp % <span class="hljs-number">10</span>;<br>        temp /= <span class="hljs-number">10</span>;<br>        a[<span class="hljs-number">1</span>] = temp % <span class="hljs-number">10</span>;<br>        temp /= <span class="hljs-number">10</span>;<br>        a[<span class="hljs-number">2</span>] = temp % <span class="hljs-number">10</span>;<br>        a[<span class="hljs-number">3</span>] = temp / <span class="hljs-number">10</span>;<br>        num = <span class="hljs-built_in">pow</span>(a[<span class="hljs-number">0</span>], <span class="hljs-number">4</span>) + <span class="hljs-built_in">pow</span>(a[<span class="hljs-number">1</span>], <span class="hljs-number">4</span>) + <span class="hljs-built_in">pow</span>(a[<span class="hljs-number">2</span>], <span class="hljs-number">4</span>) + <span class="hljs-built_in">pow</span>(a[<span class="hljs-number">3</span>], <span class="hljs-number">4</span>);<br>        <span class="hljs-keyword">if</span>(num == i)<br>        &#123;<br>            cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="P1006-旋转魔方阵"><a href="#P1006-旋转魔方阵" class="headerlink" title="P1006. 旋转魔方阵"></a>P1006. 旋转魔方阵</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入一个自然数Ｎ（N属于2到15），要求输出如下的魔方阵，即边长为N<em>N，元素取值为1至N</em>N，1在左上角，呈顺时针方向依次放置各元素。<br> N&#x3D;3时：<br>  1  2  3<br>  8  9  4<br>  7  6  5</p><h4 id="输入输出格式-6"><a href="#输入输出格式-6" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h5><p>从标准输入读取一个整数N。</p><h5 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h5><p>向标准输出打印结果。输出符合要求的方阵，每个数字占5个字符宽度，向右对齐，在每一行末均输出一个回车符。</p><h4 id="输入输出样例-6"><a href="#输入输出样例-6" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-5"><a href="#输入样例-1-5" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h5 id="输出样例-1-5"><a href="#输出样例-1-5" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"> <span class="hljs-attribute">1</span>    <span class="hljs-number">2</span>    <span class="hljs-number">3</span>    <span class="hljs-number">4</span><br><span class="hljs-attribute">12</span>   <span class="hljs-number">13</span>   <span class="hljs-number">14</span>    <span class="hljs-number">5</span><br><span class="hljs-attribute">11</span>   <span class="hljs-number">16</span>   <span class="hljs-number">15</span>    <span class="hljs-number">6</span><br><span class="hljs-attribute">10</span>    <span class="hljs-number">9</span>    <span class="hljs-number">8</span>    <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h4 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h5><ul><li>使用模拟算法，<code>x</code>和<code>y</code>为坐标，使用for从1到<code>num</code>循环</li><li>明确四个方向的填数代码，注意两点。一是坐标<code>x</code>和<code>y</code>需要先改变，也就是<code>++x ++y</code>，同时填数变量<code>tmp</code>也需要先增加。（因为我们在填数时始终是在找下一个位置）</li><li>本题存在规律（代码结尾处）。先进行向右的移动，然后就是两次循环，按照下左上右的规律。</li><li>本题和接下来几个题使用的动态二维数组定义代码是通用的，可以直接当作模板套用</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">   <span class="hljs-type">int</span> **element = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">int</span> size;<br>cin&gt;&gt;size;<br><br>   element = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span> *[size];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>   &#123;<br>       element[i] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span> [size];<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="AC代码-6"><a href="#AC代码-6" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> x, y, tmp;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 定义动态二维数组</span><br>    <span class="hljs-type">int</span> **element = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> size;<br>    cin&gt;&gt;size;<br>    <span class="hljs-type">int</span> num = size;<br><br>    element = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span> *[size];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        element[i] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span> [size];<br>    &#125;<br><br>    <span class="hljs-comment">// 核心代码</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = num; j &gt; <span class="hljs-number">0</span>; j--)<span class="hljs-comment">//right</span><br>    &#123;<br>        element[x][y++] = ++tmp;<br>    &#125;<br>    <br>    y--;<br><br>    <span class="hljs-keyword">while</span>(tmp &lt; size * size)<br>    &#123;<br>        num--;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = num; j &gt; <span class="hljs-number">0</span>; j--)<span class="hljs-comment">//down</span><br>        &#123;<br>            element[++x][y] = ++tmp;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = num; j &gt; <span class="hljs-number">0</span>; j--)<span class="hljs-comment">//left</span><br>        &#123;<br>            element[x][--y] = ++tmp;<br>        &#125;<br>        num--;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = num; j &gt; <span class="hljs-number">0</span>; j--)<span class="hljs-comment">//up</span><br>        &#123;<br>            element[--x][y] = ++tmp;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = num; j &gt; <span class="hljs-number">0</span>; j--)<span class="hljs-comment">//right</span><br>        &#123;<br>            element[x][++y] = ++tmp;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 输出</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; size; i++)<br>    &#123;<br>        cout&lt;&lt;endl;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; size; j++)<br>        &#123;<br>            <br>            cout&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">5</span>)&lt;&lt;element[i][j];<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 面板停留</span><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 规律</span><br><span class="hljs-comment">1  2  3  4</span><br><span class="hljs-comment">12 13 14 5</span><br><span class="hljs-comment">11 16 15 6</span><br><span class="hljs-comment">10 9  8  7</span><br><span class="hljs-comment">3 3 3 2 2 1 1</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="P1007-折叠方阵"><a href="#P1007-折叠方阵" class="headerlink" title="P1007. 折叠方阵"></a>P1007. 折叠方阵</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个起始数（大于等于1，小于等于20）和方阵的阶数（大于等于1，小于等于20），编程求得并输出该折叠方阵。一个起始数为10，4阶折叠方阵为：</p><p> 10  11  14  19</p><p> 13  12  15  20</p><p> 18  17  16  21</p><p> 25  24  23  22</p><h4 id="输入输出格式-7"><a href="#输入输出格式-7" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h5><p>从标准输入中输入两个正整数分别表示起始数和方阵的阶数，以一个空格分隔这两个数字。</p><h5 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h5><p>将生成的折叠方阵按行输出到标准输出上，每个数字占4个字符的宽度，靠右对齐，各数字之间不再有空格分隔，每行末尾有回车换行。</p><h4 id="输入输出样例-7"><a href="#输入输出样例-7" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-6"><a href="#输入样例-1-6" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h5 id="输出样例-1-6"><a href="#输出样例-1-6" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"> <span class="hljs-attribute">3</span>   <span class="hljs-number">4</span>   <span class="hljs-number">7</span>  <span class="hljs-number">12</span>  <span class="hljs-number">19</span><br> <span class="hljs-attribute">6</span>   <span class="hljs-number">5</span>   <span class="hljs-number">8</span>  <span class="hljs-number">13</span>  <span class="hljs-number">20</span><br><span class="hljs-attribute">11</span>  <span class="hljs-number">10</span>   <span class="hljs-number">9</span>  <span class="hljs-number">14</span>  <span class="hljs-number">21</span><br><span class="hljs-attribute">18</span>  <span class="hljs-number">17</span>  <span class="hljs-number">16</span>  <span class="hljs-number">15</span>  <span class="hljs-number">22</span><br><span class="hljs-attribute">27</span>  <span class="hljs-number">26</span>  <span class="hljs-number">25</span>  <span class="hljs-number">24</span>  <span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><h4 id="样例说明-1"><a href="#样例说明-1" class="headerlink" title="样例说明"></a>样例说明</h4><p>样例输入的起始数为3，方阵的阶数为5，按行输出生成的折叠方阵，每个数字占4个字符的宽度。</p><p>提示：输出时为了使每个数字占4个字符宽度，c程序可以使用：printf(“%4d”,……)进行控制输出。</p><h4 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h5><ul><li>本题依然有规律，请把方阵分解为朝向左的L。同时把第一行作为每一次循环的开始。</li><li>L的大小是和列号相同。</li><li>核心代码为，向下的循环和向左的循环。</li></ul><h5 id="AC代码-7"><a href="#AC代码-7" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> x, y;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    <span class="hljs-comment">// 定义动态二维数组</span><br>    <span class="hljs-type">int</span> **element = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> start;<br>    <span class="hljs-type">int</span> size;<br>    cin&gt;&gt;start&gt;&gt;size;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> tmp = start;<br><br>    element = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span> *[size];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        element[i] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span> [size];<br>    &#125;<br>    <br> <br>    <span class="hljs-comment">// 核心代码</span><br><br>    element[x][y] = tmp;<br><br>    <span class="hljs-keyword">for</span>(num = <span class="hljs-number">1</span>; num &lt; size; num++)<br>    &#123;<br>        <span class="hljs-comment">//第一行</span><br>        x = <span class="hljs-number">0</span>;<br>        y = num;<br>        <span class="hljs-keyword">while</span>(tmp &lt;= num * num - <span class="hljs-number">1</span> + start)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= num + <span class="hljs-number">1</span>; j++)<span class="hljs-comment">//down</span><br>            &#123;<br>                element[x++][y] = ++tmp;<br>            &#125;<br>            x--;<span class="hljs-comment">//纠正X轴</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= num; j++)<span class="hljs-comment">//left</span><br>            &#123;<br>                element[x][--y] = ++tmp;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br><br>    <br>    <span class="hljs-comment">// 输出</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; size; i++)<br>    &#123;<br>        cout&lt;&lt;endl;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; size; j++)<br>        &#123;<br>            <br>            cout&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">4</span>)&lt;&lt;element[i][j];<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 面板停留</span><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="P1008-方阵乘法运算"><a href="#P1008-方阵乘法运算" class="headerlink" title="P1008. 方阵乘法运算"></a>P1008. 方阵乘法运算</h3><h4 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h4><p>从键盘输入一个正整数n（n属于[1,10]），表示进行乘法运算的两个整形方阵的阶。然后分别输入两个整形方阵A和B，计算A*B后将结果输出到屏幕。</p><h4 id="输入输出格式-8"><a href="#输入输出格式-8" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-8"><a href="#输入格式-8" class="headerlink" title="输入格式"></a>输入格式</h5><p>从键盘输入一个正整数，然后再输入两个整形方阵。</p><h5 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式"></a>输出格式</h5><p>在屏幕上输出两个整形方阵的乘积。</p><h4 id="输入输出样例-8"><a href="#输入输出样例-8" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-7"><a href="#输入样例-1-7" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">3</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">6</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">9</span> <span class="hljs-number">9</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">6</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">5</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h5 id="输出样例-1-7"><a href="#输出样例-1-7" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><p>########20########20########20<br>########60########60########60<br>#######120#######120#######120</p><h4 id="样例说明-2"><a href="#样例说明-2" class="headerlink" title="样例说明"></a>样例说明</h4><p>首先输入正整数3,说明接下来要输入的方阵是3*3的。因为<br>1 1 1     9 9 9     20 20 20<br>3 3 3  *  6 6 6  &#x3D;  60 60 60<br>6 6 6    5 5 5     120 120 120<br>所以在屏幕上打印：<br>########20########20########20<br>########60########60########60<br>#######120#######120#######120</p><p>注：”#”代表空格，每个输出的整数占10位，不足10位在整数的左边用空格补足。</p><h4 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h5><ul><li><code>element[]</code>为存储第一个矩阵,<code>element_02[]</code>为存储第二个矩阵,<code>element_03[]</code>为输出结果矩阵</li><li><a href="https://baike.baidu.com/item/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/5446029?fr=aladdin">矩阵乘法_百度百科 (baidu.com)</a></li><li>只要是看懂了矩阵的乘法运算规律，通过一一对应，本题便能做出来。</li></ul><h5 id="AC代码-8"><a href="#AC代码-8" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> x, y;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    <span class="hljs-comment">// 定义动态二维数组</span><br>    <span class="hljs-type">int</span> **element = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> **element_02 = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> **element_03 = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> size;<br>    cin&gt;&gt;size;<br><br>    element = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span> *[size];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        element[i] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span> [size];<br>    &#125;<br><br>    element_02 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span> *[size];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        element_02[i] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span> [size];<br>    &#125;<br><br>    element_03 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span> *[size];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        element_03[i] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span> [size];<br>    &#125;<br><br>    <span class="hljs-comment">// 输入数据</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; size; j++)<br>        &#123;<br>            cin&gt;&gt;element[i][j];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; size; j++)<br>        &#123;<br>            cin&gt;&gt;element_02[i][j];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 核心代码</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; size; j++)<br>        &#123;<br>            element_03[i][j] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; size; j++)<br>        &#123;<br>            <span class="hljs-type">int</span> num = size;<br>            <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(num &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                element_03[i][j] += element[i][y] * element_02[y][j];<br>                y++;<br>                num--;<br>            &#125;   <br>        &#125;<br>    &#125;<br><br><br><br>    <span class="hljs-comment">// 结果输出</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; size; j++)<br>        &#123;<br>            cout&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">10</span>)&lt;&lt;element_03[i][j];<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br><br>    <span class="hljs-comment">// VSCode</span><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">3</span><br><span class="hljs-comment">1 1 1 9 9 9</span><br><span class="hljs-comment">3 3 3 6 6 6</span><br><span class="hljs-comment">6 6 6 5 5 5</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="P1009-N阶魔方阵"><a href="#P1009-N阶魔方阵" class="headerlink" title="P1009. N阶魔方阵"></a>P1009. N阶魔方阵</h3><h4 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h4><p>魔方阵指一个A是NxN矩阵（在本题中N仅为奇数，且N&gt;1），以自然数1，2， 。。。 N2为元素进行填充，每个位置上分别放置一个元素，使每行、每列以及主、副对角线上的元素之和都相等。<br>如3x3魔方阵，图在每行、每列、主对角线、副对角线上元素之和均为15：<br>8 1 6<br>3 5 7<br>4 9 2<br>奇数阶魔方阵的生成算法如下，初始矩阵A为空，从1开始依据下面的规则依次放置各个自然数（注意在下面的叙述中各元素行、列下标均以1-N计数）：<br>\1. 将1放在第一行正中的位置，即A[1, (j+1)&#x2F;2]；<br>\2. 设最后放置的元素是A[i, j]，则将下一个元素放在最后一个插入位置的右上方，即A[i-1, j+1]。但如果该位置已超出方阵的上边界（即如果i&lt;0），则新位置取该列的最下一个位置，即A[N, j+1]；如果该位置已超出方阵的右边界，取新位置取该行的最左一个位置，即A[i-1, 1]。<br>\3. 若最近一个插入元素为N的整倍数，则新位置取最后插入元素下面的位置，即A[i+1, j]。<br>输入一个奇数N，打印对应的N阶魔方阵。</p><h4 id="输入输出格式-9"><a href="#输入输出格式-9" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-9"><a href="#输入格式-9" class="headerlink" title="输入格式"></a>输入格式</h5><p>控制台输入一奇数N。</p><h5 id="输出格式-9"><a href="#输出格式-9" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出一个N*N的魔方阵，其中每个数字占4位字符的宽度，向右对齐。</p><h4 id="输入输出样例-9"><a href="#输入输出样例-9" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-8"><a href="#输入样例-1-8" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">5<br></code></pre></td></tr></table></figure><h5 id="输出样例-1-8"><a href="#输出样例-1-8" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">17</span>  <span class="hljs-number">24</span>   <span class="hljs-number">1</span>   <span class="hljs-number">8</span>  <span class="hljs-number">15</span><br><span class="hljs-attribute">23</span>   <span class="hljs-number">5</span>   <span class="hljs-number">7</span>  <span class="hljs-number">14</span>  <span class="hljs-number">16</span><br> <span class="hljs-attribute">4</span>   <span class="hljs-number">6</span>  <span class="hljs-number">13</span>  <span class="hljs-number">20</span>  <span class="hljs-number">22</span><br><span class="hljs-attribute">10</span>  <span class="hljs-number">12</span>  <span class="hljs-number">19</span>  <span class="hljs-number">21</span>   <span class="hljs-number">3</span><br><span class="hljs-attribute">11</span>  <span class="hljs-number">18</span>  <span class="hljs-number">25</span>   <span class="hljs-number">2</span>   <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h4 id="样例说明-3"><a href="#样例说明-3" class="headerlink" title="样例说明"></a>样例说明</h4><p>输入奇数5，输出5阶魔方阵。</p><h4 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h5><ul><li>本题主要是考察限定规则，题目中每一次新的位置都是在原来位置的右上方，此时你需要考虑两种情况：一是超出数组的边界，一是右上角已经存在数据。</li><li>本题代码使用了<code>maps</code>数组来标记数据的填充，在每一次填数操作后都使得该位置的<code>maps</code>数组为1。</li><li>判断情况有以下几种。<ul><li>超右边界但是不超上边界</li><li>超上边界但是不超右边界</li><li>既超上边界也超右边界</li><li>既不超上边界也不超右边界</li></ul></li></ul><h5 id="AC代码-9"><a href="#AC代码-9" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-comment">// 核心代码</span><br>    <span class="hljs-type">int</span> size;<br>    cin&gt;&gt;size;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = (size / <span class="hljs-number">2</span>);<br><br>    <span class="hljs-comment">// 定义动态二维数组</span><br>    <span class="hljs-type">int</span> **element = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> **maps = <span class="hljs-literal">NULL</span>;<br><br>    element = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span> *[size];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        element[i] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span> [size];<br>    &#125;<br><br>    maps = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span> *[size];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        maps[i] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span> [size];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; size; j++)<br>        &#123;<br>            element[i][j] = <span class="hljs-number">0</span>;<br>            maps[i][j] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    element[x][y] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num = <span class="hljs-number">2</span>; num &lt;= size * size; num++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>((num - <span class="hljs-number">1</span>) % size == <span class="hljs-number">0</span>)<br>        &#123;   <br>            element[++x][y] = num;<br>            maps[x][y] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(x - <span class="hljs-number">1</span> &lt; <span class="hljs-number">0</span> &amp;&amp; y + <span class="hljs-number">1</span> &lt; size &amp;&amp; maps[size - <span class="hljs-number">1</span>][++y] == <span class="hljs-number">0</span>)<span class="hljs-comment">// 超上边界但不超右边界</span><br>        &#123;<br>            x = size - <span class="hljs-number">1</span>;<br>            element[x][y] = num;<br>            maps[x][y] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(y + <span class="hljs-number">1</span> &gt; size - <span class="hljs-number">1</span> &amp;&amp; x - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; maps[--x][<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>)<span class="hljs-comment">// 超右边界但不超上边界</span><br>        &#123;<br>            y = <span class="hljs-number">0</span>;<br>            element[x][y] = num;<br>            maps[x][y] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(x - <span class="hljs-number">1</span> &lt; <span class="hljs-number">0</span> &amp;&amp; y + <span class="hljs-number">1</span> &gt; size - <span class="hljs-number">1</span> &amp;&amp; maps[size - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>)<span class="hljs-comment">// 既超上边界也超右边界</span><br>        &#123;<br>            x = size - <span class="hljs-number">1</span>;y = <span class="hljs-number">0</span>;<br>            element[x][y] = num;<br>            maps[x][y] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(x - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; y + <span class="hljs-number">1</span> &lt; size &amp;&amp; maps[--x][++y] == <span class="hljs-number">0</span>)<br>        &#123;<br>            element[x][y] = num;<br>            maps[x][y] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 输出</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; size; j++)<br>        &#123;<br>            cout&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">4</span>)&lt;&lt;element[i][j];<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="P1010-完美数"><a href="#P1010-完美数" class="headerlink" title="P1010. 完美数"></a>P1010. 完美数</h3><h4 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h4><p>所有真约数（除本身之外的正约数）的和等于它本身的正整数叫做完美数，又叫做完全数或完备数。当所有真约数（除本身之外的正约数）的和等于它本身的正整数叫做亏数；相反情况时，叫做盈数。</p><p>比如“4”这个数，它的真约数有1，2，其和是3，3比4本身小，这样的自然数就叫做亏数（又叫做缺数），类似的还有5，7，8等等。比如“12”这个数，它真约数有1，2，3，4，6，其和是16，16比12本身大，这样的自然数就叫做盈数（又叫做丰数，或过剩数或富裕数），类似的还有12，18，20等等。</p><p>完美数就是既不盈余，又不亏欠的自然数，比如“6”这个数，它真约数有1，2，3，其和是1+2+3&#x3D;6，刚好等于6本身。</p><p>要求用户从键盘上输入任意一个自然数，判断该数是盈数、亏数还是完美数。如果该数是亏数，输出“Deficit”；如果该数是盈数，输出“Surplus”；如果该数 是完美数，则输出“Perfect” 。</p><h4 id="输入输出格式-10"><a href="#输入输出格式-10" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-10"><a href="#输入格式-10" class="headerlink" title="输入格式"></a>输入格式</h5><p>一个自然数。</p><h5 id="输出格式-10"><a href="#输出格式-10" class="headerlink" title="输出格式"></a>输出格式</h5><p>如果该数是亏数，输出“Deficit”；如果该数是盈数，输出“Surplus”；如果该数是完美数，输出“Perfect”。</p><h4 id="输入输出样例-10"><a href="#输入输出样例-10" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-9"><a href="#输入样例-1-9" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">6<br></code></pre></td></tr></table></figure><h5 id="输出样例-1-9"><a href="#输出样例-1-9" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Perfect</span><br></code></pre></td></tr></table></figure><h4 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h5><ul><li>本题实际上是找因数的改动版本。先找到输入数的因数，然后将所有因数（除它本身以外）相加。</li></ul><h5 id="AC代码-10"><a href="#AC代码-10" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> num;<br>    cin&gt;&gt;num;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">//Core</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; num; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(num % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            ans += i;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(ans &gt; num)<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Surplus&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ans &lt; num)<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Deficit&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Perfect&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="P1011-一元二次方程的根"><a href="#P1011-一元二次方程的根" class="headerlink" title="P1011. 一元二次方程的根"></a>P1011. 一元二次方程的根</h3><h4 id="题目描述（不考虑虚根）"><a href="#题目描述（不考虑虚根）" class="headerlink" title="题目描述（不考虑虚根）"></a>题目描述（不考虑虚根）</h4><p>在实数范围内求方程$ax^2+bx+c&#x3D;0$的根。方程的系数$a,b,c$由用户从键盘上输入。</p><h4 id="输入输出格式-11"><a href="#输入输出格式-11" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式 #1"></a>输入格式 #1</h5><p>方程的系数$a,b,c$（假设是整型数据）。</p><h5 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式 #1"></a>输出格式 #1</h5><p>实数范围内求方程的根，如果存在实数根，结果保留两位小数且$x1 \ge x2$。当有两个实根时，要求先输出实根$x&#x3D;[-b+\sqrt{(b2-4ac)}]&#x2F;2a$，空格后再输出实根$x&#x3D;[-b-\sqrt{(b2-4ac)}]&#x2F;2a$；当有两个相同的实根时，仅输出一个实根$x&#x3D;[-b+\sqrt{(b2-4ac)}]&#x2F;2a$或$x&#x3D;[-b-\sqrt{(b2-4ac)}]&#x2F;2a$即可；当没有实根时，输出”NONE”。</p><h4 id="输入输出样例-11"><a href="#输入输出样例-11" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-10"><a href="#输入样例-1-10" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">8</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h5 id="输出样例-1-10"><a href="#输出样例-1-10" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-string">-0</span>.54 <span class="hljs-string">-7</span>.46<br></code></pre></td></tr></table></figure><h4 id="题解-11"><a href="#题解-11" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h5><ul><li>注意Δ的判断即可，本题没有难度。</li></ul><h5 id="AC代码-11"><a href="#AC代码-11" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    <span class="hljs-type">double</span> ans1, ans2;<br>    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br><br>    <span class="hljs-keyword">if</span>(b * b - <span class="hljs-number">4</span> * a * c &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;NONE&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    ans1 = (-b + <span class="hljs-built_in">sqrt</span>(b * b - <span class="hljs-number">4</span> * a * c)) / (<span class="hljs-number">2</span> * a);<br>    ans2 = (-b - <span class="hljs-built_in">sqrt</span>(b * b - <span class="hljs-number">4</span> * a * c)) / (<span class="hljs-number">2</span> * a);<br><br>    <span class="hljs-keyword">if</span>(ans1 == ans2)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf&quot;</span>, ans1);<br>    <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf %.2lf&quot;</span>, ans1, ans2);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="题目描述-考虑虚根"><a href="#题目描述-考虑虚根" class="headerlink" title="题目描述(考虑虚根)"></a>题目描述(考虑虚根)</h4><p>在实数范围内求方程$ax^2+bx+c&#x3D;0$的根。方程的系数$a,b,c$由用户从键盘上输入。</p><h4 id="输入输出格式-12"><a href="#输入输出格式-12" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式-11"><a href="#输入格式-11" class="headerlink" title="输入格式"></a>输入格式</h5><p>方程的系数$a,b,c$（假设是整型数据）。</p><h5 id="输出格式-11"><a href="#输出格式-11" class="headerlink" title="输出格式"></a>输出格式</h5><p>实数范围内求方程的根，如果存在实数根，结果保留两位小数且$x1 \ge x2$。当有两个实根时，要求先输出实根$x&#x3D;[-b+\sqrt{(b2-4ac)}]&#x2F;2a$，空格后再输出实根$x&#x3D;[-b-\sqrt{(b2-4ac)}]&#x2F;2a$；当有两个相同的实根时，仅输出一个实根$x&#x3D;[-b+\sqrt{(b2-4ac)}]&#x2F;2a$或$x&#x3D;[-b-\sqrt{(b2-4ac)}]&#x2F;2a$即可；当没有实根时，输出一对共轭复根。</p><h4 id="输入输出样例-12"><a href="#输入输出样例-12" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1-11"><a href="#输入样例-1-11" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h5 id="输出样例-1-11"><a href="#输出样例-1-11" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-string">-1</span>.00<span class="hljs-string">+1</span>.41i <span class="hljs-string">-1</span>.00<span class="hljs-string">-1</span>.41i<br></code></pre></td></tr></table></figure><h4 id="题解-12"><a href="#题解-12" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h5><ul><li>当Δ &lt; 0时，根为$(-b±\sqrt{(-Δ)i})&#x2F;2a$</li></ul><h5 id="AC代码-12"><a href="#AC代码-12" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> a, b, c;<br>    <span class="hljs-type">double</span> ans1, ans2;<br>    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>    <span class="hljs-type">int</span> delta = b * b - <span class="hljs-number">4</span> * a * c;<br><br>    <span class="hljs-keyword">if</span>(delta &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        ans1 = (-b) / (<span class="hljs-number">2</span> * a);<br>        ans2 = (<span class="hljs-built_in">sqrt</span>(-delta)) / (<span class="hljs-number">2.0</span> * a);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf+%.2lfi &quot;</span>, ans1, ans2);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf-%.2lfi&quot;</span>, ans1, ans2);<br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    ans1 = (-b + <span class="hljs-built_in">sqrt</span>(b * b - <span class="hljs-number">4</span> * a * c)) / (<span class="hljs-number">2</span> * a);<br>    ans2 = (-b - <span class="hljs-built_in">sqrt</span>(b * b - <span class="hljs-number">4</span> * a * c)) / (<span class="hljs-number">2</span> * a);<br><br>    <span class="hljs-keyword">if</span>(ans1 == ans2)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf&quot;</span>, ans1);<br>    <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf %.2lf&quot;</span>, ans1, ans2);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《洛谷刷题日记》</title>
    <link href="/Fluid/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E6%B4%9B%E8%B0%B7%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/Fluid/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E6%B4%9B%E8%B0%B7%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h1><blockquote><p>作者：上杉九月</p><p>排版与发布：上杉九月</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录一下洛谷的做题详细思路，方便自己，也方便其他想要做题的同学。</p><p>为了方便访问，所有内容将在此文章更新，我会做好分类。</p><p>欢迎收藏！</p><p>如果你有对于这些题目不同的算法，欢迎在评论区与我交流。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="P1217-USACO1-5-回文质数-Prime-Palindromes"><a href="#P1217-USACO1-5-回文质数-Prime-Palindromes" class="headerlink" title="P1217 [USACO1.5]回文质数 Prime Palindromes"></a><a href="https://www.luogu.com.cn/problem/P1217">P1217 [USACO1.5]回文质数 Prime Palindromes</a></h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>因为 151 既是一个质数又是一个回文数（从左到右和从右到左是看一样的），所以 151 是回文质数。</p><p>写一个程序来找出范围 $[a,b] (5 \le a &lt; b \le 100,000,000)$( 一亿)间的所有回文质数。</p><h4 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>第 1 行: 二个整数 a 和 b .</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出一个回文质数的列表，一行一个。</p><h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例 #1"></a>输入样例 #1</h5><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">500</span><br></code></pre></td></tr></table></figure><h5 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例 #1"></a>输出样例 #1</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs">5<br>7<br>11<br>101<br>131<br>151<br>181<br>191<br>313<br>353<br>373<br>383<br></code></pre></td></tr></table></figure><h4 id="说明-x2F-提示"><a href="#说明-x2F-提示" class="headerlink" title="说明&#x2F;提示"></a>说明&#x2F;提示</h4><p>Hint 1: Generate the palindromes and see if they are prime.</p><p>提示 1: 找出所有的回文数再判断它们是不是质数（素数）</p><p>Hint 2: Generate palindromes by combining digits properly. You might need more than one of the loops like below.</p><p>提示 2: 要产生正确的回文数，你可能需要几个像下面这样的循环。</p><p>题目翻译来自NOCOW。</p><p>产生长度为5的回文数:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (d1 = <span class="hljs-number">1</span>; d1 &amp;lt;= <span class="hljs-number">9</span>; d1+=<span class="hljs-number">2</span>) &#123;    <span class="hljs-comment">// 只有奇数才会是素数</span><br>     <span class="hljs-keyword">for</span> (d2 = <span class="hljs-number">0</span>; d2 &amp;lt;= <span class="hljs-number">9</span>; d2++) &#123;<br>         <span class="hljs-keyword">for</span> (d3 = <span class="hljs-number">0</span>; d3 &amp;lt;= <span class="hljs-number">9</span>; d3++) &#123;<br>           palindrome = <span class="hljs-number">10000</span>*d1 + <span class="hljs-number">1000</span>*d2 +<span class="hljs-number">100</span>*d3 + <span class="hljs-number">10</span>*d2 + d1;<span class="hljs-comment">//(处理回文数...)</span><br>         &#125;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><blockquote><p>代码：上杉九月</p><p>线性筛素数算法：洛谷@学委</p><p>原理性证明：<a href="https://www.luogu.com.cn/blog/cicos/notprime">学委的博客</a></p></blockquote><h5 id="回文数判断"><a href="#回文数判断" class="headerlink" title="回文数判断"></a>回文数判断</h5><blockquote><p>从个位开始，倒序输出，最后与原数判断</p></blockquote><h5 id="质数判断"><a href="#质数判断" class="headerlink" title="质数判断"></a>质数判断</h5><blockquote><p>这里用到线性筛</p><p>关于质数<a href="https://sakurasep.site/posts/13253/">请看</a></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXN 100000000</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">bool</span> Prime_Map[<span class="hljs-number">100000001</span>];<span class="hljs-comment">//创建质数地图</span><br><span class="hljs-type">int</span> Prime[<span class="hljs-number">1000000</span>];<span class="hljs-comment">//int数组存质数</span><br><span class="hljs-type">int</span> cnt;<span class="hljs-comment">//定义一个标记，记录质数的存储下标</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Judge_Hw</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><span class="hljs-comment">//回文数判断</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> x = n;<span class="hljs-comment">//n为输入数据，x为中介数据</span><br>    <span class="hljs-keyword">while</span>(x!=<span class="hljs-number">0</span>)<br>    &#123;<br>        m = m * <span class="hljs-number">10</span> + x % <span class="hljs-number">10</span>;<br>        x /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>( m == n)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Judge_Prime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(Prime_Map, <span class="hljs-number">1</span>, <span class="hljs-built_in">sizeof</span>(Prime_Map));<span class="hljs-comment">//初始化</span><br>    Prime_Map[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(Prime_Map[i])<br>        &#123;<br>            Prime[++cnt] = i;<span class="hljs-comment">//如果下标i没有被筛选掉，存入质数数组</span><br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= cnt &amp;&amp; i * Prime[j] &lt;= n; j++ )<br>        &#123;<br>            <span class="hljs-comment">//对质数倍数进行筛出</span><br>            Prime_Map[i * Prime[j]] = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">if</span>(i % Prime[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    cin&gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-keyword">if</span>(b &gt;= <span class="hljs-number">10000000</span>)<span class="hljs-comment">//没有超过1千万的质数回文数，洛谷最后一个点会卡RE</span><br>    &#123;<br>        b = <span class="hljs-number">10000000</span>;<br>    &#125;<br>    <span class="hljs-built_in">Judge_Prime</span>(b);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Judge_Hw</span>(Prime[i]) == <span class="hljs-number">1</span> &amp;&amp; Prime[i] &gt;= a)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, Prime[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《应用使用指南》Perfdog_第2期</title>
    <link href="/Fluid/HowToUse/%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%20-%20Perfdog/"/>
    <url>/Fluid/HowToUse/%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%20-%20Perfdog/</url>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h1><blockquote><p>作者：酷安@上杉九月</p><p>头图设计：酷安@上杉九月</p><p>排版及其发布：酷安@上杉九月</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>当我们作为一位消费者购买电子产品时，我们获取第一手信息的方式大多是从各大视频平台的自媒体的首发测评。当我们拿到电子产品之后，如何对它的性能进行测试呢？</p><p>有的朋友首先会想到娱乐兔，HappyMatser等跑分软件。毕竟跑分很直观，高就是强，低就是弱。但是当跑分论成为大众的标准，厂商便会想出各种各样的方法来获取更高的跑分。例如前几天被曝光的Realme GT跑分作弊，还有各大厂商的跑分白名单（MIUI检测到跑分软件运行，会将CPU锁在最高频率）。这样的测试只能算是极限性能，可是真正的去游戏里测试，散热设计的不同，调度优化的不同便会产生巨大的差距。</p><p>很早之前我也对手里的电子产品进行测试，当时用的是GameBench，不过经常出问题，正版的价格更是无法接受。第二个使用的软件是快否，虽然偶尔会出现一些bug，但是使用体验还是很不错的。不过因为这软件最后一次更新时间是2019年6月，emmm，基本是凉凉了。</p><p>去年的时候，把手里的米9换成了米10，因为听说865的性能与功耗都平衡的很好，便产生了测试的想法。这一款由腾讯旗下WeTest开发的软件Perfdog吸引了我。支持<code>Windows</code>，<code>Mac OS X</code>两个PC平台，可以对安卓和iOS设备进行测试。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="软件测试环境"><a href="#软件测试环境" class="headerlink" title="软件测试环境"></a>软件测试环境</h2><blockquote><ol><li>小米10 12G RAM MIUI12.5 21.3.12 官方包</li><li>iPad 2020 第八代 A12 iPad OS 14</li></ol></blockquote><h2 id="软件基本安装操作"><a href="#软件基本安装操作" class="headerlink" title="软件基本安装操作"></a>软件基本安装操作</h2><blockquote><p><a href="https://perfdog.qq.com/">Perfdog官方网站</a></p></blockquote><p>在Perfdog的官网下载对应平台的软件压缩包后，将压缩包解压到电脑的目录中。</p><p>在目录找到Perfdog.exe可执行文件，打开后显示登陆界面，这里可以注册账号或使用QQ扫码登陆。</p><p><strong>软件登录界面</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/1.png"></p><p>登录后便会进入到软件的UI界面</p><p><strong>软件界面</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/2.png"></p><p>此时便可以将你的测试设备与电脑进行链接。初始化之后，在左侧的两个选项中选择测试方式（无线or有线 无线可以测试电池相关内容，有线可以同步显示并记录手机画面）和测试应用（支持应用名称搜索）</p><p><strong>选择模式和设备（Windows平台可以多开Perfdog并同时对多部设备测试）</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/5.jpg"></p><p>右下角的加号是添加和减少测试项目。勾选左边的对号便是对此项目进行测试，点击右边的方框选择是否在软件中显示该项目的数据。</p><p><strong>安卓设备与iOS设备的测试项目稍有出入</strong></p><p><strong>安卓设备</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/3.jpg"></p><p><strong>iOS设备</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/4.jpg"></p><p>选择好测试应用，调整好测试项目，拿起你的设备，准备开始吧。</p><h2 id="软件数据解释与详细使用步骤"><a href="#软件数据解释与详细使用步骤" class="headerlink" title="软件数据解释与详细使用步骤"></a>软件数据解释与详细使用步骤</h2><p>建议有能力的朋友前往<a href="https://bbs.perfdog.qq.com/article-detail.html?id=5">官网</a>去详细了解测试项目的具体作用。以下内容是我个人的解读，可能会有一些不准确的地方，还请多多指教。</p><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/6.jpg"></p><ul><li>平均帧率 - Avg(FPS)<br>这一个数据对应的是整个测试过程的平均帧率，可以粗略的反应游戏的流畅程度。</li><li>卡顿次数&#x2F;每10分钟 - Jank(&#x2F;10min)</li><li>严重卡顿次数&#x2F;每10分钟 - BigJank(&#x2F;10min)</li></ul><p>这里放出perfdog官方给出的计算思路和计算方式</p><h4 id="PerfDog-Jank-计算思路："><a href="#PerfDog-Jank-计算思路：" class="headerlink" title="PerfDog Jank 计算思路："></a>PerfDog Jank 计算思路：</h4><blockquote><p>考虑视觉惯性，假设以前三帧的平均帧耗时为参考，作为vsync时间间隔，连续两次vsync没有新渲染画面刷新，则认为是一次潜在卡顿，也就是说下一帧耗时大于前三帧平均帧耗时2倍，则认为一次潜在卡顿。同时单帧耗时满足大于两倍电影帧耗时1000ms&#x2F;24x2(由于人眼低于24帧才能辨别画面不连续性)，则认为是一次真正卡顿。同时若单帧耗时大于3倍电影帧耗时，则认为是一次严重卡顿。</p></blockquote><h4 id="PerfDog-Jank计算方法："><a href="#PerfDog-Jank计算方法：" class="headerlink" title="PerfDog Jank计算方法："></a>PerfDog Jank计算方法：</h4><blockquote><p>同时满足两条件，则认为是一次卡顿Jank.<br>①Display FrameTime&gt;前三帧平均耗时2倍。<br>②Display FrameTime&gt;两帧电影帧耗时 (1000ms&#x2F;24x2≈83.33ms)。<br>同时满足两条件，则认为是一次严重卡顿BigJank.<br>①Display FrameTime &gt;前三帧平均耗时2倍。<br>②Display FrameTime &gt;三帧电影帧耗时(1000ms&#x2F;24x3&#x3D;125ms)。</p></blockquote><ul><li>未规范化应用CPU利用率 - Avg(AppCPU)[%]<br>这里未规范化CPU利用率的计算方式 &#x3D; CPU执行时间&#x2F;CPU总时间。如果使用这一项利用率计算APP的性能消耗，会出现在低频运行时和高频运行时CPU利用率相同的情况。<br>所以Perfdog官方建议使用规范化CPU利用率。</li><li>CPU平均温度 - Avg(CTemp)[°C]</li><li>规范化应用CPU利用率 - Avg(AppCPU)[%]Normalized<br>这种CPU利用率的计算方法将CPU的频率考虑进去。<br>CPU Usage(Normalized)&#x3D; (CPU执行时间&#x2F;CPU总时间) * (当前时刻所有CPU频率之和&#x2F;所有CPU频率最大值之和)<br>这种计算方法可以更真实的反映出APP的性能消耗。</li><li>最大内存占用 - Peak(Memory)[MB]</li><li>平均上传速度 - Avg(Send)[KB&#x2F;s]</li><li>平均下载速度 - Avg(Recv)[KB&#x2F;s]</li><li>平均功耗 - Avg(Power)[mW]</li></ul><h4 id="FPS"><a href="#FPS" class="headerlink" title="FPS"></a>FPS</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/7.jpg"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/8.jpg"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/9.jpg"></p><ul><li><p>平均帧率 - Avg(FPS)<br>这一个数据对应的是整个测试过程的平均帧率，可以粗略的反应游戏的流畅程度</p></li><li><p>帧率方差 - Var(FPS)<br>这一个数据反映的是帧率的波动大小</p></li><li><p>大于等于某一帧率的测试数据百分比 - FPS&gt;&#x3D;30[%] FPS&gt;&#x3D;45[%]<br>这一数据显示可以修改，在右下角，可以看数据的大致分布</p></li><li><p>降帧次数 - Drop(FPS)[&#x2F;h]<br>平均每小时两个相邻的FPS点相差大于8帧的次数，反映的是画面的流畅程度</p></li><li><p>卡顿次数&#x2F;每10分钟 - Jank(&#x2F;10min)</p></li><li><p>严重卡顿次数&#x2F;每10分钟 - BigJank(&#x2F;10min)</p></li><li><p>卡顿率 - Stutter[%]<br>计算方式 卡顿率 &#x3D; 卡顿时长 &#x2F; 总时长</p></li><li><p>平均单帧渲染时间 - Avg(FTime)[ms]<br>这一个数据可以结合第三张图 Frame Time分析<br>如果Frame Time时长在某一个点很大幅度超过平均单帧渲染时间，那么大概率是一次卡顿</p></li><li><p>单帧渲染时间超过100ms - FTime&gt;&#x3D;100ms[%]<br>单帧渲染时间过长，很有可能导致屏幕没有内容可以刷新，所以画面不动，即为卡顿</p></li><li><p>增量耗时 - Delta(FTime)&gt;100ms[&#x2F;h]</p></li></ul><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/10.jpg"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/11.jpg"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/12.jpg"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/13.jpg"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/14.jpg"></p><ul><li>未规范化应用CPU利用率 - Avg(AppCPU)[%]<br>这里未规范化CPU利用率的计算方式 &#x3D; CPU执行时间&#x2F;CPU总时间。如果使用这一项利用率计算APP的性能消耗，会出现在低频运行时和高频运行时CPU利用率相同的情况。</li></ul><p>所以Perfdog官方建议使用规范化CPU利用率。</p><ul><li><p>未规范化应用CPU利用率小于等于50%&#x2F;70% - AppCPU&lt;&#x3D;50%[%] AppCPU&lt;&#x3D;70%[%]</p></li><li><p>未规范化总的CPU利用率 - Avg(TotalCPU)[%]</p></li><li><p>未规范化总的CPU利用率小于等于50%&#x2F;70% - TotalCPU&lt;&#x3D;50%[%] TotalCPU&lt;&#x3D;70%[%]</p></li><li><p>CPU平均温度 - Avg(CTemp)[°C]<br>下面一排都是规范化的CPU指标，不多赘述</p></li><li><p>CPU时钟频率 - CPU Clock<br>反映的是当前时间CPU各个核心的频率</p></li></ul><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>这部分对于性能测试的参考性不是很高。</p><p>这里Perfdog提醒：在极限测试情况下，例如开启游戏超高帧率，建议不要勾选收集Memory Usage和Memory Detail，因为部分机型会有性能损耗。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/15.jpg"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/16.jpg"></p><h3 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/17.jpg"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/18.jpg"></p><ul><li><p>平均GPU利用率 - Avg(GUsage)[%]<br>反映的是应用是否可以充分利用GPU性能</p></li><li><p>平均CPU时钟频率 - Avg(GClock)[MHz]<br>反映的是应用的负载压力</p></li></ul><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><p>这一部分对于非实时对战游戏参考性不是很高。测试王者荣耀等对网络要求较高的游戏可以进行关注。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/19.jpg"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/20.jpg"></p><h3 id="Battery"><a href="#Battery" class="headerlink" title="Battery"></a>Battery</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/21.jpg"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/22.jpg"></p><ul><li><p>平均功耗 - Avg(Power)[mW]<br>在一定程度上反映了当前手机的功耗</p></li><li><p>耗电量 - Sum(Battery)[mWh]<br>手机在运行测试期间所消耗的电量</p></li><li><p>平均电压 - Avg(Voltage)[mV]</p></li><li><p>平均电流 - Avg(Current)[mA]</p></li></ul><h3 id="Energy-Usage"><a href="#Energy-Usage" class="headerlink" title="Energy Usage"></a>Energy Usage</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/23.jpg"></p><p>监控应用使用的能耗情况，可以监控CPU，GPU，网络模块，定位模块等等</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于芯片的性能测试，我认为主要应该关注的数据项目为</p><ul><li><p>平均帧率 - Avg(FPS)<br>反映的是设备的游戏运行稳定性，越接近设定的游戏帧率越好。</p></li><li><p>帧率方差 - Var(FPS)<br>反映的是设备掉帧的严重程度，越小越好。</p></li><li><p>降帧次数 - Drop(FPS)[&#x2F;h]<br>反映的是设备的掉帧次数（掉帧次数不等于卡顿次数），越少越好。</p></li><li><p>卡顿次数&#x2F;每10分钟 - Jank(&#x2F;10min)<br>反映的是人所能感知的小卡顿次数，越少越好。</p></li><li><p>严重卡顿次数&#x2F;每10分钟 - BigJank(&#x2F;10min)<br>反映的是人所能感知的严重卡顿次数，越少越好。</p></li><li><p>平均单帧渲染时间 - Avg(FTime)[ms]<br>反映的是设备对画面单一帧的渲染平均时间，若某一时刻对画面渲染的时间远远超过平均值，说明此时屏幕内容没有刷新，会觉得明显卡顿，单帧渲染时间越贴近平均值越好。</p></li><li><p>规范化的应用CPU利用率 - Avg(AppCPU)[%]Normalized<br>反映的是排除其他影响因素后应用对于CPU性能的消耗。</p></li><li><p>CPU平均温度 - Avg(CTemp)[°C]<br>反映的是应用长时间运行使CPU升高的温度，作为温控降频的参考数据。</p></li><li><p>CPU时钟频率 - CPU Clock<br>反映的是应用运行时CPU的调度情况，作为卡顿分析和功耗分析的参考数据。</p></li><li><p>平均GPU利用率 - Avg(GUsage)[%]<br>反映的是应用对于GPU的使用情况。</p></li><li><p>平均CPU时钟频率 - Avg(GClock)[MHz]<br>反映的是应用运行时GPU的调度情况，作为卡顿分析和功耗分析的参考数据。</p></li><li><p>平均功耗 - Avg(Power)[mW]<br>反映的是应用运行时的平均功耗，高中低负载在功耗这一测试项目差距较大，例如骁龙888在高负载可以跑到11w的功耗，在低负载只有4w，续航和发热因此不同。</p></li></ul><h2 id="云端页面功能介绍"><a href="#云端页面功能介绍" class="headerlink" title="云端页面功能介绍"></a>云端页面功能介绍</h2><h3 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h3><h4 id="我的数据"><a href="#我的数据" class="headerlink" title="我的数据"></a>我的数据</h4><p>存放着测试结束后上传的测试结果，当测试结果较多时可以设置条件筛选数据。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/24.jpg"></p><h4 id="任务数据"><a href="#任务数据" class="headerlink" title="任务数据"></a>任务数据</h4><p>Perfdog支持创建测试任务，你可以邀请小伙伴一起进行测试，并将数据归档到任务中进行分享。想加入SGPT测试计划的朋友可以在酷安私信我，我会发给你邀请链接，同时你可以看到SGPT计划的最新进展并且参与进来。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/25.jpg"></p><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>在这里可以针对不同应用数据进行分类显示</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/26.jpg"></p><h3 id="具体数据"><a href="#具体数据" class="headerlink" title="具体数据"></a>具体数据</h3><h4 id="图表基本操作（数据统计范围修改，图标曲线显示）"><a href="#图表基本操作（数据统计范围修改，图标曲线显示）" class="headerlink" title="图表基本操作（数据统计范围修改，图标曲线显示）"></a>图表基本操作（数据统计范围修改，图标曲线显示）</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/27.jpg"></p><h4 id="图表拖选操作（查看某一时间段的测试数据）"><a href="#图表拖选操作（查看某一时间段的测试数据）" class="headerlink" title="图表拖选操作（查看某一时间段的测试数据）"></a>图表拖选操作（查看某一时间段的测试数据）</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/28.jpg"></p><h4 id="点选查看卡顿具体场景"><a href="#点选查看卡顿具体场景" class="headerlink" title="点选查看卡顿具体场景"></a>点选查看卡顿具体场景</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/29.jpg"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/30.jpg"></p><h4 id="不同测试范例对比"><a href="#不同测试范例对比" class="headerlink" title="不同测试范例对比"></a>不同测试范例对比</h4><h5 id="可以添加5条测试用例"><a href="#可以添加5条测试用例" class="headerlink" title="可以添加5条测试用例"></a>可以添加5条测试用例</h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/31.jpg"></p><h5 id="对比不同的测试用例"><a href="#对比不同的测试用例" class="headerlink" title="对比不同的测试用例"></a>对比不同的测试用例</h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/32.jpg"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>今天本来是想要发两篇文章的，顺便开一个能让大家都参与进来的一个企划。先把企划的头图设计放出来吧。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/SGPT.png"></p><p>本篇文章是《应用使用指南》的第二期，我相信大家可以学会Perfdog这款游戏性能测试软件的使用方法。我的一个想法是，从这个系列可以引出很多新的，有趣的系列，让大家都可以参与进去。</p><p>如上图所示，从第二期引出了一个SGPT（Soc Game Performance Test）计划，我希望根据自己的理解设计一个游戏测试标准，来测试不同机型对于游戏性能的调度能力。</p><p>这一个计划如果只有我一个人收集数据，第一是我个人学业的原因，我并不能有太多时间来进行游戏测试；第二是我个人并没有经济能力去购买设备。如果大家都能参与进来，那么收集到数据会越来越多，我们也能在众多测评里获得一份最真实的数据。</p><p>这里我们采用的是Perfdog的团队功能，这里把加入的链接放在这里**<a href="https://perfdog.qq.com/taskdata/201592">上杉九月的团队</a>**。希望大家可以参与进来，后续会加入激励计划，争取给此计划贡献多的朋友一些动力。</p><p>简单介绍结束，说一下目前这个企划遇到的问题。因为我个人平时玩的游戏种类比较少，目前只玩崩坏3和原神，这两类游戏都属于高负载的类型。而对于中等负载和低负载的游戏，个人的了解很少，希望各位可以在评论区讨论一下，什么游戏可以被纳入中负载和低负载的测试计划中，谢谢各位！</p><h2 id="各平台更新计划"><a href="#各平台更新计划" class="headerlink" title="各平台更新计划"></a>各平台更新计划</h2><ul><li>个人博客 周六晚八点</li><li>酷安 微信公众号 周日晚八点</li><li>哔哩哔哩 微博 周一晚八点</li></ul><hr><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png"></p>]]></content>
    
    
    <categories>
      
      <category>应用使用指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>零基础</tag>
      
      <tag>PC</tag>
      
      <tag>应用使用指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《应用使用指南》存储空间隔离_第1期</title>
    <link href="/Fluid/HowToUse/%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%20-%20%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E9%9A%94%E7%A6%BB/"/>
    <url>/Fluid/HowToUse/%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%20-%20%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E9%9A%94%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h1><blockquote><p>作者： 上杉九月</p></blockquote><blockquote><p>头图设计：上杉九月</p></blockquote><blockquote><p>排版及发布：上杉九月</p></blockquote><blockquote><p>感谢提供修改建议: </p><ul><li>酷安@量子米君 </li><li>酷安@苍玄之包</li></ul></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="安卓根目录的混乱现象"><a href="#安卓根目录的混乱现象" class="headerlink" title="安卓根目录的混乱现象"></a>安卓根目录的混乱现象</h3><p>每一次打开文件管理去寻找你所想要的文件，或是在聊天软件给朋友发送文件，总会看到目录里有着大量莫名奇妙的文件夹。一是不方便找到目标文件所在，二是对于强迫症挺不舒服的。</p><p><strong>优化前的根目录，充斥着各种文件夹</strong></p><p>造成这种现象，主要是国内软件厂商不遵守开发规范导致。根据安卓规范，在 <code>Android/data/包名</code> 路径应该保存对应应用的数据文件，<code>Android/obb/包名</code>路径应该保存对应应用的数据包文件。这两个文件夹是用户不应该去访问的，因此安卓11的新规范禁止系统（仅对于定制UI）的文件管理直接访问。如果介意（例如MIUI的默认文件管理）访问受限，可以安装相应的旧版本。</p><h3 id="安卓11的新限制"><a href="#安卓11的新限制" class="headerlink" title="安卓11的新限制"></a>安卓11的新限制</h3><p><strong>如图所示，MIUI的文件管理在一次升级中已经不在允许访问，点击前往查看将会跳转安卓原生的文件管理。</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/1.jpg"></p><p>应用应该将自身数据保存在Android文件夹内部，将用户数据按照分类保存在标准文件夹，但是国内应用大部分不会遵循开发规范，便造成了安卓根目录混乱的现状。</p><h3 id="某些应用开发者的错误理解"><a href="#某些应用开发者的错误理解" class="headerlink" title="某些应用开发者的错误理解"></a>某些应用开发者的错误理解</h3><p>很多应用开发者为了适配安卓11的要求，做出了很多令人迷惑的行为。这里以腾讯的令人迷惑的操作举例。在QQ 8.2.8版本之后，将用户的下载文件位置从根目录更改到了Android文件夹内部，同时也是自身的数据文件夹。这让用户去查看自己下载的文件时十分麻烦。而且QQ在根目录仍然有着许多未知用途的文件夹。</p><h3 id="标准文件夹的示例（MIUI）"><a href="#标准文件夹的示例（MIUI）" class="headerlink" title="标准文件夹的示例（MIUI）"></a>标准文件夹的示例（MIUI）</h3><ul><li>DCIM 保存相机拍摄的照片和视频（MIUI在该文件夹还存储了截图和屏幕录制）</li><li>Documents 保存文档</li><li>Download 保存下载文件</li><li>Fonts 保存字体文件（MIUI系统字体文件保存在主题文件夹中）</li><li>Movie 保存视频文件</li><li>Music 保存音频文件</li><li>Pictures 保存图片文件</li><li>等等</li></ul><p>对于不同的定制系统同时也有自己存放关键系统文件的文件夹，例如MIUI会在根目录建立一个MIUI文件夹，用来存放各种系统软件的缓存文件和数据。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>依靠安卓大版本更新更严格的文件访问策略，强制应用使用更高的targetAPI。</li><li>依靠定制系统完善文件访问限制功能，感觉最近Flyme和MIUI的沙盒已经有了雏形了。</li><li>依靠Rikka开发的存储空间隔离（原名存储重定向），这也是我写本文的目的。</li></ul><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>这款软件在酷安上即有下载，原名存储重定向，现名存储空间隔离。<br>在使用这款软件之前，你需要接受以下的要求</p><ul><li>手机已经获取了root权限</li><li>愿意为这款软件支付一定的费用</li><li>有耐心</li><li>可以接受某些奇奇怪怪的问题</li><li>可以主动寻找问题的解决方法</li></ul><h2 id="第一步-安装必要的环境"><a href="#第一步-安装必要的环境" class="headerlink" title="第一步 安装必要的环境"></a>第一步 安装必要的环境</h2><h3 id="本机的使用环境为"><a href="#本机的使用环境为" class="headerlink" title="本机的使用环境为"></a>本机的使用环境为</h3><ul><li>小米10 MIUI12.5 21.2.3 Simplicity官改</li><li>Magsik 21.4 App 22.0</li></ul><h3 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h3><p><strong>在满足root的环境下，在Magsik模块安装页面，搜索riru关键字便可以看到riru系列模块</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/2.jpg"></p><p><strong>我们这里只安装两个模块</strong></p><p>Riru V23.6</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/4.jpg"></p><p>Riru - Enhanced mode for Storage Isolation V23.6</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/3.jpg"></p><p>这里提醒一下，如果不安装Riru，而先去安装Riru - Enhanced mode for Storage Isolation，将会无法安装。所以请按照顺序安装模块。</p><h2 id="第二步-安装软件并进行基本配置"><a href="#第二步-安装软件并进行基本配置" class="headerlink" title="第二步 安装软件并进行基本配置"></a>第二步 安装软件并进行基本配置</h2><h3 id="下载途径"><a href="#下载途径" class="headerlink" title="下载途径"></a>下载途径</h3><h4 id="在酷安搜索存储空间隔离并下载"><a href="#在酷安搜索存储空间隔离并下载" class="headerlink" title="在酷安搜索存储空间隔离并下载"></a>在酷安搜索存储空间隔离并下载</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/6_02.jpg"></p><h4 id="在Google-Play搜索存储空间隔离并下载"><a href="#在Google-Play搜索存储空间隔离并下载" class="headerlink" title="在Google Play搜索存储空间隔离并下载"></a>在Google Play搜索存储空间隔离并下载</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/6.jpg"></p><p>这里我推荐从Google Play下载，在Play商店购买的该软件，使用同一个谷歌账号可以多设备使用。</p><p>目前软件的内购验证做的很完善，如果你是在Google Play下载，无需登录外网，直接点击恢复购买即可。</p><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p><strong>下载完成后打开软件，便显示了软件的基本介绍</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/8.jpg"></p><p><strong>允许存储空间隔离获取Root权限，当出现提示成功时便可以进行下一步了。</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/9.jpg"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/10.jpg"></p><p>如果出现问题，请按照以上步骤重新安装环境。</p><p>不过有的机型的确是有兼容问题。</p><p><strong>到这一步，就已经安装完成了</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/11.jpg"></p><h3 id="备份文件"><a href="#备份文件" class="headerlink" title="备份文件"></a>备份文件</h3><p>在这里，我会提供一份自己使用，基本没有错误的配置文件，你只需要在备份与还原里还原备份文件即可开始使用。</p><blockquote><p><strong><a href="https://cloud.sakurasep.club/s/wRcq">备份文件_密码0314</a></strong></p></blockquote><p>注意：</p><ul><li>本配置文件的应用可能无法包含你所使用的应用，如果你想达到近乎完美的效果，请继续看下去。</li><li>本配置文件有的地方会有一些问题，你需要自行修改。已知QQ存在侧漏问题。</li></ul><h2 id="第三步-原理解释以及详细配置"><a href="#第三步-原理解释以及详细配置" class="headerlink" title="第三步 原理解释以及详细配置"></a>第三步 原理解释以及详细配置</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在存储空间隔离的官网，我们可以找到一些我们所需要的内容</p><blockquote><p><a href="https://sr.rikka.app/zh-hans/">官方网站</a></p></blockquote><p>以下内容是对官网指南的部分摘录以及我自己的理解</p><ul><li>公共文件夹</li></ul><p>DCIM,Pictures,Download 等公共文件夹，用来保存用户的文件，允许应用在此根据需求新建文件夹来保存对应的文件。例如QQ应该将用户下载的文件保存在 <code>Download/QQ</code>，而不是<code>Android/data/包名</code>。</p><p>但是应用对于公共文件夹的访问应该是一次性的，有目的的。例如在QQ发送图片给好友，QQ在获取用户的允许后访问DCIM和Pictures文件夹，发送结束后系统应该收回访问权限。</p><ul><li>数据文件夹</li></ul><p>Android文件夹内部对于用户来说是不应该进行访问的，对于应用来说则是无需授权就能够访问，在此保存应用的数据和缓存。</p><p>遗憾的是，目前原生安卓对于存储权限的选项只有允许和拒绝，此外，国内存在的大量“坏应用”如果被拒绝授权将不会运行。</p><p>存储空间隔离便是为了解决这一乱象而开发，这里感谢Rikka大佬开发了这款应用，在一定程度上很好解决了以上问题。</p><p>一般来说，不规范的应用会在根目录创建各种各样的文件夹。在启用存储空间隔离之后，应用将会在<code>Android/data/包名/sdcard</code> 内保存文件。</p><p>优点如下</p><ul><li>因为卸载应用时只会清理应用的数据文件夹，在对应用进行隔离后，卸载时将会将下载文件和应用数据一并删除</li><li>系统统计应用占用空间大小仅会统计数据文件夹，在对应用进行隔离后，系统统计大小功能将会正常工作</li></ul><h3 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h3><h4 id="软件权限"><a href="#软件权限" class="headerlink" title="软件权限"></a>软件权限</h4><p>对于MIUI用户，因为MIUI魔改了很多对于应用的控制权限，这里需要手动为存储空间隔离打开部分权限</p><ul><li>在后台弹出界面</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/12.jpg"></p><ul><li>应用自启动以及省电策略</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/13.jpg"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/14.jpg"></p><h4 id="默认存储空间位置"><a href="#默认存储空间位置" class="headerlink" title="默认存储空间位置"></a>默认存储空间位置</h4><p><strong>在软件的设置 - 行为 - 默认隔离存储空间位置中，你有两种选择</strong></p><ul><li>保存在数据文件夹</li><li>保存在缓存文件夹</li><li>缓存文件夹有着和数据文件夹一样的特性，但是缓存文件夹可能被清理软件所清理。这里根据自己的需求吧。一般来说保存在数据文件夹即可。</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/15.jpg"></p><h4 id="可访问文件夹模板"><a href="#可访问文件夹模板" class="headerlink" title="可访问文件夹模板"></a>可访问文件夹模板</h4><p>然后回到上一级，在可访问文件夹模板中进行设置<br>在这里所设置的文件夹就是允许应用访问的公共文件夹</p><p><strong>我在默认的基础上添加了对于Movie文件夹的访问</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/16.jpg"></p><p>现在回到主页面，点击应用管理，就可以对应用进行单独设置</p><p><strong>为了避免重定向系统应用带来各种各样的bug，我们先对第三方应用进行配置</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/17.jpg"></p><h3 id="根据需求配置"><a href="#根据需求配置" class="headerlink" title="根据需求配置"></a>根据需求配置</h3><p>白描是一款特别好用的OCR识别和PDF导出应用，这里我们拿它来讲解如何对一款应用重定向。</p><h4 id="需求考虑"><a href="#需求考虑" class="headerlink" title="需求考虑"></a>需求考虑</h4><p>我们应该考虑，这款应用会获取什么信息，因为我常常用它将图片转成PDF格式，所以DCIM（拍摄的图片）和Pictures（下载的图片）是可访问的文件夹。所以说我们对白描设置可访问文件夹为DCIM和Pictures。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/18.jpg"></p><h4 id="模拟正常使用过程"><a href="#模拟正常使用过程" class="headerlink" title="模拟正常使用过程"></a>模拟正常使用过程</h4><p>使用白描正常导出一次PDF，在查看文件历史里可以看到PDF保存在Download&#x2F;Baimiao中。因为我希望保存在Document&#x2F;白描，所以我们打开白描的Download访问权限（刚才是白描试图访问Download，但是被定向到了数据文件夹内部的Download），重新保存一次PDF，这时白描就会创建此文件夹。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/19.jpg"></p><h4 id="将隔离的文件同步到标准文件夹"><a href="#将隔离的文件同步到标准文件夹" class="headerlink" title="将隔离的文件同步到标准文件夹"></a>将隔离的文件同步到标准文件夹</h4><p>在导出被隔离的文件中添加同步文件夹规则，来源路径选择Download（新版存储空间隔离导出时会将该应用在目录内的全部文件进行同步）</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/20.jpg"></p><h4 id="4-检查结果"><a href="#4-检查结果" class="headerlink" title="4.检查结果"></a>4.检查结果</h4><p>可以看到PDF文件成功保存到指定位置</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/21.jpg"></p><p>这里很多使用者都会有一个误区-既然我要把文件保存到Documents目录，那么为什么不把Documents设置为可访问的文件夹呢？其实很好解释，你把可访问的文件夹当做读取权限，把导出被隔离的文件当作写入权限，这样就明白了吧。</p><p>但是有些应用是很规范的，他们保存在标准文件夹，所以你应该允许该应用访问。</p><h3 id="应用之间互相访问"><a href="#应用之间互相访问" class="headerlink" title="应用之间互相访问"></a>应用之间互相访问</h3><p>用过存储重定向的老用户都应该遇到过哔哩哔哩的视频分享到QQ，会出现系统繁忙的提示，就算偶尔可能分享成功，视频的封面也不见了。</p><p>这是因为哔哩哔哩老版本在根目录的tv.danmuku.bili存放自己的图片缓存，而对哔哩哔哩和QQ进行隔离后，QQ是访问不到这个文件夹的，就造成了分享失败的问题。</p><p><del>目前这个问题貌似得到了解决，哔哩哔哩在某一个版本对缓存文件的位置做了更改，移动到了数据文件夹，这是一个可能的原因。此外还可能因为哔哩哔哩的分享在QQ上被改为了小程序分享，分享短链接包含了封面地址，所以分享成功进行。</del></p><p><del>因为目前我并没有遇到该问题，所以希望各位可以在评论区反馈你们的使用情况，我会抽时间测试一下对应的软件版本。</del></p><p>好了，最近遇到了这一问题。同时也讲一下解决方案。同类问题都可以按照此思路解决。</p><p>哔哩哔哩的视频想要分享到QQ（空间，联系人等），QQ需要读取哔哩哔哩的封面缓存信息，而因为存储重定向的缘故，QQ无法对你允许访问文件夹之外的内容进行读取和写入操作，这就导致了分享的失败。所以为了解决这一问题，首先通过文件历史找到正常情况下哔哩哔哩的缓存保存位置。最新版缓存保存位置在 <code>Android/data/tv.danmaku.bili/files/Images</code> 。然后在QQ可访问的文件夹，在其他应用的文件夹中创建新的规则。</p><p><strong>如下图所示。</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/22.jpg"></p><h3 id="最终的清理"><a href="#最终的清理" class="headerlink" title="最终的清理"></a>最终的清理</h3><p>按照以上的例子，对用户应用一一设置。设置完成之后，删除除了标准文件夹的所有冗余文件，正常使用一段时间，你会发现根目录仍然会有一些文件夹，这时候就需要精准定位。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/23.jpg"></p><p>如上图所示，比如说我们想知道<code>com.miui.voiceassist</code>(其实很明显，是小爱同学，但请假装不知道)是由哪一个应用创建。</p><p><strong>我们将文件夹名复制，在文件监视中粘贴。</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/24.jpg"></p><p>然后就会显示有那些应用对该文件夹进行读取或者是写入。</p><p>不过我们要清楚读取和写入的区别，比如说这里显示了媒体存储设备对该文件夹的访问，而我们了解一点相关内容便可以知道个该软件是在扫描各个文件夹来查找媒体文件，并没有进行写入，所以文件夹不是由它创建。</p><p><strong>向下拉便可以找到小爱同学的文件访问记录。</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/25.jpg"></p><p><strong>现在点击小爱同学，对其进行隔离。</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/26.jpg"></p><h3 id="或许会更完美"><a href="#或许会更完美" class="headerlink" title="或许会更完美"></a>或许会更完美</h3><h4 id="解决某些文件无法读取媒体文件的问题"><a href="#解决某些文件无法读取媒体文件的问题" class="headerlink" title="解决某些文件无法读取媒体文件的问题"></a>解决某些文件无法读取媒体文件的问题</h4><p>在安卓11使用存储空间隔离会导致导出的媒体文件不在软件显示的问题。实际举例（QQ发送图片无法获取导出的媒体文件）。</p><p><strong><a href="https://www.coolapk.com/feed/24310395?shareKey=NDVlZDZkYjUzNDBmNjA0Y2I2NmU~&shareUid=3334957&shareFrom=com.coolapk.market_11.0.3">酷安@余空_Yuk</a></strong></p><p>开发的给安卓11启用sdcardfs的模块可以解决这一问题。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/27.jpg"></p><h4 id="2-解决下载文件被某些应用存储在Android目录的问题"><a href="#2-解决下载文件被某些应用存储在Android目录的问题" class="headerlink" title="2. 解决下载文件被某些应用存储在Android目录的问题"></a>2. 解决下载文件被某些应用存储在Android目录的问题</h4><p>QQ这类将用户下载的文件保存在数据文件夹的应用</p><p>**<a href="https://www.coolapk.com/feed/24654978?shareKey=MzIxM2M0ZDcxYmE2NjA0Y2I3MzU~&shareUid=3334957&shareFrom=com.coolapk.market_11.0.3">酷安@阿巴酱</a>**给出了一种解决方案。</p><p>我采用的是Rikka开发的另一款应用-保存副本</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/28.jpg"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/29.jpg"></p><p><strong>当你在QQ下载文件之后，只需要在打开方式里选择保存副本，软件就可以在Download目录复制一份相同的文件。</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/30.jpg"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/31.jpg"></p><h2 id="第四步-效果展示"><a href="#第四步-效果展示" class="headerlink" title="第四步 效果展示"></a>第四步 效果展示</h2><p>这里我自己把Malody的谱面文件存在了Map文件夹。</p><p>miad这一个空文件是为了防止MIUI的应用开屏广告产生（直接卸载掉智能服务<code>com.miui.systemAdSolution</code>即可。可以使用搞机助手进行卸载。一直用官改，不知道MIUI将广告服务集成在此应用里，感谢<strong>酷安@水水水淼</strong>的建议）</p><p>mm是Magsik的MM管理器</p><p><strong>如果和文章开头对比一下，可以说是强迫症狂喜。</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/32.jpg"></p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>简单说一些东西吧</p><h2 id="个人情况"><a href="#个人情况" class="headerlink" title="个人情况"></a>个人情况</h2><p>我在寒假里策划了很多内容，从这一篇文章开始，我会逐渐向给各位展示我策划的优质内容。</p><h2 id="新的开始"><a href="#新的开始" class="headerlink" title="新的开始"></a>新的开始</h2><p>这算是一个新坑，目的就是向各位推荐一些优质的应用，他们真的可以方便你的生活。目前我的更新频率（如果没有什么意外的话基本就是一个月更新两次，一次是安卓上的应用，一次是PC上的应用），毕竟我刚进入大学，自己安排了很多学习的内容，时间并不是很充裕，保证质量是第一位（还有要填坑）。</p><h2 id="欢迎交流"><a href="#欢迎交流" class="headerlink" title="欢迎交流"></a>欢迎交流</h2><p>这些应用对于各位来说有的可能没用过，有的可能早就熟练上手。我希望我写的图文可以帮助小白零基础上手优质应用，从而提高效率。同时期待和各路大佬交流使用心得，不断完善文章内容和呈现形式。</p><p>在这里我也会虚心听取意见，无论是对图文内容的建议，或是对某些优质应用的推荐等等。</p><h1 id="多平台发布"><a href="#多平台发布" class="headerlink" title="多平台发布"></a>多平台发布</h1><p>周六晚八点：</p><ul><li><a href="https://blog.sakurasep.site/">个人博客</a></li></ul><p>周日晚八点：</p><ul><li>Bilibili专栏：上杉九月</li><li>微信公众号：上杉九月的知识屋</li><li>Weibo：上杉九月</li><li>酷安：上杉九月</li></ul><hr><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png"></p>]]></content>
    
    
    <categories>
      
      <category>应用使用指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>零基础</tag>
      
      <tag>应用使用指南</tag>
      
      <tag>安卓</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《零基础教程》云服务器实现定时签到_第1期</title>
    <link href="/Fluid/HowToDo/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%20-%20%E6%99%BA%E6%85%A7%E6%9B%B2%E5%9B%AD%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1%E4%BA%91%E7%AB%AF/"/>
    <url>/Fluid/HowToDo/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%20-%20%E6%99%BA%E6%85%A7%E6%9B%B2%E5%9B%AD%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1%E4%BA%91%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h2><blockquote><p>作者：上杉九月</p><p>排版及发布：上杉九月</p><p>项目原作者：Polo</p><p><strong>本篇教程在腾讯云会出现问题，请等待更新！</strong></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每日健康提交？要不是不交，要不是随便填。</p><p>意义何在？</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><blockquote><p>原贴:<a href="https://polosec.github.io/2021/01/19/server%E9%85%B1%E5%AE%9E%E7%8E%B0%E7%AD%BE%E5%88%B0%E6%8F%90%E9%86%92/">Polo’s Blog 智慧曲园自动签到+微信推送</a></p></blockquote><blockquote><p>github项目地址:<a href="https://github.com/polosec/qfnuAutoTemperatureSubmit">qfnuAutoTemperatureSubmit</a></p></blockquote><h3 id="1-需要准备"><a href="#1-需要准备" class="headerlink" title="1.需要准备"></a>1.需要准备</h3><ul><li>云服务器（使用宝塔面板）</li><li>配置好的python脚本 或者 项目原脚本</li></ul><h3 id="2-开始配置"><a href="#2-开始配置" class="headerlink" title="2.开始配置"></a>2.开始配置</h3><p>在宝塔面板的文件管理中新建文件夹用来存放项目的脚本文件。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Qfnu/1.jpg"></p><h4 id="方案一：对python脚本进行单独配置"><a href="#方案一：对python脚本进行单独配置" class="headerlink" title="方案一：对python脚本进行单独配置"></a>方案一：对python脚本进行单独配置</h4><p>如图所示是我们宿舍四人的python脚本</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Qfnu/2.jpg"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Qfnu/3.jpg"></p><p>所以此时的脚本执行命令为</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs python">python3 /www/wwwroot/qfnuAutoTemperatureSubmit/xxx.py<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Qfnu/4.jpg"></p><h4 id="方案二：使用原python文件"><a href="#方案二：使用原python文件" class="headerlink" title="方案二：使用原python文件"></a>方案二：使用原python文件</h4><p>直接将demo1.py放在文件夹内<br>此时命令变为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python3 /www/wwwroot/qfnuAutoTemperatureSubmit/demo1.py 学号 密码<br></code></pre></td></tr></table></figure><h3 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3.注意事项"></a>3.注意事项</h3><p>执行python脚本报错的话</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Qfnu/5.png"></p><hr><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png"></p>]]></content>
    
    
    <categories>
      
      <category>零基础教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>零基础</tag>
      
      <tag>云服务器</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的2020年度总结</title>
    <link href="/Fluid/Year/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%20-%202020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/Fluid/Year/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%20-%202020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h1><blockquote><p>作者：上杉九月</p><p>排版与发布：上杉九月</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>咕咕咕了好久的2020年度总结终于来啦！</p><p>～～才不是因为我懒～～</p><p>本文中所有内容截止于2021.1.1日</p><p>未来，一定更精彩！</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="第一阶段-高三下学期–高考"><a href="#第一阶段-高三下学期–高考" class="headerlink" title="第一阶段 高三下学期–高考"></a>第一阶段 高三下学期–高考</h2><p>紧张的学习生活，每天基本都是两点一线的路线。</p><p>枯燥的学习生活，在最后的高考100天尤为如此，从周考到天天做不完的卷子。</p><p>温暖的学习生活，在向着理想的大学奋斗的路上，感谢每一位同学的陪伴，感谢老班的悉心辅导，感谢每一位老师的辛苦付出，满满的回忆。</p><p>终究有一个好结果。</p><p>下一个人生阶段，在曲师大度过。</p><h2 id="第二阶段-暑假"><a href="#第二阶段-暑假" class="headerlink" title="第二阶段 暑假"></a>第二阶段 暑假</h2><p>放下了高三的压力，暑假便成为了我尽情发挥的舞台。</p><h3 id="1-第一台自己组装的主机"><a href="#1-第一台自己组装的主机" class="headerlink" title="1. 第一台自己组装的主机"></a>1. 第一台自己组装的主机</h3><p>个人算是一个果粉吧。于是在进行配件选购的时候，并没有选择热门的AMD + N卡的组合，而是为了方便黑苹果的安装，选择了Intel + A卡的组合。</p><p>配置如下</p><figure class="highlight tp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs tp">CPU：Intel i<span class="hljs-number">5</span><span class="hljs-number">-9600</span>K <br>GPU：AMD RX<span class="hljs-number">5700</span> XT<br>内存：Kingston 骇客神条 <span class="hljs-number">3200</span>MHz <span class="hljs-number">8</span>G x <span class="hljs-number">2</span><br>固态：Western Digital SN<span class="hljs-number">750</span> <span class="hljs-number">500</span>GB x <span class="hljs-number">2</span><br>机械：TOSHIBA <span class="hljs-keyword">P</span><span class="hljs-number">300</span> <span class="hljs-number">3</span>T<br>主板：MSI <span class="hljs-keyword">Z</span><span class="hljs-number">390</span> Gaming Puls<br>电源：Segotep <span class="hljs-number">600</span><span class="hljs-keyword">W</span><br>散热：玄冰<span class="hljs-number">400</span><br>机箱：SAHARA 逆行者<span class="hljs-number">606</span><br>显示器：AOC <span class="hljs-number">23</span><span class="hljs-number">.8</span>英寸 <span class="hljs-number">24</span>G<span class="hljs-number">2</span> <span class="hljs-number">1080</span><span class="hljs-keyword">P</span><span class="hljs-number">144</span><br>无线网卡：BCM943602CS<br></code></pre></td></tr></table></figure><p>总体感觉还行吧，组装完成之后做了一个用OC引导的win10和macOS的双系统，这台电脑便是我暑假的主力机器。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/1.png" alt="about_me"></p><p>关于macOS Catalina 10.15.6的EFI文件，我是参考<a href="https://blog.xjn819.com/">Xjn´s Blog</a>进行自己配置和调试，截止到文章书写的2021.1.18日，一切运行正常</p><p>关于macOS与其他苹果设备的联动，我个人用的是iPad mini2(网课专用板)。为了当前稳定的Wi-Fi链接和蓝牙功能(最初我是用的是USB网卡，不稳定，需要驱动支持)，我入手了BCM943602CS这一款PCIE网卡。</p><p>从同学那里借来iPad Pro 2020做了一下测试，随航，接力，隔空投送都很完美。</p><blockquote><p>macOS镜像下载：<a href="https://blog.daliansky.net/">黑果小兵的部落阁</a></p></blockquote><blockquote><p>本机EFI下载：<a href="https://cloud.sakurasep.club/s/OXFR">Cloudreve 密码:1234</a></p></blockquote><p>这里建议对于macOS或是苹果全家桶生态有着需求的，不要考虑黑苹果主机，黑苹果在稳定性和方便程度都不如白苹果，而且，M1的MacBook好香！</p><h3 id="2-第一台个人笔记本"><a href="#2-第一台个人笔记本" class="headerlink" title="2. 第一台个人笔记本"></a>2. 第一台个人笔记本</h3><p>去上大学，当然不可以搬着一个MATX机箱去。<br>所以入手了一台R7000P(首发价格) </p><blockquote><p>用了两年，看到当年的我说AMD YES，我真想穿越回去，告诉当年的我，Intel YES。</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/2.png" alt="about_me"></p><p>桌面如图</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/3.jpg" alt="about_me"></p><p>用了仿macOS的软件，还不错，基本的动画实现了，UI设计也挺不错的，但是经常出现崩溃。</p><p>正版macOS</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/4.png" alt="about_me"></p><p>因为大学是软件工程专业，笔记本上搭建了python2，，python3，java，c等众多环境</p><h3 id="3-小米9-–-小米10"><a href="#3-小米9-–-小米10" class="headerlink" title="3. 小米9 – 小米10"></a>3. 小米9 – 小米10</h3><blockquote><p>2022年了 865还是顶，4750的电池还是比较大，90Hz的屏幕还是舒服，完全没有换手机的欲望。而且手机对我个人来说就是休闲小游戏加联系工具，下一次换手机估计换个Redmi Note了。</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/6.jpg" alt="about_me"></p><h3 id="4-Sony-ZV-1"><a href="#4-Sony-ZV-1" class="headerlink" title="4. Sony ZV-1"></a>4. Sony ZV-1</h3><blockquote><p>2022年了，还在吃灰。。。。</p></blockquote><h2 id="第三阶段-初步迈入大学生活"><a href="#第三阶段-初步迈入大学生活" class="headerlink" title="第三阶段 初步迈入大学生活"></a>第三阶段 初步迈入大学生活</h2><h3 id="1-Chevereto图片站"><a href="#1-Chevereto图片站" class="headerlink" title="1. Chevereto图片站"></a>1. Chevereto图片站</h3><p>通过自己搭建图床，学到了不少关于云服务器的知识(之前搭建Wordpress博客接触过)。</p><blockquote><h4 id="Demo：上杉九月的图片站"><a href="#Demo：上杉九月的图片站" class="headerlink" title="Demo：上杉九月的图片站"></a>Demo：<a href="https://pic.sakurasep.top/">上杉九月的图片站</a></h4></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/7.png" alt="about_me"></p><p>搭建教程已经出了</p><blockquote><h4 id="搭建教程：博客原文"><a href="#搭建教程：博客原文" class="headerlink" title="搭建教程：博客原文"></a>搭建教程：<a href="">博客原文</a></h4></blockquote><h3 id="2-Hexo"><a href="#2-Hexo" class="headerlink" title="2. Hexo"></a>2. Hexo</h3><blockquote><h4 id="上杉九月的博客"><a href="#上杉九月的博客" class="headerlink" title="上杉九月的博客"></a><a href="https://blog.sakurasep.site/">上杉九月的博客</a></h4></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/8.png" alt="about_me"></p><blockquote><h4 id="九月的生活"><a href="#九月的生活" class="headerlink" title="九月的生活"></a><a href="https://blog.sakurasep.club/">九月的生活</a></h4></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/9.png" alt="about_me"></p><h3 id="3-云服务器"><a href="#3-云服务器" class="headerlink" title="3. 云服务器"></a>3. 云服务器</h3><p>云服务器定时执行python脚本</p><blockquote><p><a href="https://github.com/polosec/qfnuAutoTemperatureSubmit">python脚本原地址</a></p></blockquote><h3 id="4-初接触CTF"><a href="#4-初接触CTF" class="headerlink" title="4. 初接触CTF"></a>4. 初接触CTF</h3><p>想作为一个兴趣爱好，寒假继续学习。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>2020年经历了人生大考，虽然有很多波折，但也是顺利的度过了。</p><p>在2020年我个人多是在实践应用投入了精力，2021年我将会在原理以及应用的代码实现付出。</p><p>目标就是有事情做，写写教程，平平安安就是理想啦。</p><p>2020年真的是魔幻的一年，疫情迅速席卷全球，中国顶着巨大压力成功遏制，没想到（应该是意料之中），自由的西方资本主义国家没能遏制疫情传播，天灾人祸，诸如此类。</p><p>2021年一定会好起来的，提前在这祝福各位新年快乐，事事顺利，一切安好。</p><hr><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png"></p>]]></content>
    
    
    <categories>
      
      <category>年度总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>年度总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《零基础教程》Chevereto-年轻人的第一个私人图床_第2期</title>
    <link href="/Fluid/HowToDo/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%20-%20Chevereto%E5%9B%BE%E5%BA%8A/"/>
    <url>/Fluid/HowToDo/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%20-%20Chevereto%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h1><blockquote><p>作者：上杉九月</p></blockquote><blockquote><p>排版：上杉九月</p></blockquote><blockquote><p>封面设计：苍玄之包</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>前几天用hexo搭建博客首页的时候，想给网站来一张高清的壁纸。然后用picgo把一张比较大的图片上传到gitee。</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/1.png" alt="chevereto"></p><p><strong>这时出现了第一个问题，picgo不显示该图片的缩略图</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/2.png" alt="chevereto"></p><p><strong>本来以为是picgo的bug（beta3版本），便用手机上的图床软件上传</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/3.png" alt="chevereto"></p><p>显示上传成功，打开gitee的仓库也可以正常访问</p><p>在感到很疑惑的同时，我将该图片的URL发到了群里，让朋友看看能不能访问</p><p><strong>然后我收到了朋友的截图</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/4.png" alt="chevereto"></p><p>gitee图床大于1M以上的图片必须登录访问</p><p>也就是说把大于1M的图片URL引用到博客，其实并不会跳转显示图片</p><p><strong>这时候我在图床APP的其他图床中看到了一段对于chevereto图床的描述</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/5.png" alt="chevereto"></p><p>粗略的看了一下教程，实现效果还不错。</p><blockquote><p><a href="https://pic.sakurasep.top/">上杉九月的图片站</a></p></blockquote><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="方案总结"><a href="#方案总结" class="headerlink" title="方案总结"></a>方案总结</h2><ul><li>方案一：神枫云 + FTP外部存储</li><li>方案二：域名 + 轻量应用服务器</li><li>方案三：备案域名 + ECS服务器</li></ul><p>我个人最推荐方案二</p><p>我个人是在腾讯云购买了一个轻量应用服务器，地区中国香港，这样就免去了备案的繁琐</p><p>阿里云的服务器不知道为啥访问比较慢，买了之后就退款了</p><p>建议买腾讯云，价格是相同的<strong>34RMB一个月</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/6.png" alt="chevereto"></p><p>当然我之前介绍的神枫云也可以，而且可以省去配置宝塔面板的步骤</p><h2 id="基本安装"><a href="#基本安装" class="headerlink" title="基本安装"></a>基本安装</h2><h3 id="方案一：神枫云-FTP外部存储"><a href="#方案一：神枫云-FTP外部存储" class="headerlink" title="方案一：神枫云 + FTP外部存储"></a>方案一：神枫云 + FTP外部存储</h3><p><a href="https://www.sfxyun.cn/">神枫云首页</a>注册账号，充值，购买主机。</p><p>建议购买这个3RMB&#x2F;月的服务器</p><p>相比于1RMB&#x2F;月的，月流量变为无限是很重要的</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/7.png" alt="chevereto"></p><p><strong>稍微配置一下，进入主机的管理界面，进入在线文件管理</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/8.png" alt="chevereto"></p><p><strong>上传chevereto底包到根目录</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/9.png" alt="chevereto"></p><p>这里chevereto有免费版和付费版，我们使用付费版来进行搭建，因为付费版才可以使用外部存储，神枫云只提供了300M的数据库，存不了几张图片</p><blockquote><p><a href="https://cloud.sakurasep.club/s/M9sR">chevereto免费版-Cloudreve-密码2333</a><br><a href="https://cloud.sakurasep.club/s/ZyIE">chevereto收费版-Cloudreve-密码2333</a></p></blockquote><p>然后解压底包到wwwroot文件夹</p><p><strong>此时wwwroot文件夹内应该是下图所示的目录结构</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/16.png" alt="chevereto"></p><p><strong>解压完成之后，进入域名绑定选项，这里有一个赠送的域名</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/13.png" alt="chevereto"></p><p>访问该域名进入安装进程，只修改三项</p><p><strong>如果忘记了可以在面板首页-虚拟主机信息找到</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/13.png" alt="chevereto"></p><p><strong>然后是注册管理员的界面</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/25.png" alt="chevereto"></p><p><strong>顺利安装完成</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/26.png" alt="chevereto"></p><p><strong>如果一切顺利的话现在网站已经跳转到了chevereto图床的首页</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/17.png" alt="chevereto"></p><p>点击右上角的登录，把刚刚注册的管理员账号输入进去，然后进入仪表盘，到这里整个安装过程基本结束了。</p><p>不过因为神枫云的数据库空间很小，只有300M，根本存不了几张图片，所以下文的外部存储功能便十分重要。</p><h3 id="方案二：域名-腾讯云轻量服务器"><a href="#方案二：域名-腾讯云轻量服务器" class="headerlink" title="方案二：域名 + 腾讯云轻量服务器"></a>方案二：域名 + 腾讯云轻量服务器</h3><p><strong>首先去腾讯云购买一个轻量应用服务器，并且选择香港地区来免去备案，镜像选择宝塔面板</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/10.png" alt="chevereto"></p><p><strong>然后来到服务器的控制台，在防火墙里添加8888端口来允许宝塔面板的访问</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/11.png" alt="chevereto"></p><p><strong>在应用管理里面可以获取默认宝塔面板的登录密码</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/12.png" alt="chevereto"></p><p><strong>后期记得修改宝塔面板的登录端口以及默认用户名和密码</strong></p><p><strong>登录实例，可以选择网页直接登录，上图右下角，先复制命令，然后点击登录</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/17.png" alt="chevereto"></p><p>进入宝塔面板，在软件商店里安装（仅搭建图床）</p><ul><li>Nginx 1.16</li><li>php 7.3</li><li>MySQL 5.6</li><li>phpMyadmin 4.9</li></ul><p><strong>软件列表如下</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/27.jpg" alt="chevereto"></p><p>然后在侧边栏找到网站，添加站点</p><p><strong>填入你购买的域名，创建数据库</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/19.png" alt="chevereto"></p><p><strong>然后在站点的设置里添加伪静态代码（如果是现在修改了代码，等会复制的时候不需要复制<code>.htaccess</code>)</strong></p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs html">location / &#123;<br>    index index.php;<br>    try_files $uri $uri/ /index.php?$query_string;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/20.png" alt="chevereto"></p><p><strong>然后在你申请域名的服务商添加DNS解析</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/21.png" alt="chevereto"></p><blockquote><p>主机记录@ 记录类型A 解析线路默认 记录值是IP地址 TTL 10分钟</p></blockquote><p>稍微等上一段时间，就可以用域名访问你的chevereto图床进行安装了</p><p>安装过程同神枫云的安装过程</p><p><strong>如果你使用的是这种方式，那么一般来说数据库就有了一定的存储空间，例如我个人使用的就有约45G的数据空间</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/22.png" alt="chevereto"></p><p>这样的话存一些个人的图片还是没有问题的</p><h3 id="方案三：备案域名-阿里云ECS服务器"><a href="#方案三：备案域名-阿里云ECS服务器" class="headerlink" title="方案三：备案域名 + 阿里云ECS服务器"></a>方案三：备案域名 + 阿里云ECS服务器</h3><p>这里ECS服务器我购买的是学生优惠版本</p><p><a href="https://dashi.aliyun.com/site/buy/activity">购买地址</a></p><p><strong>这里虽然显示最少购买6个月，其实可以在调整配置的时候可以买一个月先试试</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/33.jpg" alt="chevereto"></p><p>我这里因为已经购买了一次，限购一台，所以价格是121RMB</p><p><strong>这里仅需要修改购买时长，操作系统等会去更换</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/34.jpg" alt="chevereto"></p><p>购买完成后去阿里云ECS控制台，将实例停止运行以更换操作系统和购买云盘容量</p><p>注意：云盘容量按需购买，因为服务器的云盘是按月付费</p><p><strong>在镜像市场将操作系统更换为宝塔linux面板</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/35.jpg" alt="chevereto"></p><p>自定义实例登录密码，一会要用到</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/36.jpg" alt="chevereto"></p><p><strong>在实例管理界面，进行远程登录</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/37.jpg" alt="chevereto"></p><p><strong>选择第一项网页登录</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/38.jpg" alt="chevereto"></p><p><strong>输入”bt default”来获取宝塔面板的默认登录密码</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/40.jpg" alt="chevereto"></p><p>记得放行安全组端口8888，然后用<code>公网IP:8888</code>访问宝塔面板</p><p>剩下的步骤与腾讯云教程类似</p><h2 id="为域名添加Https访问"><a href="#为域名添加Https访问" class="headerlink" title="为域名添加Https访问"></a>为域名添加Https访问</h2><p>打开你所购买域名服务商的控制台（这里以阿里云为例子）</p><p>在域名控制台-基本信息-SSL证书</p><p>用免费版就可以</p><p><strong>填写一些必要的信息，审核通过后下载证书</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/41.jpg" alt="chevereto"></p><p><strong>这里因为我们云服务器安装的是Nginx，所以下载该类型</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/42.jpg" alt="chevereto"></p><p><strong>然后解压缩得到两个文件，一个key，一个pem，现在登录宝塔面板，复制证书密钥和内容到网站-设置-SSL-其他证书</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/43.jpg" alt="chevereto"></p><p>保存后你的域名就可以使用https访问了</p><h2 id="FTP服务器搭建"><a href="#FTP服务器搭建" class="headerlink" title="FTP服务器搭建"></a>FTP服务器搭建</h2><p>如果你购买的服务器自带的数据库空间不足的话，就要使用到chevereto图床专业版的外部存储功能<br>仪表盘-设置-外部存储-添加存储</p><p>搭建FTP服务器的方式应该有很多，这里介绍一下利用云服务器和宝塔面板搭建。</p><p><strong>原理：FTP服务+域名解析</strong></p><h3 id="1-利用腾讯云轻量应用服务器（价格参考50GB-x2F-一个月34RMB-域名年付）"><a href="#1-利用腾讯云轻量应用服务器（价格参考50GB-x2F-一个月34RMB-域名年付）" class="headerlink" title="1. 利用腾讯云轻量应用服务器（价格参考50GB&#x2F;一个月34RMB + 域名年付）"></a>1. 利用腾讯云轻量应用服务器（价格参考50GB&#x2F;一个月34RMB + 域名年付）</h3><p>教程前面的部分与前文内容相同，不同点在于需要在宝塔面板额外安装一个<code>Pure-Ftpd</code></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/28.jpg" alt="chevereto"></p><p><strong>因为使用chevereto图床的外部存储功能需要将ftp服务器存储的图片映射到一个域名，所以要在宝塔面板里新建网站</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/29.jpg" alt="chevereto"></p><p><strong>然后记得放行安全组端口</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/30.jpg" alt="chevereto"></p><p><strong>然后将相关信息填到chevereto的外部存储设置中</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/23.jpg" alt="chevereto"></p><p><strong>这样就成功将chevereto图床与腾讯云FTP服务器连接了</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/32.jpg" alt="chevereto"></p><h3 id="2-利用阿里云ECS服务器（价格参考200GB-x2F-一个月50RMB-域名年付备案）"><a href="#2-利用阿里云ECS服务器（价格参考200GB-x2F-一个月50RMB-域名年付备案）" class="headerlink" title="2. 利用阿里云ECS服务器（价格参考200GB&#x2F;一个月50RMB + 域名年付备案）"></a>2. 利用阿里云ECS服务器（价格参考200GB&#x2F;一个月50RMB + 域名年付备案）</h3><p>方法与前文腾讯云搭建FTP服务器相同</p><p><strong>记得放行安全组端口</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/30.jpg" alt="chevereto"></p><h2 id="chevereto图床基本设置"><a href="#chevereto图床基本设置" class="headerlink" title="chevereto图床基本设置"></a>chevereto图床基本设置</h2><h3 id="1-网站"><a href="#1-网站" class="headerlink" title="1. 网站"></a>1. 网站</h3><p>推荐修改</p><ul><li>网站名称</li><li>网站标题</li><li>网站描述</li><li>默认时区</li><li>网站运营模式</li><li>网站隐私模式</li></ul><h3 id="2-用户"><a href="#2-用户" class="headerlink" title="2. 用户"></a>2. 用户</h3><p>推荐修改</p><ul><li>开放注册</li></ul><h3 id="3-图片上传"><a href="#3-图片上传" class="headerlink" title="3. 图片上传"></a>3. 图片上传</h3><p>推荐修改</p><ul><li>最大文件大小</li><li>缩略图大小</li><li>中等图片大小</li><li>水印</li></ul><h3 id="4-主页"><a href="#4-主页" class="headerlink" title="4. 主页"></a>4. 主页</h3><p>推荐修改</p><ul><li>样式</li><li>封面图片</li><li>标题</li><li>段落</li></ul><h3 id="5-电子邮件"><a href="#5-电子邮件" class="headerlink" title="5. 电子邮件"></a>5. 电子邮件</h3><p>推荐修改</p><ul><li>发送名称</li><li>发件人的电子邮件地址</li><li>电子邮件地址</li></ul><h3 id="6-防洪保护"><a href="#6-防洪保护" class="headerlink" title="6. 防洪保护"></a>6. 防洪保护</h3><p>推荐修改</p><ul><li>防洪保护</li><li>以电子邮件通知</li><li>每分钟限额</li><li>每小时限额</li><li>每日限额</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>chevereto图床作为一个图片站来说还是很不错的，用来存放一些高清图片（壁纸，美图）等还是很不错的。不过搭建chevereto是需要一定的成本的，如果预算不是很多建议去找一些其他的公益图床。阿里云ECS是我认为最好的组合。</p><p><del>如果平时只是写写文章的话，我还是推荐使用gitee图床，上传之前记得用格式工厂压缩一下图片，压缩成JPG格式，可以极大程度避免图片过大的问题</del></p><p>Gitee图床审查变得严格起来，出现了很多误封现象，这里建议使用<code>Github仓库 + jsDelivr</code>。后续会出教程。 </p><hr><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/about_me.png" alt="about_me"></p>]]></content>
    
    
    <categories>
      
      <category>零基础教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云服务器</tag>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《算法学习笔记》</title>
    <link href="/Fluid/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/Fluid/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a href="#文章简介" class="headerlink" title="文章简介"></a>文章简介</h1><blockquote><p>作者：上杉九月</p><p>排版及发布：上杉九月</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>开一个讲解算法的栏目？我准备准备。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="普通判断法"><a href="#普通判断法" class="headerlink" title="普通判断法"></a>普通判断法</h2><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXN 10000000</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> pr[MAXN];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Prime</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> temp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= num; i++)<br>    &#123;<br>        temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">2</span>; j &lt; <span class="hljs-built_in">sqrt</span>(i); j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>)<br>            &#123;<br>                temp++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(temp &lt;= <span class="hljs-number">2</span>)<br>        &#123;<br>            pr[i] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> num;<br>    cin&gt;&gt;num;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= num; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(pr[i] == <span class="hljs-number">1</span>)<br>        &#123;<br>            cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="埃拉托斯特尼筛法"><a href="#埃拉托斯特尼筛法" class="headerlink" title="埃拉托斯特尼筛法"></a>埃拉托斯特尼筛法</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>埃拉托斯特尼筛法，简称埃氏筛或爱氏筛，是一种由希腊数学家埃拉托斯特尼所提出的一种简单检定素数的算法。要得到自然数n以内的全部素数，必须把不大于根号n的所有素数的倍数剔除，剩下的就是素数。</p><h3 id="图片演示"><a href="#图片演示" class="headerlink" title="图片演示"></a>图片演示</h3><p><img src="https://cdn.jsdelivr.net/gh/sakurasep/images@1.4/stduy/idea/1.gif"></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXN 10000000</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> prime[MAXN];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FindNum</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-built_in">sqrt</span>(num); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(prime[i] == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i * <span class="hljs-number">2</span>; j &lt;= num; j += i)<br>            &#123;<br>                prime[j] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> num;<br>    cin&gt;&gt;num;<br>    <span class="hljs-built_in">FindNum</span>(num);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; num; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(prime[i] == <span class="hljs-number">0</span>)<br>        &#123;<br>            cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><a href="https://www.luogu.com.cn/blog/cicos/notprime">洛谷用户@学委的原理性证明</a></p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXN 1000000</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> prime[MAXN];<br><span class="hljs-type">bool</span> check[MAXN];<br><span class="hljs-type">int</span> temp;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FindNum</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= num; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(check[i] == <span class="hljs-number">0</span>)<br>        &#123;<br>            prime[++temp] = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= temp &amp;&amp; i * prime[j] &lt;= num; j++)<br>        &#123;<br>            check[i * prime[j]] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(i % prime[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>             &#125; <br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> num;<br>    cin&gt;&gt;num;<br>    <span class="hljs-built_in">FindNum</span>(num);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= temp; i++)<br>    &#123;<br>        cout&lt;&lt;prime[i]&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>; <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>文章归档</title>
    <link href="/Fluid/"/>
    <url>/Fluid/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>番剧</title>
    <link href="/Fluid/"/>
    <url>/Fluid/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>关于</title>
    <link href="/Fluid/"/>
    <url>/Fluid/</url>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=26135813&auto=0&height=66"></iframe><h1 id="Me"><a href="#Me" class="headerlink" title="Me"></a>Me</h1><blockquote><p>Always believe that something wonderful is about to happen.</p><p>希望自己能够安静的一天天生活下去</p><p>写写文章，做做创作</p><p>19岁了，为梦想付出努力中</p></blockquote><ul><li><p>爱好：ACGN，Coding，创作</p></li><li><p>喜欢：探索新奇的事物，可爱的女孩子（bushi</p></li><li><p>目前在玩的游戏：Arknights（二周年入坑），Mihoyo（半弃坑），GTAV（联机首选），各种各样的音游（首玩邦邦）</p></li><li><p>运动：散步，骑行</p></li><li><p>目标：人民教师||自由开发者||自媒体</p></li><li><p>希望拥有的技能：多国语言||美术设计||3D建模</p></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/haimao01.gif" alt="很可怕"></p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><details><summary>此生想要完成的事情</summary><ul><li><input disabled="" type="checkbox"> 开源一些实用的工具软件</li><li><input disabled="" type="checkbox"> 有一个稳定的工作</li><li><input disabled="" type="checkbox"> 持续运营自己的自媒体频道</li><li><input disabled="" type="checkbox"> 给喜欢的妹子画插画</li><li><input disabled="" type="checkbox"> 我写的教程能帮助到初学者</li><li><input disabled="" type="checkbox"> 遇到命中注定的那一个人</li><li><input disabled="" type="checkbox"> 出Cos参加漫展</li><li><input disabled=""  type="checkbox"> 走遍大江南北，记录下来我的旅程</li></ul></details><h1 id="Sakura-Team"><a href="#Sakura-Team" class="headerlink" title="Sakura_Team"></a>Sakura_Team</h1><p>趁我现在还有足够的精力，我会和朋友一起建立一个团队</p><p>一个人的力量是单薄的，团队的力量是无穷的</p><p>目前团队还是初创阶段，名称和目标还在规划中</p><h1 id="Article"><a href="#Article" class="headerlink" title="Article"></a>Article</h1><blockquote><ul><li><a href="">2020年度总结</a></li><li><a href="">我的学习笔记</a></li><li><a href="">零基础教程系列</a></li><li><a href="">应用使用指南系列</a></li></ul></blockquote><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><blockquote><ul><li><a href="https://pic.sakurasep.top/">上杉九月的图片站</a></li></ul></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/About/1.png"></p><blockquote><ul><li><a href="https://sakurasep.site/">上杉九月的博客</a></li></ul></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/wallpaper/blog_index.png"></p><blockquote><ul><li><a href="https://blog.sakurasep.club/">九月的生活(Typecho)</a></li></ul></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/wallpaper/blog.png"></p><blockquote><ul><li><a href="https://halo.sakurasep.club/">九月的生活(Halo)</a></li></ul></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/About/4.png"></p><blockquote><ul><li><a href="https://cloud.sakurasep.club/">Cloudreve</a></li></ul></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/About/2.png"></p><blockquote><ul><li><a href="https://pic.sakurasep.club/">Oneindex</a></li></ul></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/About/3.png"></p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>追剧</title>
    <link href="/Fluid/"/>
    <url>/Fluid/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>所有分类</title>
    <link href="/Fluid/"/>
    <url>/Fluid/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>所有标签</title>
    <link href="/Fluid/"/>
    <url>/Fluid/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
