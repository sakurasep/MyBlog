<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>九月的生活</title>
  
  <subtitle>New Dream New Start</subtitle>
  <link href="https://blog.sakurasep.site/Shoka/atom.xml" rel="self"/>
  
  <link href="https://blog.sakurasep.site/Shoka/"/>
  <updated>2022-05-09T15:23:06.859Z</updated>
  <id>https://blog.sakurasep.site/Shoka/</id>
  
  <author>
    <name>上杉九月</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从零开始部署Hexo博客(番外篇一)</title>
    <link href="https://blog.sakurasep.site/Shoka/Hexo/Hexo%E7%B3%BB%E5%88%97-%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <id>https://blog.sakurasep.site/Shoka/Hexo/Hexo%E7%B3%BB%E5%88%97-%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</id>
    <published>2022-04-11T11:20:50.000Z</published>
    <updated>2022-05-09T15:23:06.859Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误,请重新输入" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2fbedbfcfe5c9a39b449ed3084fa2515563e8fd44f84417791e6bd23c9f93b98">59a3ac7d8ec9f30ddec936f67fb6c1c5700749d0cae6a2e5b4efdcd8477f86454d7d665718094fb399de202b0a6161bcf5ed70015afa886e72db05dc07fa544fa19dc4b32660ed9b52e0d4b47e6c4da506ebf5524feeef14b0d4f8f31e44b30687d256e32ac35c3e47ac5e4d30061a5551fabbbd242bc66aab124ccb81546792f8b487de92b638ebc4f4706e635d8602f429318354d730c6547051c545719b9595bf3be8617fbcde1b2f57d86dd4ae48c6e0bda67047132c02dbab9377ccae9a132525d27e2fee16da37c05b9a6ba7aacfc9cb24b2d71dc4a99a85271aac813cec25fbce31583def223562b18623ae6f08b985ce32c58ad7cd426b47a4bf12344040fd05810427200405fc8f9f06cc6880b327c0a9c86e0b1ab15ac5ca0414ad774ae49c65e23fbb40049cccde4075a43ccbc272a1c4976068e453b5ec1034790d582455b4397de207e6f863ba4457b6995e3551dec7634c055a0ac5a351bad10612eeb70a560246e80c38d12673e949edf1e69b58ebe9297543ce51ea216df1f4ac3370d3f9710308943954eb4e2599adef7bb4c17e37c06ed93661fa21d1dfb10b851d6048a6f9689884a022a50c5441f809f90aa481f8778c1f8631e0f879fd168149cecd927d3e591c6ef52d4ecf78262a37e5fcebf91b60b915991dbe49e85d9971a95fc8e1e27d5fb560b20e18a9d5e834616efa92cd1e3364aa8f31ad2349a59803fb2d17dc3498a4fafbf71aa547e8ad20d0037e70e58166dfad272017cadbd54d6c7db035853a7647c49c5f6030fb69843371dc4a2a0b56fef7790eaa7b8f9ef7fb2487726ddbea387460ab5ef3c2b80d1b5cfe09a932aa051109709ff7b8fc5435005377ea0687d3b9994438444cb0781ff036c24b20b28cda125638cc479d055557cc80f826bb4b8e745e6b71ae133d049fbdf9d48215476cc366c5e1b6744d32f2d62f09327aada34c44cd184a954368bfd53d8ff389154a04fc93e79110d9194caed358422cc3d03504d42cfc9d1015b77da8c4c7e2cb1182692865d53f6dd33cb205ba10a0c6f75865faaab207c9e3fc358d6e00596461f719a1db9325ef0c787ef3bc75023ee96c85e2165746e9fed335c16b57449854b806a9f4aba15187b515cf939e50d79cd852f5f093b21aea13ff854f77233e80d8dc157e0999a07e207bb8828806b68e7f7f26cb9f322999b1b3d1dc203872d745a0648cb5791c003a061cd5f479abf0527b6dfc5e72fc79dd4b9fc1af0389fd6187bd0bd2e80a10c5ec2660f3f6fc8a471e125415bf19cb6e6e3e0e5c940da2f918ac4166e3c0ed0e7301847ddb9e9a86ca535b8a5d51a34634d74ce56f16dea30b96295e7e8703a35adf039b8f7602d8411e03c8a598ab468de7e2da07861769fec4c1b9636545e6cbad0e85d19701ebf31467ac4765122f211089a0c1c2eedec31f6500d7120756b8bebecf7052eae2243287b716159178edf7ed74cd90ae8e747b2145fb8cd1e58ccfb398085d264a124e0837deb77f2af43bb8018c80194327f063058f7a823911aea70529e90b749dd61e943396fe5001ba49ce1e672a31b73dfd4c61c40596f69b730d65128c55fef75160f0c71611421030cbc2f2a4d84c0d19b32c3241452c2dcc605744624082a7779071444c2308c99eb6ed597410c4bc49f4de6e08c3d9ac09fa72952f14b425aca62d8021f7c5e02da7a9c98b2c35d1ddee86cfc9911b3cc6190a23621c502c387c8bbd58153331a52037751ed1bfe59614a8e5fe2681ecddcd9148bd9cf51fcf1c059912de4bbe6f6870195e27e92d3cec00f7f33dfa1b81a5384d7c465f2495fe818849e60cfd42a5f232b61a4b52e928554690ee151f3b121acbe1a2868e2cebd2ada4b077dfaa86b42048707562da4395297517caf310149d236b6e37a3125ae877aeb915569968002e3d0927deb160808333600dd05567e258e557267ea1f0fdda857c8b5475da4355794297c5722bfdfd016f658dc16792af1784e5ebf81e8ea4f48e3bddc3bdef0694393181c56c9d8dfdfc7d9c2fd7e09e0dbbd94313c612756853dd932792c3e801204f0efb6120ce4fd63dd01c1875cf2ef1a5e9efe4a6942e719e2804655713e81e6956640edae41350351f28eec8b28a58966dbe053bd851783f1af60758cf0cb20e753859605bc1fd88fb2a0418f52fe396dc28180a59272f1d80a96f9f641b91674ac1e262ef2f9f5d0e5ab4cc9f2ad49ff6d6211b6bab47e4f5e91fc0a08e6695b6cbf19677fceeb998548ded44f9cec963387cf0e2b8231f8b778b0a04a08c60435b555e88896ee40118e70538c1cac1c73ec2a92868a1d8eff972c924e6d87cf3a93da48c11b3cbb374678f1c2b6372b8fd35b3f6419f90e4f4226c0519ff3d8eb1ec73b8691fcfe2c09ec9cfa95a1639f2dc232138942d967205f824cb48426b46f096cd06551a5ee4f1e990483babf559dfb92b75cf32dbd8f6e299cbabb7a1de4e426d638454eb8ff515249843ef3285b83afaf9ff544c4c63d5ecb8b4dfabc223d256bb5bb4ffb0111b682269f459c9d6960bb6f22560e570a96d2b9e55ef3e3662b06a32a7227e0868d7642b23020e5e6eb8cebc82a229bff35f18e9fe472a21a3392df05f028f9b19cfda6842f8427d2a0e25eb6f744f97cced79798921d7ef4dae240b5fbb74949e708aebb33368eabcf4dfb29f9da827fa9354913201cc123cdfd2fa3ad5d0c293bd90a16e0862c3971efbb28d8a8d5b4d854f36e0d9eb08fe4467a0b33632d642086379c1d086d258b284bd0b77ef89ef15d745c3cb549070607600a6a0211de869d73f7b5438c5c66efc0a536409f932cdd456a7f7db2ec5cf82ed8de555b16d29421886185b5599aa3fdc2c1f42c039073bba2b05113e1e3222829fe1ce75eb90a5bb17fb440dda97a63e61b368e30ec11b5cd95c028af31013c35cd1187f2706553dfc742240d47913db07cc4330628c322a0b004cd470ce09bfdf3fd84bc87554c415c2133ba3585b8462302ada64b890a4b6f06cb34d333fe76efb16524178fbd2da0ef309df84638cfec92e6a1eb30b16f02d1413b4b9191561cd8e94351916884411df32f2f48bb37c4daefd3bcb301dbd8bc1f82d68859c0b8c199808a1db3f6d93eca4df6af4be7be92f0239a14e3c2185385f1d4f5dac94ffc29679f4fe3cc3e144813b157275b711e289973be85fd151b86622682a05c4b469470c547c12447bcd64610a7dc383965535054819ddebea692c6011135ea0dbdab0a51b9e6ba57ac5188dd02e2102ec763a71a7c9359f1cd43a480127b9747a0eb41d62fd8db6f78384e6c440eca115dc00133fa2f385d9f5bfa44fb04ae47480d635b8d9b2b16ff7c85108d0803fd9b19eedd3bb0c0cc6d8244a9219c237985cc2977ea2042c4f0014bb83387411765d5ce50039e781bbf03b386165162bd86b5ee0a639b898aed141c78b564ee4ad049feab41e3375cefa0cf489a00ec6dd943d9563165b8c225366a61e3c7cc284fb4447de1c70a245cd5e31ab5ef89324ebaa3d0a81614ba587193eae2524208b1621958ce1fab8cd17236b529cde7c6448b9d431da27d25872f49bcc30f6c1e8e183fc9f2cbf214e94ed010235022389807b37c4da6e385076202825736a7842b5643c987c181666e994a38c9db02ebe4a1045ee561ec5362431cf6bc61dae1b0049d11730a46dd0c1656283f4b2b58464758d92fa25f151ed6af2bf22145da4b514ecee9febb92f55560dc51a9c8236a5db2b8b17eef6d71db6112f3861145fdb6484d8173047d70a71cea6392da7d1453f86c971f4bbefcd8f3418dc7b4d117b3480af38b46c1dedb77a28955adc4515c8aba08a26a5dd88fc3f2a5c25e26c5c30ff21b490a58df5cb5b1af95f794d84715f62673d49e62b2ffbfcc8cb4e795c37e603473dff56743548968dc2bdbed1a83ddef685a10307d15265f931b7e30a8856bd1c34e81ca7d8cfade5b202ef37671704bbd73a2ebae039862d26f91ce10c7d5c041dcfecbaa3c9a0036f84206e01775f9fb5236ed27ea1038a957c3cff34f875069221d8ab36d057daf78cd6749b257f155a9441e470ee5fafb0c0fe9ffdfe993ac3bdeb3956aff19e859e6073d9aa18c43abe557632bf028c45e1b9d6cbaa3d974bead21039fe108357afb7a71303591d9af80eab4f95e586202bf4428968c27af1baad9e5018f5f7c64c25f406387adb7fc2a490207de756d5c281709f916ae7b426a87ea1402c0686083884c4f09283b2f92b031bd8cf8e3ef220673b479a2edef62d77264d0cd5e7a2a74d10b4994d14a58603be9bd97aad139661d6ab1ba53406b1d854923bc8e08cc6e00852b0fdc7befd0fafd396d49655fa1336638732e11c31a10f67596f6b892c6f2b39d33f35399816202f3a696611967e1b1e9c264400c8fd59ad514c11d086f8cb4642b22b7eedd1d7fbb7651b33bd1e3e9b881f8b2bda02323f28c132a618cf0a15239664efa00b50e1963754f3e5c9e2a74c6e36e7d8ad5af3229dd5b5321189960574894f1c12e648ec8e5b4c01e1cc7b6a51d8caddd639cb08b625931a8d18f2f27e072f061bea6442979f4659732980fa9db8eead88417433825156bc8b1a229344781e86bdd590302159547dffb706545ea4e8283d8719a4edd030a14d4415b7430f7a5cfb9e26d3018ca67c0d7f8ad9188935552c32b406988009a05dcfef585f5aee751f1898be914b19086bd38a2e7df34de68149981042b858fa532f56e55ed1185a61f8a75a18d1a83f90510b9ea3b2b4c4073e587b15def8b2b9db3de9230e08d8ed54802728ff30f55be5c37894b61c54a7eff1098739540e42f43cab800ae893c7a176318dc38e7345a6815ed0991f29a2990b0306018fdb3376e1fc6e3caaad11079ccf7275e011711b26f0fe8c4eb3eea246af97fc82ff27d33787f9f3ac049c305ddd9566f55ca01ad50461c4a5714999f81a69d5fc14e259c62e2f70cfe6d5c75fb8c9d5db16359ebb28be38209f739f7a72a8665ec6df5cc45ac86756f8a8e9e45850fdb698138c702059fa3bc1f1ec706c6e9290d89814abfa716d4e59708a7218672809509cf0d8a589608d37b83d68cc9674b08818df072bcd5346b5392c4d9240519b73676becb761c11ba2c64ef987caa1961d1e58c98945661eef9afed29421a9318b2a163a337b7a2aca5e3ed3cd39ec05b8f46f183e2aee18ff6b36f133bd831a22f4d72019f5d6d98864858f0e772eadd16468bc5de9064d464ee10997244419c7ed29ab335ff668944914b8d36f36c704fb4f3fb14e0e70f0570504c9543c8df6851cd58bc225863ec814de0671b9f00de213a543b7293003965ec101c0e733e726578e0ac4fe7cfd8373a4d16f64866109f160100597f1e220942f87a61f6e132eb286644b19a62dee44214e5c352ccdb6b71e89feab72c1371eb34cd9d8da29daaa3731f5089a7d2737e14b1106f11ca4adbd38b8a03a6c538056d1f30b05be910ec5d580c052770949a91e4ac06dbd330519311b01030b3759cfa5c79956656d9c4fac84654f77e3eb1f534c2cf901194e929ec5d0119c3ebf7d7e88300b9519ed52a78cbecf3c0db9f9e7e487c54a4ea001b47879ce6aba2803834f98e6a071f8b96f0586e51903f4830096c06a722e2b1148b9109168f62605a0c769a2ede64c72eac4efe46d15c6eea35fecc9434746fc17af6e5b22e7b72ec40c366f8392a3694d1b4b3c22fbe6a24e58ef091a0f60ca13d366632fdfa47db5609b10ab729dac6329823f36e61575668c6c99c711f8cd999f2836dfda19318bff0d94b8c55bd3358ebfea9c51f30615e253750e85cdad3be2b24369097249d741dd3323ffe9d65c22db4e85552f295e1d3d64e48f71f4e65ab070e8bd95f93905ac5112e2a3199c6c09e5ce5977e155c8be82ce5beaf31627e9a3c072084597179fab41e8c9a24dda58c5c4548f5bdba83fc1981c71cd4f60c0332f6f5b8847d4b3fd8dd8e0ef59965b8b56da987737a0bbecc190c860a7b0e6d3c73f3ee8af47fe89ea780ff8b6acf3de6047ab045ecb710a929d40effc2a72285d9182285f52dab9529f846a829c0831d0c9498ae8b0d12e7b4734ab714e9285f105a423e7b38155d55536c51f8e220ede8acf88f5b1a5c7ddcc6634bf2bbfc16cfd545b1048f8011d6f0ac26878a969f0dfe116108220d8749b28c3dc7836607c78a319c9e08a95dc5150b8877e7a20c08912630d033653efe1ce6db743426ef55ff05dfa695af93a56c85da588c5772a7ea6f67636f2ba688085b77c272e23ffe0b53e4e855b34051839912f087b2eca1788aa8474d096fb88e0fedfa82bf08477f4a48797a5f90aad3e0e31260e9e89ce19f46d73b4eee7dce1e5a55db1df1927c3274b743102cc9ba6230a5ed0365026128da2327405aefd371b1bdafeb87e6fb469748f723561e32e9e6551a8406f98de54b72308b568444408a89b891f7191b8ed2a7105141e8d8e3c96410490e33c52c00c2774abbdb525f639a494f1bf7ff69e77acb43a72985abc0e90c60c0ae48bc71e1ad6e009efcbe0b65f158c29ceeeae815914a55261d1d79572619ce5b2f382dd8b635b55aab9018559a78b959e93ea7b3827f8eb806c1f08df2059df02955ee553296c8d52c8859c7214a3559a021fd768cbd97d4d24dcea2d5787ee31a5b5e738249bd1a1a6b066f1588518c9ee6ebb974c9e4bdb7b8b3693d06c9b6f1b2f43c946bd9b93c74c274b377f7014ee6389a04a8f1ddf0ea0fd964ccf25e21a36883c66f54ddd036c3190dc80b12a56be51d1c7bb11a2c91b222754c3a6b8ec33fb8ba44b69214a377241f9fc611b82c12e49d7d05163f8ddd68e4d727fdc38fce19ac7867388706dfc0fcf7c2be3e7d469ad0e18c89d493a768f7ff8038d2f348ca00a661b0ff033be181c31a87d5fa1ceb174500c5c805fc930c33d9509c3e2355feff6e600d62962b8142977ef00fdcead994fe5de4d1731a39f44462e52b83f8ce42254087a670c991044bd3319ba9d3d48694d5f7e75e56d1c90a83ca473f41505c2e0ef05805f211907e3d9d5ad96a39e27394f44944c7d2b78b4f535161a3ee02739c0cec21eaadf4ab4ff509cf99962c34c4ecd133b1e839e72a0b60b8e927b6aaf6de78820a0467575092e01336ef1fecf0ea8bc76b8526cdab7f606a7bcb844ad6d72aef8b2a5c87974e96331b2db015b0a6811a5c71136e5686017b7e6fb4a38bd52395143e979e265137bdb2db18788b4143f1e22b266e7765094e656ddb90da84f80b6dd86ef35b886681a3acb5c6a1ba3284ad84b6f2be79f028d79d14c38324264d0f8efeba63ddd51133c9cb913faadb5637fe8a0cedc0a520bb50f0f36474d342a51247d74ecc387b091ea978b939a12e4e7248561fe5f25cbb407d260aa764f331007424f639c3cdc353ef35bb9623b06efe69641d237f00c25da90ab4d2e3c8425143fa82c4626eb690c0d2e86c2c7d4990f1e327ef9fc5f940b588784d8e54107697c59c4132e16c3552679f31c467506f3c62fd3b60d81dea4c5d3884b7fe4d3d47e0273037cc88483c89656f48c8cddda23c87deed6cd7d7e99d1d7ce367ef911703379b0c17f81c17d04b8eaf06d807bde00fabfcff3e190fd2df5609d87509f9e59786e6fb5482aed34c7ceb4dff08fe014938ead962984f46682da2569e33db2674ed6625af6688520057ba4f7148d0f6d6c52c7c460f4e6ea4d2ae65b82f29e21882d46b21d6d4e9fb61fceabd8bebab713c24889af6e50dcd58aa5fc7e4e6994c0b435df57de709e80ef7961e8e85a38af2f926153a6e81f5071d3497a6b2be1b9574ae2e1aea8ce48110bb02d62978f5f9dcf9c830d4f86d9b6f9bdc05a986f16c8c8b194ad7a120911e404dff13a2dbf70e3776070154b50c377000239a86a98282b41dc84d5d2b7a6d9eebd2bce904f13372a2ff350f965a6d93f6a4efad084ec10be26104b32131a6f222e075cafda3ae0c26b3153da0852ed5ba974d3408f92f06068a1c22f1a0691839adb9bf26ecd19f8c79a755c5ede84d216db1769bbfa53f0cdf38a5281082e0a2036dc7674d2e0ce456c210cb2fef3ef75f448996fea54abf0f023abebd18bbb4834e795f40b31bc4859524a5ac5948c5f240083f0d28e61c365b9e9b6a69df7532562e3e2ff6a7fbb0ef39d67e0771470e4e77f0682d7c8bf51e0007970db53a69b8840c52b180bf39665ddb24b4c08783e42f6748eb44dca70b79a6fdbc8176d023cf994d3720be4eaa5f31e39653131cd991f87b07f76e10ab50b199afdfaca024259f181af550248bd691db0aa29b359ed8d7c2798862a1e127c8afbccd130f453a3593da11bfb91df9eb0930ffdbc737db13224cffea6eb6b0d7aa72b5c4b7b7fefb424e562d25f5df02e879826a2b60382bb4d24e0136f7732f3e6c04ef21e02813495503b57a98ed9906f08b80681d0161b1949e96f60bf7c0fe4a132d4ac565a767445b3cf6ae5a492d8f14af45f7bd6d34d15fc68583ea9823ed5a1b26e43c353e825b7c69af2ed62d39047921bf4fb6055a6108036c0e670a5689b264fc67807723400e4e7236ae653b5519ac657172100cd79b7f5ffe9bfd051ff1ed6534d427ab16d163b66304cd32e009bc12aefe239f0fe60dd26201650c29fc01ce765d23e9547acf76b0b44c11a82899f9a5ef43c10cf0a5cfc717b0c6afd21fb8c1e712352b6507499247f32d38e25adf4fc041970a73f9e010cdd5d9b6a1f4cca29f66bdc79369dcc99988a1e4507e7a69eecfc923148817f75d9e27b66ef876a5260771ef93756c84d63cad7defcbf35b91b410320701cf011adeda951ac594cfcf67d5c43da5c4b02ff9e9f11172ffccf8cb5feb7c3f0932e87fadbb22e456a18dff77a767c903e53a48a815912ae9bf2dc6acce03bb01397ba52623ef985cbbb7ed71afc6491ad56721f76eb658ce5dcbb61ba81c438bf7b9c868fe0eadddeb34064373d2b0d8125d56ea71dadeee36381e550cbfa47caae979cba573732f1c48fbc259351c24341fc8119f1282e4365e87f0cceeefc4956412ccf6cd0f95e07cb555fb4157398e2b11cb7bc9975b2f35b6c2847a85a6b2fd0abce1c22c970294e047fe831e7de825a71a4bfe635a3e087822aee2b398bdb4f097bc1ecd55a513e5ffa3ffeeac82db032af93dd6fd457d6c8a9edbc6eb86f543b941df88b855f71622478237e205f5eaf7286e3dc52f8f57c40ba9815c52fea766442df63d87fcc9044ba7e2a24c8a3803b8473be2e4145bf0d10116ce61d2470586fb8c9eb28dc01897101363b9306cbb942ac227038232740b84d5d6eca80abd1e4d01af77d7322a06d67fb1be0a3b8c30094ab8d22dd8f392d267b66d261a12263e5232588018d18f984eb3368ccb01954dd163d8f8bb90b766ab63387138b30092eb0b1f87df28476e9c196b0d8bdc5a4ec735383cfb79c76c852a7cb59dbefa86aa6f05e023a65981520bc0c07397081fc5fa784b06d93acb70f0355eeea54b5bea63934a5a2b967221eb86dee74701568e097bcddbace18d3650c67631584c03748f8444f214af61bcbe6f23a08ede1248c1e02a41b771bb655d9154ccd69f778c94b8f2b580876cb984a3718a2ea3be5d6253d7c3c54782232dab7c496a8d0dffdf1dc6dae38845cf59bc0748cef3afa8cdef7854f57c4c35f1fedf2df731ae69911cbc2b2cec63844775d0cb37ce15eba298b0a41533d7236e3398f7e30b694b34f9af737d2c6c7455036d01ee0b25c04d112f4587174e6c449a5e1ca02c4f3b94f96aae2f71e515cc30cf146f7942bef9abc8c6431a927e96c503ef785a8c48f7c4ba37b1a4f43b30639b348447b901cbf8c11749be7d95adcf7b236b1c27120f9bb3e529e0715ec13fc4cbd62ea99ea902141ddd32397d1523672eec069946a31c12acf033c9e6513e579486dc28fa461c99024b6adf222bb526e14546548ab1b624a300690cad699a8ac76d6b0876dcc658a778c74f2f894c177962f142c3ad5128213d00d886b3413393ef9e023e09c1ce3f2bb41ac9de42f0b92dfb73a5a41c688539934773327196a2972063f81c424a6012f0970fab7e9ce0dbf218536ec864fb7f81bded98177f92d6f8b1cd743dc3455f0f65ded21ee5bea029e262a2b262957b50a587e406dcf68ab3854e6bba596fff71addb9e4b8f667703222c6659b2b098bd1903c4cf7863f58e4a23c2e83f7d14d58cd313fcac2c34e606c986c16a61245cd01bc7efe26b9e70fe6d26f59b91963c601a252d51c5c580b4b0ded4b118d78c448aab7c7779cba3f4638ef0eccd9d800b30feb557946a61f7f4d1fd87a12132921ebd116a641fe4f3b9fa91778e2dd0e52b53c5ac73e6aab1b29730b49a32d8ff1369dd70bd3abf5ec3df82f70e82e74c4535a00858fe07531c3762e696562b348f8f31a77b0ca17145fb6d0339c8e78a2ae9947dbfc39e59bf26438ddee274a1aea1e8af3608415268f51cfae8f3655d43f56f3c51ce7e8d0188132fc532836242de78c19f1c8c93bbea6db4ebc6c76917f5216f9cf7a8fa777a6a40e036f2c041d2b70b6b8c3b2b8f9c5af12c30e3fb53d418453a745b6b40cab29e1c3fba14ae20a314b68a3400c25a38fcd438fb7c929e92d9e47ae6163f5932804916a5759e0d3a47ccb316126260ece4598d8667e6b29274adaed96f778a0c7bdbdbd7d16c5602d39e42cd312bf20cf187982ebd9c990115046e7fcb03eee5b4aade30fac0c50bb0621ed5e3a78840ccab64fd705ccca29584dbaef800b495175c56ac11dff82ffdd141ada47b17b23b47fcdac87d597bff2aeba981c14e8366532d560c4b6e77a05737c5e4be367193185497ec9579c1ac6bd780503ea5d4ecf44951dbe52921b5a428bfd8631b95fb267feacaae6908a759999059d363894ac5899d40493e9917f3426f8de8f9134d977c7eb928a654d0ef5a9a0a021b709573104a3ad4ddc629eb1dfa03724590430ea418c30582df7193a8a95eb291daaba0aa5f51052ae0030288746772c31e2be5308c66ef39060b40443592f6242bc5fafdd619f2096a7edc4ebb60f32a28cfa68d9244f955635a5c11ecd1920e83274784ed6503ef8ae8562f9a1d688351e3391ef6921c79ee861a606ad6653961d5be5e5cd2bdf43ce92414106e99e8a2f901c5c8b2689fab08ade32eb8311bb3928908fd542538eebd476154edb294cf46c41f491bc7325565dbdbc9214dc5a52d0c514fd45aba6da61d58d697ba6ec15c7b14aa8da04f61ff8c67f1e8f7422c219f90e3ad72854b8b333445702d1d234e7856ad4bff34953cf7a48b27534ac4c505218de1732ce7d609e2cd60e6cad90f32dd71d2f63fd56a733d45a4470ac3af80bb94200b62e4f4bc896f713509b12bef9b8ba2ecf3e242dbe43f416f4ae6fb6520e088db92bc99c1e00823f0ce178131dd990139a9c9554782ec6fc22cb4a2b489f47eb9cbb46fb2e456c88c70b6dd4e7e9b4ec83bf0bdaf350a92777fa90c7d9b0c7b77aa40466a653c8b63d12ae38b3468ce9f2df4f7e1fb7ecda6a5c883137e9513f84edc6a4ee33afde2a97030778c6129b91dbb1ec0cb2a295bc1dc458245528beebb8f3a879b90062b2ee5457ca636de07333eed428586a4e52fb2135bee962f785894032fc803cc1696eb66d2252f411a17f4fa7f4dff2e6f5ca2c3c92d23323a3fab55a7f3811c88756784bb069375a7436cfcb8fd977d3cf007278199c58423257a1e24a23f6fd1f7be08331c7aa50b0d206dccd76b26621d24390cf70518efa6ae241e32dc123bb4d7d6306d461a32aa9e186aadbd5cf85f5a45f00bfe5356332d994a9eaa253c0d6084e4df25a4e0fdb8bf13ce04d00309a3126da6deff9feda44033d85870438b9909602bfe675989d939cd03b62cda88a4e624963662efdbfcd4e2a5a166a86e230bc60fa878d0bde6c08535db6507cbf289bb817e02c1664b30cbba2b870805c120b2c429b012bf0d77fe087d4f366dfc0748c8cadfcd51397e01c56922f4f1d8554dfa64a1630e160783885feb733f432298c16ddec33b89c3e8d26dd737a7f3f11916071d71073449c0bbe28313e9ddd1ecd5bb6d9f38c31b8820a4f5d38038016c297f05f23fc1a104eded8afdb2109d0f6a42e0d35e752901ebcbff33ad092fca7874bb96e31c295b8613ee577bb4084f95de603862b87baaa23e776f013a1b597d0a551009c8933b89b5f382f6da87a8bbee8b7c67bee3af3cae08457cb22651f38f718894c37a7417e27b045a1227beef7aa56893e48ef0b348f446f9496e5b71e112b1291a525eaf88f4704ddff5ea0b965ef77293847eea672d91de89a932cfe4d25e0d15ec85bf15a4adb1c4f672bb700521c65be782a52ebfa5fbc83f0a15a6cb7607ecd7fdf74d5c5964e6fd5011cad3e5a9f77b66ac34191d8de2c79130f9d9e735376f962776b8f7672eca03eb20c30966b10a76e460dad6d1f534697193181d5072bb6be8b23c93958ca1d2aa775ae0a9bc2f039cb91ec5f7e46035fbfdded90f66994310072ee4c1292b03a1cef5bf1c393afb94fd5bdb7afd9d061cb7ae870dc2d22287512475f96b1675b12354add0f2cb9757507c381e755a72054b0600ff8e89e369d152cee2d92950e816cbf390d8e9a49b559c35a7e8b10be15c55c2209002b3d3e54db0158ce928c9d61bfa558c1b919933050268a9711246ead591e6f6774cc23f07b2ad03d774ee73d05c9f40a27ea292fade4b7077261c637367cebd4561a7204077a4961d09d6d0325665ebd93b364734a2535e42e3be7c51b75b6f5e83720a7d6421c2f26c3f308aa85d94661f5088a5e99236b5d4d118aa596a0f6f5e5c57b69138b0834c9d5bf1096dd04feaed8619686c5bf7e8039101836ed326c474ed755804badf2e732572982a313f5cb85aa46668eb756516ec05dffd210edad04fedfc08f768721589c3023b0c464a69dcf8310062d20d6dc4c2c999d95beedbfbb2cc2e272f9e817f502b0467f553fd68937c969020e3872a5e128413d26eae76754aaf33405eb8cd86639cdc1afb1d741622b26c7e63f5f4d1ee381c56e8f0c2e01f16e0abcdcc94a81d1a5c13c44440f8d126578cf8205b49bfaedfee5e2e53ecfed59d6e539ca4659bce7bc3cb095b0653f5ff79a64aea4e03308b866e63031bef6a27f3a7ec99d733c191d03fcc8c4bd5896ce34ac617499e5510314bc89ec54bb7b3f85ffd615e64de7582b695276967d3edee7ad2d3eb8dabc18cec45fe4b620b6f50bb69da581849c12643e7847024064862b8f47381ef186ce9a58030648833a33a61e6d7b1a0b855bea6536603e67f64e138c55eb3054c5b4747d5ab3ee517d3d47b0716693f9f7a1c4d83201630692284a72c6904af7f4f4f28ce5e3730301209541afdd773aaee953a37b29c276bdd8817d56aab12ce397b5ea4e1e88bafa0531642bc273c8facc592250bb34e8bcee7a296f723f3f3c25614919004c6455d1e457068fb6976441f6724e246fec3402bd4f79d88c1566e387c64b69eb66283fec9dccbd1e08844c1936eee5f1b5a45e90745d0ff042147ba4d80dca945e53dfe82f2d2981e852b5c239c2d7779cd210d83277dfd47915d88b0417bc4801f4bc1a0c712de73ec7ce6d7cc689f57e643ba2043a553baee088174b18bbca14e49648ac4b6eb3addcc55b734d455514e95b9733ec1ade9f2c9a1b56a787d9ddba3cd8285c9daccb6d8a7e85618afb697b8c301d302c5564859155f3f4382703678ea4a6848f84e1eb5d884eb1c6b17a122605d33953491e420d0309e7d42f2e0de48c34498caf45b0a4742214f4d6c39bd92ac0682dca7175cffc740f753819c427d9b19a474639c388adc94d53813643055b3d02d5d478f52478afece92f30b283c0f8e103bbce423552f79d369ee3703c68e1e99aaa2adea1c525917e3a4842af076691ae5550441534c9ffcfbd7913674fe86f743ff823dccbfe19b8110271abbd29f04b9d092e94d807e1565676265b6fc3e569de697e674e10fe7e9d2a8395fe94d17f446533148ab4cb7f1c3fcfbb463aca198ec225b29acd6e071ac34fc12b1e8e427ed0df4c61a2e34068704f4904ee5c5c89aaff2fd1888ccc666ee1a4da1b016627b3e5be738745346ece2061d399275a521ce6213e44382da323cdeaa26d84770520c1f5f47aeec2387fc90e99083a4e21a7371a09406f50ff3b1ae7a785cb9a2790465f3ad7a47a008f36db4ee2afd076d396710f0be7498f755022cbc437ae58fa214d3d1d57dea5b894f37c5e66c002bc1c858fff4b475910cedede75509fae1706ac73a79857878d8aa0e0d182a6f70a3fcb58bd10dd7948ae1622896029d590a6589067a223103ee903ecf638d0b5536337e7126a0cf671d62e5fd194412213946d50c2681380191b74819e8004598eac54b9467ae7f57f124937a00592979006a6f2cdf3e23284628e03fe1ce8e511da4c8dde741f20cd96255a7b0bf1f1c3d35d1b85aacd85b5a22a7030867ae9119617cf27e58d5f6a55e312d0e812be950aafe5f85667e3140cf11ea3bb18ef0c782ba661d9bce523469a06a32371c505503cfc89dc5e8a35e90038c7d73a57ec3b3c8de26840fae141a484f16dcd0bd667ea752c16a0c8ca546f0c9d19ecab00688816c18958698be95d827ef7b50c1ba456c6eb308e313372befc4111fba897fa177fb8e935fd3950214a5621d6d39d2a6d86e0431aaffdd5be47daae510bf9c6db7d44e60069913b3423addb6209cdcb5b39707244dce6ca2d36b6f0b7081d83296ea456250ef675702ec5e0662663218bea46fbfb3e93b2288a5d8a185ffbaa097d879ddeb0e81a1ddb137dda82d8265d377d8bcc953d857a1bc498b43e33dca08bdf4c7b37bf5848b5865e318bfabaa2c0e548f7f75500209790682066c1230d0239e351017f0483b1be2a2025e3b2c5281ea233125bb9b66c83b9ab4c2274419965c913f0d5579baa22938dcca8e2af98f0500d94a88a9f86eed73167f0e39a98e33963e7bc198888cd943581d496979d556423b8fecc19c4adf9c930e9fe3932d8fdd9af797f274ad86e6600d5b6a0e8da39ce5e05a82402797878750ed52a65d35e0f427d7cb2e9c3231a0a392a3da759b5fc3476c1c5e7efea1a8ef2137f07f16af5358abd1b78a123d865a7bf6ed116379309e300ac1aadd1d23c69e617ab15d955ac8a678d06133f75a2dbd4a4282ebd4a9db817064ba5d45f873afde41195d173fba76e0a855dadcb39f39f96eaf839e79770114b8634aebee2decea7a8c2ea4e304b9bc62fc918556f147cf8947faedacb821c8d0e02046e5fe4ddbf8f46e0bb84f5474b78935927c0cb2b0a71de6ea85dbde7f86f5976104e81d324a24855b3d254ad6766691a4bbf7b5c9fa48538bf1324b7abe4adabf2ff6ddfe28d80932beb2dd9b7d8196820453f62ab1408a9677aa504a5462c56e305b792f3f08ced156bfa0119c9e55e650fc00f6134bffa6eafe4b578145f805f8ffe321e689516d73a17c469e326ff0991ea7e9e198dd274645848de8adf316f670194531ccabbaa534134e64978fd72ae4a92c63a876fb2dcc2339ceebecddf69d98f346586b42768ea20b5d7f898a5e444a594a67b1b32de7765c418c81575a387c4f868edd23d5d1fcecfac187c58158b6085841a197f089d5c91afe457cd93c7e97cb4cf2fa2e961e4508c08a2b13a341346ec00cb3d29d66cc3b76760b041b56316bbcff9fe588786d73aa0d6e14b0568e4b35cbf6a9da5b9114a63ce711b2b78d6c026d11166ffe73c2cc6d8f5c096e01fdb88dba2e774922d077de5c3d4f0e0f6a3dae9aad55e3eb573d036c6629ec73f2f47c4d838417bfec62ae46624813d24b6c1afcecdbecfd6cd4c9892b440153230df5d0bd02c2ab053bf4a4cb8f6496501c77cfda72310e324d76dd1afbe5c51ddc719b9505a7e2f7ac0affce288038fb663392aab97d1a1a53d423234cedc65dcb20438448a6dee5158b48053c57a37a65f8d644cd4ebac1cffd60e78f087f08e378353f45ac730ae83f18efb5d422d43c7ace6f57f19d1c2ce3dba419e5f2c5f97d46ea9c1191ed0ff26ef5b090bc0653be31a899eaec7f076e9f4a81184fbd6b3cdc2aef565a4715bfed4cbd9f61f50f1ab8cb546f3887e1a2d8aaf556aa8f2a45ff65f963fe045ac40dbd4fff6b24fee614acfd72dc3ccf827da4b704f2d2a424e26c0793ad05e4be1016c60db9f8e5eb226adeb8b9dfb3268dfbc194aaf52585537fab437fe493e22f6e7cfd8c8069bc979d53f77260de91a1fe43b334e63ebe0d95bb99b380406fbb645607fb0d1fe540abef55ad24d8142a97ec285c5d9051c034f853b07fd9707db08f8e686ce2f7debfb4ef62225e4f0aeadc7c661db3672d6b0d872c63a4fd77b001b4494facdd0f6be539e495b54de516aa7e2c7c80eb98b4f203a165d593e8dad9542ac155d962c415e14b38b8b0ffc58b11f89616883a62b6c22b66a6e7043a2c1d837a2f0bae5df9008019214344ef193a8d73f26b5e05395fb4684cd50b3687918fcb7961b0bfb64329ad6823288582b0bf747aa4ae0cc1ba22ed19919e4f4a9586b71e102d0408af9be9086a914e31e02630143afc4bee17ec035fb69803af589898fe2d0f6419b53aaaed29f7dd8d703568f4fc313d0443e18bc8afe23059e538de094d14e7c39898a6a982ab799d50fb644075acd889cdb1bc016a2e667fce591cd1617ac77311815b5995d3ea8f30720c8acc579b4869aecbca02931bad89cf9838744dd54507154d916bed2dcb19636b24191533377efee04ca1439f197618fabcf5ff0f36deeb71e5f1171f2d4dacde901e1984ae6289f5e801d5c043ac37b14d7ce9435bd574e72d208f165b8c8ba70a2d53bde1aa2795d9924597480723c65f05440ea2ff4635d6e8585aca1ffd16c91b08c032fde055c98ae767b6a44cdfc1ba82409f303f7dd2451e751e29ebb34daa40ad5166d1a999be07ebbdb03545ea03a733a9635767934c2c4bef7629a8ca9384f312850077a01a40d305886e981b5f49373f9af7d34b5152cd2858486bf76e778c8f23c3bcdb6babbb2bf900df02d3a770de2e6086eb4ad87db1eae9ca1218cfaf4762d9b656701ee168fb915303bf4e3cf0d8d4be39c4d831f02ddde2d81fe000e5108447565d2dea533f69e3f545106e8a418dc957a8b44ecaf7540e8873869b4f3c58d5c018efe7890f093155fd8f811dfd5b34b398a565bc2f27fcc133801d985d2bbf074e9a8f08e3dad0cdc7c3791b023d8d80364fac1ebbdcb569522099a12f811db1090d92d8c82106113afb3697b995dc90a9c00cd1e3166e92b31dd8ab44437c1f0a5c377408cc262b52dca33b08eff6b4e893df17642c801806f18890badcdf4b65c4e45c99c3fcb3bddb4252cdfce600a8284fe30db9a691b0ea86e090cbe5e9e8d9e7186b8d789b85731652ef8f59b9c344a977a4b81ab1a40cd90843ba0515ac098d6c5a961cd1fd0f438ad0793fbad8b62eb3694b33ba62644317c75baa1d7245e3c023f0e62ed77fd52fefafb1901a2927e49aed96332ce98fb2ca689876cf4f4396e7a73f3d39f47fa34a5d2e8f76555e5f3c51aa088d456da2fbdcc744591d0e6e4283456bf082c06ca0cf27cf4ee62fda7f9a6298d454fc65898fb4a5c1499144b550bb48a925799392830a34fa3402e97d223b1385bc2b96e64561f5816cc85dd3dcd23656ed8538944fb9f2143ef094fc42cd42ae2be3bba19c00676da9aea1e7a3d28e9fe10b51e3cf754230ef64cdc01a160f3ebc500c127b294caaca59f5a12c134869b7b617e653ce571ae77a05004b6270fd8186949dd50d1ea973ac5fd157031ae8aab594785f13534781a6d74c00c12514aa79148aeccdb8e008a6400b60f0d6bd5918c1018ad136a5def9ad6d5c1719b90338a7febebb9ce8ee81f29ab4ec06dd77113ea198b261d30113d67f3404161ca5cb39e4d5c392f6e2bcb1c0526e09c8fa7a108220bfa3a81098aefc7f2d6c40afcfb72dc4152f432abc6851f9aa41e0b898dce4e42a50507cb845191853809f3e74237b17555c2f9e4b7d2995aecb2ddd69da91eb51b5f341a4e3233b1a65aefcb7508643a9805406104001bb19a920c43da466ec31338c70a2768068b344995ac3c11201ba91da84ebdaf79514e5cc0575c0c41d3f4d4a38fb9b556f6ce184104514130a1cd9a392364e43e6b8a0f591c2406c6f5a58acdd52bd1caa797ff28d8a5a5572c0708b8cf9f17fbe0549a4be45e47a5c8a7638e5bc1d2a23b4302f1e15beadb3b531d8bc791c0f21ea68d0d9fec9dda8118405e101cb16187a002215ad603192585f3356a6ca86383b9fcac6f0b9c265e8928f3f25e8180d7e8f4598ee68c98fc32fc275713a20fc8a3b1e6ee32fd5aed1734ce2b7e0a3530a06532cd9cf21d393e201f7623de48e33ae1ce61f2e71f11f036ee8b13929de9026d45148fcd335a21171aa77a63a98b5e264b2f833077638b2cc579b65dde8a128f71f75cb48679ecb7b138d605531c78c2f3c405bedbeb95fe961fd2744bcec7b1c60e6be6fa637ee2c10653236aabb9953f18e1b143e1d151090bd91c5258d047fbdc30c38d9aba5bf89358c018d928adbe8e9e94951e69a1320fe512c52f3b80947722d022e8161f7c6adee8d7bb5ed68ab5625bff7c44dcce53915f4740ef61d2276b1e59beae031ada9b12d66ff51e8d36dae727ab1b2ebfa667b1a4ee4f41c8df1e2a6b0ed493b89ec4af052f4cd18a4373d1e9fca2bd02b4d7cb46cbe318ee60a220da4c1d80a3c2023c7371e05a23deacea62bb99d78ffd0cc6dbc2dd80a16c9a1d2925b04baa352c3d1e76f0e3c3febdab49c29ba373c0b55e5d3f2ebe1e195fe0334a7729aae97e149cf027e5c95f13ba0c193133d308721a125de3823337718715cf5b1816579c439c8550251f5985b92e19080470e4286e98218c7d077c637997522a653874072858b8474228f4b7dff48737e8936c3559dea246f9c8bf9699db9664c2e985b54685d34f6820d6d43f7c9b421dc2e88e1b6417c29640b1e92ca5d4438848f1089425ea0479d71b9e280ad5d307d9eafe7186b318a8253d15e7d791755adfd2d3fbc18090557f1d543ad0d991d4181aa236ea7da18dbaaee53ed72ee6988cb2a95795218abb0f3f191f98effdbc8f1f21b953b2f239636e7a21d0af1af4570a89b44cc57fffdfe43afeb536dce753b8e6f81e48cd39565b642a7aacea842adf0597b8a16b315de0a6ba3d2dadd4e514910963ba981e55d073f2240cd75073ffcd6d2c22a39a7b19a32ca9b25334075f446584f8c46b4437589ab0fb3f4a1d6359f7c99cb391d24dde7c7dc4208067d2ac26b7de44ef621e925d0414274027fdfe4033e1dad00442660fbe9968ecb5ed091e1227521c44daa976d1ed7ad2ff157c68279e2403b999df164913802eb3d2017e7b64fe19153800944e099994545ba6649b2ffb803494a60f3d6b5b12a21264c331902b662488d4c12260ee54c11bd671e6d04b1a48bf7e94ba2bba8a93b1ff5779b8a4d4a931e8ee6a81cda935ea23da2b81426e69b00ebe5528f5c0a90a6ccd8c6bd2aa68852559f446b184ed6a1aa021795c4bd69a26cc36d48141ea8efec479f61ce2c42c49cf7777f7cdd39999426689984a24292afce795334da8e56e5a3947044e4f7fba92e638febd48042905cc460432a3b5e02db32ed60a49906b403f60badf72a095e3f2b09ebe73727ecb716beb4c6f1314ca54c28dfa89323b70b2163ba40a2d005e8df15bc759c72beaaa7e3c3c2092531d541d6277bb7daf0b96163b60f75d49e8320a43fff9642c52de30da81895a1f6bc55e5cc8a2fa48a26444f32e0e00eac1bf305b47b074f63c33347d3931bdf7b84f4517d416792a9bbf26f450d50eae73ac351f64afafee83236a1a254081b9eae7c65c297527a36173e98fe91e494c2252fad5e0de209e64f89555c6cf3c7866ed1941b6fa0ec92741c37d90b1a08e09ae58c8550781fe907fbf1bc6da2cf779a53fb72b04676545a265f7a08b9221623b9f0a6d6c60d5aedcb010dcead7bfdda62ac38f16f53fda7321bd96781d59beba60a576da6ae53ab9989b4b2920dbe033b31eb57077c73d562e3560d53a707ecbd1615f4002c0e585cad30fa4514da3101522d6f9a8afba0f41562a385e8558037e90277af35a529af4cfec1b54565167364af525780fc98c5b48652ac9de4f30c07f194b3f31077be61d65453ab4a2ba0129f9b2e90e3b282571832eacb09e3da26ea2ad61e2d8e24e283005ea3a799c65945e638c40116dd42cc5a0385199383e52cbf2898aa8110b6f554d5fed5b54516b463fc5ce650c2c5022279c489fe125a6e9d6951b34f1f4e26053c564c130a88cd7fb0b97a645a69bd4d1c4c05f69340a58a23f1185a13aec9404831850e988e0c5562bf0b038ddc01953cf9e285bc6bf4deb9886f71ff822f8baa6ce8ced961e33d96f165540239c9be666be0950c285886c81228e15480eb64ae38ab8df491608c6c5fd976a1bf371f9f0e86988cb346f470756e16093e2a30af848803ae71b10cad5941c1a93bdc06122c42be0b7b571a59de39e547fceaf22d2a024cba1d8d26abb2b28ded6cd233a9038f3e0592eaec56db1cd85b148a341c5cd28c5c8224d9fe8189d71d5aa801f5e3fc81f0c1e9b9112e0eb39df141353d049602b19a4024e207c19004b03e27a05bf38e565134a972a6b42cb73dc59a72eef0a2e2d7d145bfd0ddd95732b0ae7c2c135d885facebbacd772e404139648b4bfce76cba740976f82e04138f77ed486264034433c2c2b634fefa0cf5eac3a9ce9bde9753d77d89d154f25f3d0aef272195b999b11f305a4d36a14627be070fe62df3960550b41149d4fdd114fda5e3d8a4d3709a96e84a4a45c9b2ea3380bea3e241942e42709b9206c7e516e892a19aec915019de94a5af56a33b663e058dcdbbb62d44fe305c849038b5c0ce3c73e30118dca277d582362f838d066143c89c332d0dd1983fd0bd715fb3f7ec86993047c7dd33ce16b32dca279a0c6cd74d137596fb56920f16b8efb964cb91cafb8db5f762872bdea8746962a67d55d3ebe398c73446239e85c8683815402975b3ed11b24cdbbad5f0b7d2c59cb370b43709cd216fea1f3821bcbc0b849702b8f1fcbc1a78e54b45a5219a561d7057ea662d8417b1889689a54d3a7fce5757a2d5a63c8b90acf1c134d270e056951f022e69b43869d2dd14bcca41ab86cc1c8ca876bea93a85af38991511cfcba18f19e50fbd365ef217e5de02e68d70791c0de23d032c14330f08550e9fc029036c3adfbdf87eccfe7b342f85e1f8e99247b817a9f93111622ce70ef6ef76858cd9af50b47e69d0f3623574eb9a14d85a1d5480a21fbe3249f17744de04a0f215525f25cd8b7116a6132f824c10985c7daa4527fa358b6a39aca52f9a48f8cfe2acb59d3e12690bd424e6f01864856f9d9bc75682d12a2d2ac519b87f1153ec893e67ae803902e02deb282b72aa85c1abcbdce89f801b3a054fd06b50602a0d1eaaab52181a4787877de190ce8d4f8bcd422b4efc9e9a537facc1e14f2bcda74b9d3b46f816f27e7942dcb997ae4c8f98abc9df27d2f9ac98ac2c0d579c5b97d9bac88ed8fd698b9b20384e6c8a2e73962497a3fc625b99cd2e2a9a64e72f20f96154d5bff0959c24dae0200c935bda8bf88ceb15aa8b1c3cffeae8757b5299791d3e79cdecbe77afa1459a07e3e4ff1e9240373f12fec2a0d8f7f96d506715a12a730f8a1f6695abb1bf71fa23856b19753976aefa802f046a89d8c1158608949b1af68efc6778179aba8bfedf7e9b08630eb40cc400f4e7badc7d1fb233ed97c946f472f107d176047861c244a2bc0f6fb6bbf87a3da54b1479afa7d4031474e14f8894f83ba3fd6ec703c98e7902c0ce4468ddc9e872fdff57836b0dbe28b1dc4d64f7d2eeacb2bcb4bbf7e0b845f9af5d71eee23876fc106355cab300705877e73af181e128bfe5e13ff45de77b98378b7a935e390706ca1e4df78acdaa1d62996cd0975761979413037183d6d09ec5bf13d88f9c31a690c0392e6e29552d412739ff72f0b5fb11883e81c688be04255caf92fc57e1f8842f94933f593f7aec204382cb2e0be3486bca91a97d5913d3a2b297dffc1f340f720544f9c7af6b9142fa092bbeae1c19c17fe11de92438a100583877c88d15d7aef6f02666d7969213c86225d2ce060ecd0de04da84376aca8d436dd3578693a0bf43cdca84ff170985f415050f2be0e3fff0b63b46452b4428be93b27f8bb5673ff25094f122dc6f411c21f7bc16e589ff27b73bc45aa972b3d68e1188699327e8548817cf4866fd36e6c54a877f04f5c37fd802b709fb74832a7f3812e3a5df160786ecb304b8125f50deaaddb99f9cba4260efb7c2fdef70463761147e6d988245e23677d1fddbe4007520015cfd748af838a44a1bdd25767b17ca5683f6dbe2c6c1c616ac7b7575b04e136c88c186cdd1fa8ffb55df2f3323bde90b4354df585da8d488597efb4a7d11e00cbf73ca6ecd72b5105a087c0108dd285a31515a69248a9c1f960e8580e98ac55865e4a3f192b8248194139a30d0a968a009cfb66f0a965459289b6c63fb33b6ead3fb2cb7498ef29b7a88670fed9bc0c5c25aba0069963e758b926e626489a593774363ded2406e1a1bbc984cdefd2d29cc23c126c051ff8021b2f07e76c882c4be3877bd0ba26da101ee6d13ae36db8c3148161b5a98dbf112a619ac8e77432ad88edd4812066069e795d450575af1cd8370e7d3803aa50c1f1cfc5a07912008b1421a708cba01e61e2f798d85748d6fed7dbffdf18be316e185862687444eaca1ee00c1cb098c3aa14398a1bb11cddd66d1158950c0ff454111e4efcaec97909ee1e16b2f54ceff527e6e7de13e96a74c71b9a5d936f51665c8d99c2b49c26800d6ae88de624a3651b17c8228c381bb44b39050bdf678fcb6f33f1d9fb436471bfef9e35055372201483c060dd398d256aecf2c937e794686135ed41b22c0ab0efac61a231558a532251f02245bb822eb7fa5d174df374f1b0de145557107f41933a5ffd58ca64d6b0764e751a459fa21af5970dd650b3b3cdf96e489b27743684ba1e692513043762f75aede99fedc9bcea4e79b293dc6590491c62483a9423280e79ee6d619ee68b46ba172ac3aae06716260b9c0dc3f73dc7186a6b1ff69f158a6f8ccfed829a410833557e32b907c7b6e4bf2f08177003e54a8c5b7d15bb1c2fc54e65c438ca459b6e3b4b4b3b44d878e0752803fd0bc2ca56ddbd34035d588e1111cef5126d03bd827057d8c5e720f295be082d9c028db366305bb9c2f228c60813b2ba68bf22cb08f4d13561b492cbe329f7c8a7f479f3c66fc12601281bd7b0a78a657b4fa19a0eab04ac2169a1e699300ebef8d0abff43ef40533d2a65dad5e30d82626ed84d372afff6d0c6a536df6fdf4fcef14892d4e354c5b4b8b35df6bf28cf5a180a9720397ef8e7fce7af1af16ce809750c1f0e43122d890124c35d2a76bd62bcb6a6e554178932da0c7733b553776ba1e534d4aac75fb19fa760c1b6bc95ca5301dbffdb95ad4ed5cf720c6693de89b0f5e8744ed75ceb7f5f9ab3afbfcc3d36115f639d8396279332ad307cc371ceae99cb3d0edfbf25cfe6d653c9605c0dbb902f31d4a20be496d4e20a951f07c14a8b0a6ee3bcc802df155569b102b3cd30a49642bcb501193d33efea6d5287f991d43c2aa150d24e9d243e1020cdf0ec2acff45fb854e30347ba3cec422e3056890aad98c857f3dda6d7843ca4ec44b797cbf642506181e5678a4ee75aa217cc175752e68c5ba46052d44df633db1677117993c87537bf48c31e37c17056cad17707efb0ee4b0478a459f7bede77e7b220a64c211372068329f40d994514b05a19beb040a0c724a40ac9a9ec7c390075bd502c85d6bff4b1eb5fa73583341be51222e05c090063439af98ef81382065fab4bf17a0df995a85a8d5f0268f2a5c32b7635b569865ef3262e8564ddf62bfb4584d02d7a1bb49c713813c719e906c284bc6fb91330c96b3b49bd5c397a1064dba738134de5b1b429ca2eac1675e06d80fe9d89b7ec744a84de3006c3880cd783a2f6b4585e316c63e1293d642016a002230cd29b8a257ac94c539a91ce0d97b22fde3b3663366fa3b19ac8da1fc42113ce9c5c57e1e943bc52bac35c55d1600903fb696029692a06be1cdf5b39fd3bf934f8c24d13e8db640eaee1f11df21dac0bb4bd32fd3d9083374c2b1ad7fea0e3f9c60f696030f07a01e94de4938b0a0ee3a15111928f2673cf2d9aadb866a891ad17b940785bf2f12daf768c5c79cfae68af1517dfeafd5ffef8a5a4c309c0678714842231bce41b77157062008c8ec8bf88fd2727b757d01d354f81a5dd73a0057e75cb147b2eea6e456039452ff36777a45a39c71d95d466debda04fff45351d83ba99ee0cea61931ed2c10d7c2cb3183c254499071440e90147ef483890e59cc6ce2eb244729a6536e41b1a2ec2bfc1a49919a0ae04c9093095d6046e96026bfa87e10ef7ce490a18051087df565a7a6de4b8e49faa6ba21e47d0772669fddcb44d2c9bab5a2a1ddf8773fab63d9b7a8b9bdfabf09485919c9507b0803e94e3af2e867d1e42c409c7bf364a0e0ac418c6f3fc99943608587bc435cd6df07382a682bcc0268818e9fafe69db85fc40f5be7bba81b65c7eb3f88642d8e234a5d7e8821a880b6f93d6e8d89e42371db4b12115d6bf8d53b75f364aa9b12bc32f8e338eb4a88afb0ab6b672527928baee813938b858502b91bc22ed915097c80ab187f0a47c721623cbd1cc6a9e16292e6b091fda18f03225ab3e56694b4f912d83605a4f62bd45e69dcad9d14613b5cedefa3847adfebfa842de9a26a45bacf53845e9a4d59a4f619d3c0e97aa651312f9bf4af6eae8d7e9d1912d326c3151a820d16188d9a90cadd375dbc4ea9b3375712280284c1d74442b1f5622918cf442e24cb6ef5d9d1cd6e68db7241f37798fd9ccf3d130e1354d6003e439ff4d8e0d45b2baff303f7b0376b275bc199575742c96db5e81dfa8702c0732a5a4f6a6dc0a84a1f468f91227cd32c537d7757781f9f4ea9b4d6d901c1968164993b1e74259238a54a36cc444fee51cf4850c4a903c0b5767b65cdc3e206175efad0351cf61a8bdb7cfffeca6fee2c9d1de6ade3f6296a659fa18fcef89559923ea161f889d52da65808e87f5ef3ed4732293f027b7ea3149175addab3b01d49aeddd8815d92778310e63e45846e25255890c04a563808951479a9cadb1ee2d14f0e7afcd47a77ddbe1bb58a7ddc46dc9b96eea18d341b31981fda5900edee38792508671f31f11a61fe501c25bc188031649f08c7d85c287a36b3ab1e24b40e7ddf6e4cf835a9b40545685784f653f0c432536be66e66ba5b82b818b8e6e353e858e6edb8d8fe04369c2724035f9a3eb71fa5975022e321bbffdbc5e833bbda115b38cde5e31a8ebfec05ff192d1407bc8e8515c39be825da7c69a5b3afb2183aeef0c51e0b1236a2da3a39cb40437a179dbaafaa9be856ee124ba88815f6e398e4e1f6d603473601852c37e784ce412313e57cc1342e54250a120e40e98562ec9847337062c45f57e987b7d2fd658e84e92cd74bf5cc3477ad9235fe00923d568e3cab2bb2dd0bab90b1f69ba93f91c3da42a7805424f0eddcb23c69a3f7c030d5bb19c24fab9ef26c399c0e549925f3cdcde626598115e9e0112b16ab67a598f9a4d47bddb9beb5d48b4eaa9bbf1973535c47a10be2b14e3140ec9ddf862d8549b24e74160e7a9625548fcd3478cd3ae7dcabe4777018e22f049664e098f16ddc7b0ec36de9d191f10227052ef764e37980bc1a4550f49597d9c212158bc04db503e8d44cacfebf54e4bf312e2be3eb9cae1a5cddae6d0cf806957c6b33017f08ca0a46133d969848f6f839be27acdc3d35fe2b4a4afc2e02c1fe5da0385046e43fe1bd88ec6966a05c1cb654c35b426fe72c8a9d93002d2cc1d0bc0fb6393c01ba43f9ae53b723a6012f712218030e20e03aca989ce057f6eb0c8cddd7287673c8aec6a8eda06eca332ed8670f648b6034e50f7992cfe89a72642b5a068b3d546c13af2cc8b1f63f1103b381bcbb020b3a8191e189f5e46adb17cfcf8d217f985ff8907e151c555481e9c7ca6aa564e47a752ce1e20df55bfca8451be585d2990b776d3c89d4e968685509fb88e764a9241afbfa30e92979a359a8255ea3112e2be0a961142f19d853491dbfed72c60ef970c1833d1aebee147e40662f4108e64922f5705a42b49ad240b5702333099652f143880b1050100c6860e77fc2621ef1fbbeaf6a9aeb1197cdc2c399c49555fadc9ac1ec4c7338fc09e58b63749627634ef259c133af881183188f57af45b2ff6f0debc4f8b23e2ea9dee911c8b9867fbf8c59bddd1a051cb5a96083837c4400400c75b673eaca24624dd50efea76561ff1ba3657340dc7661717a583d6a5c95b9f2d1d9afda9a9884531b842373172039cdd45230597821463f7d93e4a5ffa6a80b490b7bfa3fd5b25e686357d89f17389ade87bc2d3d4b710577f8a042ac0be9aaf5785f1f362e1871ab17a463ed7afc346d9ae52e20d2d48660ef7902ea68469609fd852f0e998fe0fcbb2d6d04ba3ddd777d606177646151d24cc8f8f6a435c2a3bf917503868c1ebf47f6b3c4d047777499b3cf501101728bb46636569835964ec14b6eef4fa366701e002e33ed3822a2386f9e1bc1d213b2fc6c95fd64e18b4143f9aaaefc8ccc6d7c94f19885e5aa54c00bc2ae139b6f634ed9282202989a986162e38152bd8d521872e2ddd8c268fc41a902cdca6c1bf2341c30c249cb361ade3122ba48f894fc92b4a3e08869e5938bef20beb7d660f2674b4170d58b42bd860ea1f631f426f9dfa0e1692234a9903666f14e4ca24f861e17412c6d0866c0c061181b823e86980dde3b7e4073a21fc012af2bb68b5919e7539a1290a567e4c7c5c83c5fdc7a0df7649eee3095b4985d7921e09d81a91bd1b00bd5fc8d96a3c76b496a7174c42e8784390b4c0e7e9dff998fb498f9d76281ea3f8522615e33731cb675c13a62ad13c7248531584617b18dab4855b6d379c93b96b393895217bacb5b8d65ffb7b0bce670a85ff0647e297b0257f3d2fa49fd1ea130a6695ad994ed9686284448062f87ea88e0cb12ed151604ca1f2c77dfb8922d3f2b4d90fbd4210290105db4a6d4127a5a035015aecc3847127939b03b2d05a7aa5245d3e1aacd6541c47a064a593b1682ccde009945a2c6717427df432057638d87f7c0430791e5b214af351074026627c694a64a1dc7e70190dbacabf050529d2f69666ad552f13e62c3ab96ef7ddaf71e7a198834b9fc957bbf1e170624bed0a765dc27ac373bb8754d86979716322f0cd058714fe5fa778f351d6e471aa87a902808a1e3427a7b64b45cfc9e7f96183d428a6e855ded600ca34da17d02098b4230721b7aadf06dfe2d6dcc312e4e40becf8bc426d24a660d09d10fb95cda3bcd48f3ed242ea1ee53f8a7654b73007265b35312902d496df93d24c12960f9664bde2103e0c2669deced696637840a9171c2b8679818998ad9649699258f98408043954a505b0defff399ed0e5dceac541b7d91728d0be5b241ba0f1a049486331c122b670d0d4f558e0452ee4aada9c79360260de02c30cf13d6c424150b4d87e4b9b20947b7c8156d47240f578a26886cbdbd5450fb13730ab3f9063928f3419d2aab1484cdfb7dd678fd8b52f25e2bc4a76c56edebcd06c521391628f499befc1864e4275ac2032bf72d768047a6f1b9687b7e3818150d4f610796929659920f1b2b7e1f43da0390439ea56c7fbbc55233e3eda230c3718392227ff61884ecbd08f49e572b6460cd0f044bc8cbb76aaf423a915d02c9564196a0100b041905967e66a7b5c6d6d1ec5d014e6723c779d9a8db84a6f016daa05fba63e0777bbf0e1ef7eec69f5bb13626290f2b1ccfad46400184ea70ad129e44dff4422640d0c971f4a35114711023cd4908550bb98f88f639f21ba42812fada9d38186ea277dc06ad05bdb2e4fdc3c7b6316aeba7cfefd57f9c759248bae69bc4f793caf4b318c698742442daa0de6e6f35465dde15ca42822b8483a0e0d759eded8d2c00672984b7059e2ca0f67ec7a1481ded9df74b610cfecefffc842339d8685c2b03d0d2b1f3469c85e60d5ed00ef6c338284f04553f1e8bcd6d4fda6fa00a6cf11c7488d248e8320c4bde84f34862192ffa60d2683eea52912322f0eec4bf52290c66c757d820a9274b0cbe31a8af0ebae764854a1973d0e398751853c0696e7c943269fcb53db9bbde684bb970161c1dc78c8eae9b16bcf507955d6f35ab4be6188273c745bb8ad6f8b8ddaebf4f5a7e38088cb2d55381e4e70fb2803528f795532820771ab664e126d8b22b77ceb18f89b2070e13ed5d5c835bc7a4c4d95decf50d1320d98660babe545b29c3693f9bccce89911a5a9484004dddfd0a3da368d1499f1706f99f43600aba947fae68bbb74d966e51b2c01c6e10505f131a3445484676158e60d0537d6c6d44978b49ceb4a5605515a2215972d0cd68783baa77b0511b20ca760bb3e325f432562c8ac86cb81322be1c7ea6129e5ec22b0887bfe9df1f89165b640d6d005618048b1b8c9c6c247ad8ab59dc6130536a68262fe7a6a5433b77b5e4df3dada96ef51a7e1a14f181d1839b85a7bcedb94ce43f016c5a944af4a16a645839c76d712def519895e43476aa2d608ca4130a047513eb5d21031e325ccfea61f926399d6ce922f07742800a74a6e8cfd9585842733be3066dc511292e470f3f8d56def50a22a5d5f37cfa9826d2cd45cf319347b1f24525abacde9b87c2e5fffc55b5575882aa0c57e0efd03c805c2127ebd793e09b51b89cde3855463dcc09454a44f8c59a1961a3921f6e21820b19991d3f75a5c0e1da6ffc4812836dbb86f8cbb558783be2a045caa4f99e8c438845e18dbe647630417aad8b0bf2f128611dcc2e665005d7a213398fb3417050e845ec25f4d00c5405faaee3a9a909f2c47b72ccf8c652bef36fa07a38b98d05c4b8bd56e3e2b9daab75b903ff08ec11f8241c6fb9b637c2448406450f7d7f4dde2a42ce6da8697886faba6c4816008f2bfcd841b344995250e98d20e9c5e6d8a19a070a9512100f0161988f22e2b6cbb7444aac800a90514d04541a5d99f1dd06a9faea7f28a7c90d1d13698c8e30c0227498170c98abb12e25f5466ee8b7abea7251a175ef88feb2d856ccea7a675ff2f4fe5960c7ce0608cded675ca8a047f66793a942587a6bb1e9443ea3f1b045bb01bc9ff3f300b9e0272539e36563510a7d63a9f31d75fed889e9511ba7f3689ca7b74eda7f4998ea1cf1d3a9f029363f6fa6a89aac756d765eaad30c971448b7ae3b83f05bf160e7a478a1b793b99123a8f889ebc7b32403bb6964adcf17d42a9a73f045524e8d4aa67c7753ba5e174e1c863357dbe73d4903a2805c75f24f5568e5df2c52fd848dcd01963c538563fdf367f6af1d97c2bf69b33a8c684ce356580f1747352226cea442fa50e9a4f0e1b05c1507b1323c0abc46fa2379162036bbe6036ec6148ade51691bd11033906c2df857b695e32fc8279213a504c65e4074270b49dc4374841cf7957846e2839241b06ac88eea2c67a178cf67f1b6cf257d40c42</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/Shoka/lib/hbe.js"></script><link href="/Shoka/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本文章暂不开放</summary>
    
    
    
    <category term="Hexo系列" scheme="https://blog.sakurasep.site/Shoka/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://blog.sakurasep.site/Shoka/tags/Hexo/"/>
    
    <category term="零基础" scheme="https://blog.sakurasep.site/Shoka/tags/%E9%9B%B6%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>从零开始部署Hexo博客(一)</title>
    <link href="https://blog.sakurasep.site/Shoka/Hexo/Hexo%E7%B3%BB%E5%88%97-%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%90%AD%E5%BB%BA/"/>
    <id>https://blog.sakurasep.site/Shoka/Hexo/Hexo%E7%B3%BB%E5%88%97-%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%90%AD%E5%BB%BA/</id>
    <published>2022-04-11T09:55:00.000Z</published>
    <updated>2022-05-09T15:23:00.139Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误,请重新输入" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="35d253af54a09d2a8c920b5123b8658e0d55de49cebe357809e29b197a695bd8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/Shoka/lib/hbe.js"></script><link href="/Shoka/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本文章暂不开放</summary>
    
    
    
    <category term="Hexo系列" scheme="https://blog.sakurasep.site/Shoka/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://blog.sakurasep.site/Shoka/tags/Hexo/"/>
    
    <category term="零基础" scheme="https://blog.sakurasep.site/Shoka/tags/%E9%9B%B6%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>我的2021年度总结</title>
    <link href="https://blog.sakurasep.site/Shoka/Year/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%20-%202021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.sakurasep.site/Shoka/Year/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%20-%202021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2022-01-16T14:13:22.000Z</published>
    <updated>2022-05-09T15:25:31.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a class="anchor" href="#文章简介">#</a> 文章简介</h1><blockquote><p>作者：上杉九月</p></blockquote><blockquote><p>排版与发布：上杉九月</p></blockquote><h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>2021 年，我对自己算是一半满意，一半不满意吧，有些事情不尽如人意，有些事情自己做的很好，希望在 2022 年我能够有所进步。</p><p>本文中所有内容截止于 2022.1.1</p><p><strong>New Dream New Start</strong></p><h1 id="正文"><a class="anchor" href="#正文">#</a> 正文</h1><p>这次的年终总结并不是按阶段划分的，而是分成了两个部分。</p><p>第一部分是对 2021 年全年的回顾，自己做了什么，还有什么需要改进的地方。</p><p>第二部分是对 2022 年的一个总体的规划，新的一年我应该向什么方向努力。</p><h2 id="第一部分-我的2021"><a class="anchor" href="#第一部分-我的2021">#</a> 第一部分 我的 2021</h2><p>对于我来说，2021 年研究了很多网站搭建的内容，熟练的掌握云服务器的各种应用方式，接下来就让我一一给各位梳理一下。</p><h2 id="博客"><a class="anchor" href="#博客">#</a> 博客</h2><h3 id="上杉九月的博客"><a class="anchor" href="#上杉九月的博客">#</a> <a href="https://blog.sakurasep.site">上杉九月的博客</a> - Hexo</h3><h4 id="图片介绍"><a class="anchor" href="#图片介绍">#</a> 图片介绍</h4><blockquote><p>首页图</p></blockquote><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/1.jpg" alt="" /></p><blockquote><p>主页信息流</p></blockquote><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/3.jpg" alt="" /></p><blockquote><p>文章阅读</p></blockquote><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/2.jpg" alt="" /></p><h4 id="简介"><a class="anchor" href="#简介">#</a> 简介</h4><blockquote><p>使用 Hexo 博客框架 + Github Pages</p></blockquote><p>Hexo 作为目前活跃度较高的博客框架，主题丰富，功能齐全，个人是十分喜欢由 Hexo 框架生成的静态博客，Github Pages 的访问速度还是可以的，而且如果担心访问速度的话也可以将博客部署到 Gitee。</p><blockquote><p>主题使用了<span class="exturl" data-url="aHR0cHM6Ly92b2xhbnRpcy5qcy5vcmcv"> Volantis 5.0 Beta</span> 美化思路参考<span class="exturl" data-url="aHR0cHM6Ly9pbmtzcy5jbi8=">枋柚梓的猫会发光 (inkss.cn)</span></p></blockquote><p>Volantis 算是一个不错的博客主题，属于是上限高，下限也高，新手通过 Volantis 官方文档也能配置完成一个不错的页面，而如果想更进一步，Volantis 官方还收录了很多大佬的美化教程，可以进行参考。</p><blockquote><p>该博客内容主攻计算机相关内容</p></blockquote><p>由于是静态博客，写作相比于其他博客框架稍微有些繁琐，不适合日常更新。（不过有大佬写的 HPP 组件看起来还不错，等完善）。我在新的一年保证文章更新的情况下也会记录一下自己的其他方面的内容，放到博客分站吧。</p><blockquote><p>还有些正在调试的内容</p></blockquote><p>Hexo 是支持分站的，即可以将其他 Hexo 主题作为主站点的其他访问风格，目前还在做主站的调试，等主站稳定了把分站会恢复的。</p><h3 id="上杉九月的博客-2"><a class="anchor" href="#上杉九月的博客-2">#</a> <span class="exturl" data-url="aHR0cHM6Ly9oYWxvLnNha3VyYXNlcC5jbHViLw==">上杉九月的博客</span> - Halo</h3><h4 id="图片介绍-2"><a class="anchor" href="#图片介绍-2">#</a> 图片介绍</h4><blockquote><p>首页图</p></blockquote><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/4.jpg" alt="" /></p><blockquote><p>主页信息流</p></blockquote><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/5.jpg" alt="" /></p><blockquote><p>文章阅读</p></blockquote><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/6.jpg" alt="" /></p><h4 id="简介-2"><a class="anchor" href="#简介-2">#</a> 简介</h4><p>网站还处于调试期，打算把其他内容放在这里更新。</p><blockquote><p>网站是由<span class="exturl" data-url="aHR0cHM6Ly9oYWxvLnJ1bi8="> Halo 博客框架</span>搭建</p></blockquote><p>Halo 博客框架属于是动态部署的博客类型，需要依托于 Java 环境。我把该博客部署在腾讯云上。</p><p>主题使用的是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0xJbEdHL2hhbG8tdGhlbWUtc2FrdXJh"> GitHub - LIlGG/halo-theme-sakura: Halo 版本的樱花🌸主题</span></p><h3 id="上杉九月的博客-3"><a class="anchor" href="#上杉九月的博客-3">#</a> <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnNha3VyYXNlcC5jbHVi">上杉九月的博客</span> - Typecho</h3><h4 id="图片介绍-3"><a class="anchor" href="#图片介绍-3">#</a> 图片介绍</h4><blockquote><p>首页图</p></blockquote><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/7.jpg" alt="" /></p><blockquote><p>文章阅读</p></blockquote><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/8.jpg" alt="" /></p><h4 id="简介-3"><a class="anchor" href="#简介-3">#</a> 简介</h4><p>Typecho 是我最喜欢的博客框架之一，响应速度快，写作方便。</p><p>不过 Typecho 也有它的缺点，就是很多插件已经不更新了。</p><p>Typecho 的主题很多是需要付费的，当然也有免费的主题。这里我使用的是<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnp3eWluZy5jb20v">秦枫鸢梦 - 🌸花有重开日，人无再少年🏃‍♂️ (zwying.com)</span></p><h2 id="图片站"><a class="anchor" href="#图片站">#</a> <span class="exturl" data-url="aHR0cHM6Ly9waWMuc2FrdXJhc2VwLnRvcA==">图片站</span> - Chevereto</h2><h4 id="图片介绍-4"><a class="anchor" href="#图片介绍-4">#</a> 图片介绍</h4><blockquote><p>首页</p></blockquote><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/9.jpg" alt="" /></p><blockquote><p>图片浏览</p></blockquote><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2021/10.jpg" alt="" /></p><h4 id="简介-4"><a class="anchor" href="#简介-4">#</a> 简介</h4><p>图片站在去年年底就进入测试阶段，年初开始稳定运行。属于我这些网站中运行最为稳定的一个。。。</p><p>图片站可以注册（目前仅为邀请码开放，如果想上传图片的话，可以评论区留言邮箱，私发邀请码）</p><p>小服务器，空间不大，带宽不大，没法做到开放注册。</p><p>当然如果只是浏览和下载还是完全开放的。</p><p><strong>图片链接是无法进行引用的，网站开启了防盗链</strong></p><h2 id="第二部分-我的2022"><a class="anchor" href="#第二部分-我的2022">#</a> 第二部分 我的 2022</h2><p>去年对于我来说，其实是荒废了很多时间。</p><p>直到年底的几个月才认清了方向，明确了自己的未来的道路。</p><h3 id="第一件事健康的身体"><a class="anchor" href="#第一件事健康的身体">#</a> 第一件事：健康的身体</h3><p>185cm 的高个子 87KG 的体重，BMI 是稍微超标的。</p><p>对于我来说，身体长时间处于一个亚健康状态，精神支撑不了我去干一些事情，容易累，嗜睡。</p><p>&lt;details&gt;<br />&lt;summary&gt;2022 ：第一件事 &lt;/summary&gt;<br />&lt;ul&gt;<br />&lt;li&gt;&lt;input disabled=&quot;&quot;type=&quot;checkbox&quot;&gt; BMI 回归正常水平，适当的增加肌肉 &lt;/li&gt;<br />&lt;/ul&gt;<br />&lt;/details&gt;</p><h3 id="第二件事英语"><a class="anchor" href="#第二件事英语">#</a> 第二件事：英语</h3><p>&lt;details&gt;<br />&lt;summary&gt;2022 ：第二件事 &lt;/summary&gt;<br />&lt;ul&gt;<br />&lt;li&gt;&lt;input disabled=&quot;&quot;type=&quot;checkbox&quot;&gt; 2022 年的两场考试，争取一遍过四级和六级 &lt;/li&gt;<br />&lt;/ul&gt;<br />&lt;/details&gt;</p><h3 id="第三件事考研"><a class="anchor" href="#第三件事考研">#</a> 第三件事：考研</h3><p>&lt;details&gt;<br />&lt;summary&gt;2022 ：第三件事 &lt;/summary&gt;<br />&lt;ul&gt;<br />&lt;li&gt;&lt;input disabled=&quot;&quot;type=&quot;checkbox&quot;&gt; 准备考研相关内容 &lt;/li&gt;<br />&lt;/ul&gt;<br />&lt;/details&gt;</p><h3 id="第四件事专业水平"><a class="anchor" href="#第四件事专业水平">#</a> 第四件事：专业水平</h3><p>&lt;details&gt;<br />&lt;summary&gt;2022 ：第四件事 &lt;/summary&gt;<br />&lt;ul&gt;<br />&lt;li&gt;&lt;input disabled=&quot;&quot;type=&quot;checkbox&quot;&gt; 全面提高自己的代码能力 &lt;/li&gt;<br />&lt;/ul&gt;<br />&lt;/details&gt;</p><h3 id="第五件事文章更新"><a class="anchor" href="#第五件事文章更新">#</a> 第五件事：文章更新</h3><p>&lt;details&gt;<br />&lt;summary&gt;2022 ：第五件事 &lt;/summary&gt;<br />&lt;ul&gt;<br />&lt;li&gt;&lt;input disabled=&quot;&quot;type=&quot;checkbox&quot;&gt; 持续产出高质量文章 &lt;/li&gt;<br />&lt;/ul&gt;<br />&lt;/details&gt;</p><h3 id="第六件事远足"><a class="anchor" href="#第六件事远足">#</a> 第六件事：远足</h3><p>&lt;details&gt;<br />&lt;summary&gt;2022 ：第六件事 &lt;/summary&gt;<br />&lt;ul&gt;<br />&lt;li&gt;&lt;input disabled=&quot;&quot;type=&quot;checkbox&quot;&gt; 暑假里组织一次远足 &lt;/li&gt;<br />&lt;/ul&gt;<br />&lt;/details&gt;</p><hr /><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt="" /></p>]]></content>
    
    
    <summary type="html">回顾一下我的2021</summary>
    
    
    
    <category term="年度总结" scheme="https://blog.sakurasep.site/Shoka/categories/Year/"/>
    
    
    <category term="年度总结" scheme="https://blog.sakurasep.site/Shoka/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>《CTF学习笔记》</title>
    <link href="https://blog.sakurasep.site/Shoka/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20CTF(Crypto)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.sakurasep.site/Shoka/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20CTF(Crypto)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-11-15T13:32:12.000Z</published>
    <updated>2022-05-09T15:25:02.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a class="anchor" href="#文章简介">#</a> 文章简介</h1><blockquote><p>作者：上杉九月</p><p>排版：上杉九月</p></blockquote><h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>最近一位朋友入坑 CTF，想起来开学还加了一个相关社团参加了几场比赛。还是挺有趣的。</p><p>每天做上一两个，就当是放松了。</p><h1 id="正文"><a class="anchor" href="#正文">#</a> 正文</h1><h2 id="buuctf在线评测-buuojcn-md5"><a class="anchor" href="#buuctf在线评测-buuojcn-md5">#</a> <span class="exturl" data-url="aHR0cHM6Ly9idXVvai5jbi9jaGFsbGVuZ2VzI01ENQ==">BUUCTF 在线评测 (buuoj.cn) -- MD5</span></h2><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/1.png" alt="" /></p><h3 id="题目"><a class="anchor" href="#题目">#</a> 题目</h3><p>e00cf25ad42683b3df678c61f42c6bda</p><h3 id="解法"><a class="anchor" href="#解法">#</a> 解法</h3><p>题目写的很清楚 MD5，然后给出的这一端字符串（用多了能看出来很像 MD5）</p><p>扔到 **<span class="exturl" data-url="aHR0cHM6Ly93d3cuY21kNS5jb20v">MD5 解密网站</span> ** 得到 <code>flag&#123;admin1&#125;</code></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/2.png" alt="" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/3.png" alt="" /></p><h2 id="buuctf在线评测-buuojcn-一眼就解密"><a class="anchor" href="#buuctf在线评测-buuojcn-一眼就解密">#</a> <span class="exturl" data-url="aHR0cHM6Ly9idXVvai5jbi9jaGFsbGVuZ2VzIyVFNCVCOCU4MCVFNyU5QyVCQyVFNSVCMCVCMSVFOCVBNyVBMyVFNSVBRiU4Ng==">BUUCTF 在线评测 (buuoj.cn) -- 一眼就解密</span></h2><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/4.png" alt="" /></p><h2 id="题目-2"><a class="anchor" href="#题目-2">#</a> 题目</h2><p>flag：ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=</p><h2 id="解法-2"><a class="anchor" href="#解法-2">#</a> 解法</h2><p>Base64 编码有个特点，编码末尾会出现 <code>=</code></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/5.png" alt="" /></p><p>所以说仍然是放到 **<span class="exturl" data-url="aHR0cHM6Ly93d3cucXF4aXV6aS5jbi9iaWFubWEvYmFzZTY0Lmh0bQ==">Base64 解密网站</span> **</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/6.png" alt="" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/CTF_Crypto/7.png" alt="" /></p><hr /><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt="" /></p>]]></content>
    
    
    <summary type="html">CTF还是挺有趣的，每天都做一做当作放松吧</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.sakurasep.site/Shoka/categories/Study/"/>
    
    
    <category term="CTF" scheme="https://blog.sakurasep.site/Shoka/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>《学习笔记》</title>
    <link href="https://blog.sakurasep.site/Shoka/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.sakurasep.site/Shoka/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-09-24T13:17:29.000Z</published>
    <updated>2022-05-09T15:25:12.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>要填的坑挺多的，精力有限，目前先集中更新本篇文章。</p><p>本篇文章参考书籍为 **《洛谷 - 深入浅出程序设计竞赛》**</p><h1 id="20210924"><a class="anchor" href="#20210924">#</a> 2021.09.24</h1><h2 id="1-p3156-深基15例1询问学号-洛谷-入门"><a class="anchor" href="#1-p3156-深基15例1询问学号-洛谷-入门">#</a> 1. <span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMxNTY=">P3156 【深基 15. 例 1】询问学号 - 洛谷 - 入门</span></h2><h2 id="题目描述"><a class="anchor" href="#题目描述">#</a> 题目描述</h2><p>有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n(n \le 2 \times 10^6)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 名同学陆陆续续进入教室。我们知道每名同学的学号（在 1 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span> 之间），按进教室的顺序给出。上课了，老师想知道第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 个进入教室的同学的学号是什么（最先进入教室的同学 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>），询问次数不超过 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span> 次。</p><h2 id="输入格式"><a class="anchor" href="#输入格式">#</a> 输入格式</h2><p>第一行 2 个整数 n 和 m，表示学生个数和询问次数。</p><p>第二行 n 个整数，表示按顺序进入教室的学号。</p><p>第三行 m 个整数，表示询问第几个进入教室的同学。</p><h2 id="输出格式"><a class="anchor" href="#输出格式">#</a> 输出格式</h2><p>m 个整数表示答案，用换行隔开。</p><h2 id="样例"><a class="anchor" href="#样例">#</a> 样例</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">10</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">1</span> <span class="token number">9</span> <span class="token number">2</span> <span class="token number">60</span> <span class="token number">8</span> <span class="token number">17</span> <span class="token number">11</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">14</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">1</span> <span class="token number">5</span> <span class="token number">9</span></pre></td></tr><tr><td data-num="5"></td><td><pre>输出：</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">1</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">8</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">5</span></pre></td></tr></table></figure><h2 id="思路和知识点"><a class="anchor" href="#思路和知识点">#</a> 思路和知识点</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector基本用法</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">1.</span> vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">array</span> <span class="token punctuation">(</span>N<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> 新建一个初始长度为N，N个数据为i的vector数组</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">2.</span> array<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 将a元素添加到数组array的末尾，并增加数组长度</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">3.</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 返回数组的长度</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">4.</span> array<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> 重新将数组长度设置为n，若原数组比n长，则删除多余元素，若短，新增加的数组初始化为m</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">5.</span> array<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 返回array数组的首元素，也就是array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>的指针</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">6.</span> array<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 返回array数组末尾下一个元素的指针</pre></td></tr></table></figure><h2 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span> </span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> student<span class="token punctuation">;</span> <span class="token comment">// 创建 vector 数组</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        cin<span class="token operator">>></span>temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        student<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将 temp 压入动态 vector 数组的末尾，并且 vector 数组的长度 + 1</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        cin<span class="token operator">>></span>temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span>student<span class="token punctuation">[</span>temp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token comment">// 数组一般是从 0 开始存储数据，而我们询问学号是从 1 开始寻找</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><hr /><h2 id="2-p3613-深基15例2寄包柜-洛谷-普及"><a class="anchor" href="#2-p3613-深基15例2寄包柜-洛谷-普及">#</a> 2. <span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDM2MTM=">P3613 【深基 15. 例 2】寄包柜 - 洛谷 - 普及 </span></h2><h2 id="题目描述-2"><a class="anchor" href="#题目描述-2">#</a> 题目描述</h2><p>超市里有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n(n\le10^5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 个寄包柜。每个寄包柜格子数量不一，第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 个寄包柜有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a_i(a_i\le10^5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 个格子，不过我们并不知道各个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的值。对于每个寄包柜，格子编号从 1 开始，一直到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。现在有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>q</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">q(q\le10^5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 次操作：</p><ul><li><code>1 i j k</code> ：在第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 个柜子的第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span> 个格子存入物品 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo stretchy="false">(</mo><mn>0</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k(0\le k\le 10^9)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">k=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时说明清空该格子。</li><li><code>2 i j</code> ：查询第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 个柜子的第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span> 个格子中的物品是什么，保证查询的柜子有存过东西。</li></ul><p>已知超市里共计不会超过 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">10^7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span> 个寄包格子，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是确定然而未知的，但是保证一定不小于该柜子存物品请求的格子编号的最大值。当然也有可能某些寄包柜中一个格子都没有。</p><h2 id="输入格式-2"><a class="anchor" href="#输入格式-2">#</a> 输入格式</h2><p>第一行 2 个整数 n 和 q，寄包柜个数和询问次数。</p><p>接下来 q 个整数，表示一次操作。</p><h2 id="输出格式-2"><a class="anchor" href="#输出格式-2">#</a> 输出格式</h2><p>对于查询操作时，输出答案。</p><h2 id="样例-2"><a class="anchor" href="#样例-2">#</a> 样例</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">5</span> <span class="token number">4</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">1</span> <span class="token number">3</span> <span class="token number">10000</span> <span class="token number">114514</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">2</span> <span class="token number">3</span> <span class="token number">10000</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="7"></td><td><pre>输出：</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">114514</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token number">1</span></pre></td></tr></table></figure><h2 id="思路和知识点-2"><a class="anchor" href="#思路和知识点-2">#</a> 思路和知识点</h2><p><a href="#%E6%80%9D%E8%B7%AF%E5%92%8C%E7%9F%A5%E8%AF%86%E7%82%B9">vector 相关操作</a></p><p>注意 此题的数据范围是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>, 如果开一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span> * <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span> 的二维数组，空间占用将会十分离谱</p><p>所以此类题目使用 vector 便可以最大程度的减少空间的占用</p><h2 id="ac代码-2"><a class="anchor" href="#ac代码-2">#</a> AC 代码</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> q<span class="token punctuation">,</span> op<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    cin<span class="token operator">>></span>n<span class="token operator">>></span>q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    vector <span class="token operator">&lt;</span> vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">block</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此时仅仅是开了一个长度为 n 的一维数组</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> q<span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        cin<span class="token operator">>></span>op<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            cin<span class="token operator">>></span>i<span class="token operator">>></span>j<span class="token operator">>></span>k<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>block<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// 如果柜子里格子不足，那么就扩展第 i 个柜子的格子到 j + 1</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                block<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            block<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            cin<span class="token operator">>></span>i<span class="token operator">>></span>j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            cout<span class="token operator">&lt;&lt;</span>block<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><hr /><h2 id="3-手写栈的操作"><a class="anchor" href="#3-手写栈的操作">#</a> 3. <span class="exturl" data-url="YWJvdXQ6Ymxhbms=">手写栈的操作</span></h2><h2 id="题目描述-3"><a class="anchor" href="#题目描述-3">#</a> 题目描述</h2><p>栈作为一个先进先出的数据结构，尽管 &lt;stack&gt; 头文件已经提供了现成的关于栈的操作</p><p>但是在 STL 里面，使用这些操作而不使用 O2 优化</p><p>会导致程序有一点点慢</p><h2 id="思路和知识点-3"><a class="anchor" href="#思路和知识点-3">#</a> 思路和知识点</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>C语言提供了栈的相关快捷操作<span class="token operator">&lt;</span>stack<span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">1.</span> stack <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span> 新建一个栈</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">2.</span> s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 将元素a压入栈</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">3.</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 将s的栈顶元素弹出</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">4.</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 查询s的栈顶元素</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">5.</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 查询s的元素个数</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">6.</span> s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 查询s是否为空</pre></td></tr></table></figure><h2 id="手写栈模板请根据实际情况进行修改"><a class="anchor" href="#手写栈模板请根据实际情况进行修改">#</a> 手写栈模板 (请根据实际情况进行修改)</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> stack<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 指针，指向的是下一个栈元素</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token comment">// 压栈操作</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    stack<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 弹出栈顶元素</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    stack<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 查询栈顶元素</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">return</span> stack<span class="token punctuation">[</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><hr /><h2 id="4-uva673-平衡的括号-parentheses-balance-洛谷-普及"><a class="anchor" href="#4-uva673-平衡的括号-parentheses-balance-洛谷-普及">#</a> 4. <span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vVVZBNjcz">UVA673 平衡的括号 Parentheses Balance - 洛谷 - 普及 </span></h2><h2 id="题目描述-4"><a class="anchor" href="#题目描述-4">#</a> 题目描述</h2><p>输入一个包含 “()” 和 “[]” 的括号序列，判断是否合法。<br />具体规则：</p><ol><li>空串合法；</li><li>如果 A 和 B 合法，那么 AB 合法；</li><li>如果 A 合法 (A) 和 [A] 都合法</li></ol><p>感谢 @陶文祥  提供的翻译。</p><h2 id="样例-3"><a class="anchor" href="#样例-3">#</a> 样例</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>输入<span class="token operator">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">3</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>输出<span class="token operator">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>Yes</pre></td></tr><tr><td data-num="8"></td><td><pre>No</pre></td></tr><tr><td data-num="9"></td><td><pre>Yes</pre></td></tr></table></figure><h2 id="思路和知识点-4"><a class="anchor" href="#思路和知识点-4">#</a> 思路和知识点</h2><p>你可以将含有括号的这一个字符串人为的分为左右两边。</p><p>出栈判定是右边的括号可以将左边正处于栈顶的括号匹配消除</p><p>入栈判定是栈为空或者是没有对应的括号可以匹配</p><h2 id="ac代码-3"><a class="anchor" href="#ac代码-3">#</a> AC 代码</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> stack<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 栈顶指针，指的是下一个待插入的数组位置</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token comment">// 压栈操作</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    stack<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    stack<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">return</span> stack<span class="token punctuation">[</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">char</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token punctuation">)</span><span class="token comment">// 因为要让右边的括号匹配左边的括号，所以说对于每一种右括号都应该返回相对应的左括号形式</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token char">')'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">return</span> <span class="token char">'('</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token char">']'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token keyword">return</span> <span class="token char">'['</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token char">'&#125;'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token keyword">return</span> <span class="token char">'&#123;'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">return</span> <span class="token char">'/0'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">int</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    cin<span class="token operator">>></span>num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// C++ 在使用 cin 输入时，光标停留在数字行的末尾，如果此时用 getline 读取一行，那么将读取到空行</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里才是真正的去读入字符串</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                <span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 栈空则压入数据</span></pre></td></tr><tr><td data-num="54"></td><td><pre>                <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 栈顶左括号与右括号匹配</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>                <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>            <span class="token keyword">else</span></pre></td></tr><tr><td data-num="61"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>                <span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="70"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"No\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><hr /><h1 id="20210926"><a class="anchor" href="#20210926">#</a> 2021.09.26</h1><h2 id="5-p1449-后缀表达式-洛谷-普及"><a class="anchor" href="#5-p1449-后缀表达式-洛谷-普及">#</a> 5. <span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDE0NDk=">P1449 后缀表达式 - 洛谷 - 普及 </span></h2><h3 id="题目描述-5"><a class="anchor" href="#题目描述-5">#</a> 题目描述</h3><p>所谓后缀表达式是指这样的一个表达式：式中不再引用括号，运算符号放在两个运算对象之后，所有计算按运算符号出现的顺序，严格地由左而右新进行（不用考虑运算符的优先级）。</p><p>如：3*(5–2)+7 对应的后缀表达式为：3．5．2．-*7．+@。’@’为表达式的结束符号。‘.’为操作数的结束符号。</p><h2 id="样例-4"><a class="anchor" href="#样例-4">#</a> 样例</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">3.5</span><span class="token punctuation">.</span><span class="token number">2.</span><span class="token operator">-</span><span class="token operator">*</span><span class="token number">7.</span><span class="token operator">+</span>@</pre></td></tr><tr><td data-num="3"></td><td><pre>输出：</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">16</span></pre></td></tr></table></figure><h2 id="思路和知识点-5"><a class="anchor" href="#思路和知识点-5">#</a> 思路和知识点</h2><p>首先注意一点，运算符号前面的两位数字便是进行运算的两位数。</p><p>当在字符串读取到运算符号的时候，便从栈顶的顶部取两个数，然后进行运算，运算后的结果仍然放在栈顶。</p><h2 id="ac代码-4"><a class="anchor" href="#ac代码-4">#</a> AC 代码</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> stack<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    stack<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    stack<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">return</span> stack<span class="token punctuation">[</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span> <span class="token comment">//x, y 是用于存放两个算数的临时变量</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">do</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">&lt;=</span> <span class="token char">'9'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">>=</span> <span class="token char">'0'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            sum <span class="token operator">=</span> sum <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token function">push</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token char">'@'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            x <span class="token operator">=</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            y <span class="token operator">=</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>                <span class="token keyword">case</span> <span class="token char">'+'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="44"></td><td><pre>                    <span class="token function">push</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>                <span class="token keyword">case</span> <span class="token char">'-'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="47"></td><td><pre>                    <span class="token function">push</span><span class="token punctuation">(</span>y <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>                <span class="token keyword">case</span> <span class="token char">'*'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="50"></td><td><pre>                    <span class="token function">push</span><span class="token punctuation">(</span>x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>                <span class="token keyword">case</span> <span class="token char">'/'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                    <span class="token function">push</span><span class="token punctuation">(</span>y <span class="token operator">/</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            </pre></td></tr><tr><td data-num="55"></td><td><pre>                <span class="token comment">//default:</span></pre></td></tr><tr><td data-num="56"></td><td><pre>                    <span class="token comment">//break;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token char">'@'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><hr /><h2 id="6-p1739-表达式括号匹配-洛谷-入门"><a class="anchor" href="#6-p1739-表达式括号匹配-洛谷-入门">#</a> 6. <span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDE3Mzk=">P1739 表达式括号匹配 - 洛谷 - 入门</span></h2><h3 id="题目描述-6"><a class="anchor" href="#题目描述-6">#</a> 题目描述</h3><p>假设一个表达式有英文字母（小写）、运算符（+，—，*，/）和左右小（圆）括号构成，以 “@” 作为表达式的结束符。请编写一个程序检查表达式中的左右圆括号是否匹配，若匹配，则返回 “YES”；否则返回 “NO”。表达式长度小于 255，左圆括号少于 20 个。</p><h2 id="样例-5"><a class="anchor" href="#样例-5">#</a> 样例</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>x<span class="token punctuation">)</span>@</pre></td></tr><tr><td data-num="3"></td><td><pre>输出：</pre></td></tr><tr><td data-num="4"></td><td><pre>YES</pre></td></tr><tr><td data-num="5"></td><td><pre>输入：</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">(</span><span class="token number">25</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span>b<span class="token punctuation">)</span>@</pre></td></tr><tr><td data-num="7"></td><td><pre>输出</pre></td></tr><tr><td data-num="8"></td><td><pre>NO</pre></td></tr></table></figure><h2 id="思路和知识点-6"><a class="anchor" href="#思路和知识点-6">#</a> 思路和知识点</h2><p>这个相比于前面那道括号匹配题更加简单。</p><p>只要程序读取到左括号就压入栈顶，读入右括号就将栈顶弹出。</p><p>如果到最后栈非空，输出 NO，反之，输出 YES。</p><h2 id="ac代码-5"><a class="anchor" href="#ac代码-5">#</a> AC 代码</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> stack<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    stack<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    stack<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">return</span> stack<span class="token punctuation">[</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    string s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">')'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token keyword">else</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                <span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><hr /><h2 id="7-p1044-noip2003-普及组栈-洛谷-普及"><a class="anchor" href="#7-p1044-noip2003-普及组栈-洛谷-普及">#</a> 7. <span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDEwNDQ=">P1044 (NOIP2003 普及组) 栈 - 洛谷 - 普及</span></h2><h3 id="题目描述-7"><a class="anchor" href="#题目描述-7">#</a> 题目描述</h3><p>栈是计算机中经典的数据结构，简单的说，栈就是限制在一端进行插入删除操作的线性表。</p><p>栈有两种最重要的操作，即 pop（从栈顶弹出一个元素）和 push（将一个元素进栈）。</p><p>栈的重要性不言自明，任何一门数据结构的课程都会介绍栈。宁宁同学在复习栈的基本概念时，想到了一个书上没有讲过的问题，而他自己无法给出答案，所以需要你的帮忙。</p><p><img data-src="https://cdn.luogu.com.cn/upload/pic/18.png" alt="" /></p><p>宁宁考虑的是这样一个问题：一个操作数序列，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1,2,\ldots ,n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span>（图示为 1 到 3 的情况），栈 A 的深度大于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>。</p><p>现在可以进行两种操作，</p><ol><li>将一个数，从操作数序列的头端移到栈的头端（对应数据结构栈的 push 操作）</li><li>将一个数，从栈的头端移到输出序列的尾端（对应数据结构栈的 pop 操作）</li></ol><p>使用这两种操作，由一个操作数序列就可以得到一系列的输出序列，下图所示为由  <code>1 2 3</code>  生成序列  <code>2 3 1</code>  的过程。</p><p><img data-src="https://cdn.luogu.com.cn/upload/pic/19.png" alt="" /></p><p>（原始状态如上图所示）</p><p>你的程序将对给定的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>，计算并输出由操作数序列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1,2,\ldots,n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span> 经过操作可能得到的输出序列的总数。</p><h2 id="样例-6"><a class="anchor" href="#样例-6">#</a> 样例</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">3</span></pre></td></tr><tr><td data-num="3"></td><td><pre>输出：</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">5</span></pre></td></tr></table></figure><h2 id="思路和知识点-7"><a class="anchor" href="#思路和知识点-7">#</a> 思路和知识点</h2><p>本题我暂时也没搞得太明白，只是推算出了数学规律为卡特兰数。</p><p>至于卡特兰数怎么推导的，我再看看吧。</p><h2 id="ac代码-6"><a class="anchor" href="#ac代码-6">#</a> AC 代码</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> k<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">int</span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> k<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> k<span class="token punctuation">[</span>i <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    cout<span class="token operator">&lt;&lt;</span>k<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><hr /><h2 id="p1996-约瑟夫问题-洛谷-普及"><a class="anchor" href="#p1996-约瑟夫问题-洛谷-普及">#</a> <span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDE5OTY=">P1996 约瑟夫问题 - 洛谷 - 普及</span></h2><h2 id="题目描述-8"><a class="anchor" href="#题目描述-8">#</a> 题目描述</h2><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 个人围成一圈，从第一个人开始报数，数到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span> 的人出列，再由下一个人重新从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 开始报数，数到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span> 的人再出圈，依次类推，直到所有的人都出圈，请输出依次出圈人的编号。</p><p><strong>注意：本题和《深入浅出 - 基础篇》上例题的表述稍有不同。书上表述是给出淘汰 n-1 名小朋友，而该题是全部出圈。</strong></p><h2 id="样例-7"><a class="anchor" href="#样例-7">#</a> 样例</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>输入：</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">10</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="3"></td><td><pre>输出：</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">3</span> <span class="token number">6</span> <span class="token number">9</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">5</span> <span class="token number">10</span> <span class="token number">4</span></pre></td></tr></table></figure><h2 id="思路和知识点-8"><a class="anchor" href="#思路和知识点-8">#</a> 思路和知识点</h2><p>典型的队列问题。</p><p>这里我们先将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 个数按照从小到大的顺序以此加入队列，此时我们再每次将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">m-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个数从队前迁移到队尾，那么此时在队伍最前的便是要淘汰的数，输出后直接弹出。</p><p>直到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi><mo>=</mo><mo>=</mo><mi>t</mi><mi>a</mi><mi>i</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">head == tail</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span> 结束。</p><h2 id="ac代码-7"><a class="anchor" href="#ac代码-7">#</a> AC 代码</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> queue<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    queue<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    queue<span class="token punctuation">[</span>head<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">return</span> queue<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"1"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> tail<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token function">push</span><span class="token punctuation">(</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><hr /><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt="" /></p>]]></content>
    
    
    <summary type="html">让记忆更加深刻</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.sakurasep.site/Shoka/categories/Study/"/>
    
    
    <category term="C语言" scheme="https://blog.sakurasep.site/Shoka/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="算法" scheme="https://blog.sakurasep.site/Shoka/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>博客日志-记录博客最新动态</title>
    <link href="https://blog.sakurasep.site/Shoka/About/%E5%8D%9A%E5%AE%A2%E5%85%AC%E5%91%8A%20-%20%E4%B8%8A%E6%9D%89%E4%B9%9D%E6%9C%88%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://blog.sakurasep.site/Shoka/About/%E5%8D%9A%E5%AE%A2%E5%85%AC%E5%91%8A%20-%20%E4%B8%8A%E6%9D%89%E4%B9%9D%E6%9C%88%E7%9A%84%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-09-21T11:39:01.000Z</published>
    <updated>2022-05-09T15:24:45.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>如遇到问题请留言，谢谢支持。</p><p>这里我想要感谢</p><blockquote><p><span class="exturl" data-url="aHR0cDovL3dlbmNob25nLnNwYWNlLw==">雨中的博客 (wenchong.space)</span> 提供美化问题解答，非常感谢。</p><p><span class="exturl" data-url="aHR0cHM6Ly9pbmtzcy5jbi8=">枋柚梓的猫会发光 (inkss.cn)</span> 提供自己网站的源码开放参考，对我的美化进程帮助很大，非常感谢。</p></blockquote><h1 id="网站公告"><a class="anchor" href="#网站公告">#</a> 网站公告</h1><h2 id="关于主站"><a class="anchor" href="#关于主站">#</a> 关于主站</h2><p><strong>网站基本信息</strong></p><p>主站使用的是 <code>Github + Hexo + 腾讯云CDN</code>  的部署模式，最大程度保证访问速度。</p><p>分享文件全部采用依靠 Onedrive API 的 Cloudreve，毕竟没有限速，文件大小限制也少。</p><p>目前的加载速度已经经过很多优化，如果有加载缓慢的情况请联系站长。</p><p><strong>网站内容</strong></p><p>主要是分享知识。我个人认为知识应当没有门槛，做好知识分级，给不同阶段的朋友们都能带来收获。</p><p>目前个人技术有限，仅仅会写一些入门知识分享。</p><p>希望自己能够慢慢变强吧。</p><p>欢迎各位朋友能在思考之后积极的和我探讨交流。</p><h2 id="关于分站"><a class="anchor" href="#关于分站">#</a> 关于分站</h2><p>注意，分站仅仅是同步主站点的文章更新，有些信息可能没有及时更新。</p><p>当然，你在分站的评论博主也是能够看见的。</p><blockquote><p>本站将以往的配置的主题作为分站部署 <code>https://blog.sakurasep.site/主题名称</code> 下，通过导航栏可以直接访问</p></blockquote><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Hexo_About/1.jpg" alt="about_me" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Hexo_About/2.jpg" alt="about_me" /></p><blockquote><p>你可以选择你所喜欢的博客主题进行文章阅读，希望带给你最好的阅读体验。</p></blockquote><h2 id="关于评论"><a class="anchor" href="#关于评论">#</a> 关于评论</h2><ol><li>本站在主站的评论系统已经更换为 Twikoo，更棒的评论系统，欢迎大家使用！</li><li>本站的评论邮件提醒已经恢复，你在主站的评论收到回复后将可以接收邮件提醒。</li></ol><h2 id="关于更新"><a class="anchor" href="#关于更新">#</a> 关于更新</h2><p>首先可以确定的是，我会首先保证质量，目前我的技术水平不足，很多地方做的不是很好，还希望各位能提出修改建议，我也会积极进行修改。</p><p>目前将学业与更新做个平衡的话，基本确定是月更，一篇 or 两篇，得看我的空闲时间。</p><p>目前的规划是</p><ul><li>旧文章的维护</li><li>稳定两个系列的更新（应用使用指南 + 学习笔记）</li></ul><p>以下是更新平台</p><ol><li>首发更新 ：</li></ol><ul><li><a href="https://blog.sakurasep.site/">上杉九月的博客</a></li><li>上杉九月的知识屋（微信公众号）</li></ul><ol start="2"><li>其他平台 ：</li></ol><ul><li>酷安数码</li><li>哔哩哔哩</li><li>微博</li></ul><h1 id="博客日志"><a class="anchor" href="#博客日志">#</a> 博客日志</h1><h2 id="更新预告"><a class="anchor" href="#更新预告">#</a> 更新预告</h2><h3 id="老文章修改计划"><a class="anchor" href="#老文章修改计划">#</a> 老文章修改计划</h3><h4 id="1-应用使用指南存储空间隔离_第1期"><a class="anchor" href="#1-应用使用指南存储空间隔离_第1期">#</a> 1. <a href="">《应用使用指南》存储空间隔离_第 1 期</a></h4><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/IndexImg.png" alt="" /></p><h4 id="2-应用使用指南perfdog_第2期"><a class="anchor" href="#2-应用使用指南perfdog_第2期">#</a> 2. <a href="">《应用使用指南》Perfdog_第 2 期</a></h4><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/IndexImg.png" alt="" /></p><h3 id="新系列"><a class="anchor" href="#新系列">#</a> 新系列</h3><h4 id="1-hexo零基础教程使用hexo完成博客的基本搭建_第1期"><a class="anchor" href="#1-hexo零基础教程使用hexo完成博客的基本搭建_第1期">#</a> 1. <a href="">《Hexo 零基础教程》使用 Hexo 完成博客的基本搭建_第 1 期</a></h4><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Hexo/IndexImg.png" alt="" /></p><h3 id="恢复更新系列"><a class="anchor" href="#恢复更新系列">#</a> 恢复更新系列</h3><h4 id="1-应用使用指南filterbox_第3期"><a class="anchor" href="#1-应用使用指南filterbox_第3期">#</a> 1. <a href="">《应用使用指南》FilterBox_第 3 期</a></h4><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/FilterBox/IndexImg.jpg" alt="" /></p><hr /><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt="about_me" /></p>]]></content>
    
    
    <summary type="html">本次更新内容 - 全新的图床，全新的Volantis美化</summary>
    
    
    
    <category term="公告" scheme="https://blog.sakurasep.site/Shoka/categories/About/"/>
    
    
    <category term="博客" scheme="https://blog.sakurasep.site/Shoka/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="日志" scheme="https://blog.sakurasep.site/Shoka/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="公告" scheme="https://blog.sakurasep.site/Shoka/tags/%E5%85%AC%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>《C语言学习笔记》</title>
    <link href="https://blog.sakurasep.site/Shoka/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.sakurasep.site/Shoka/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-05-06T11:04:37.000Z</published>
    <updated>2022-05-09T15:29:53.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a class="anchor" href="#文章简介">#</a> 文章简介</h1><blockquote><p>作者：上杉九月</p><p>排版与发布：上杉九月</p></blockquote><h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><blockquote><p>记录一下程序开发实训课程的题解。</p><p>我是用的 IDE 为 VsCode，所以在代码中会出现 <code>system(&quot;pause&quot;);</code></p></blockquote><h1 id="正文"><a class="anchor" href="#正文">#</a> 正文</h1><h3 id="p1000-素数判断"><a class="anchor" href="#p1000-素数判断">#</a> P1000. 素数判断</h3><h4 id="题目描述"><a class="anchor" href="#题目描述">#</a> 题目描述</h4><p>编写一个函数 isprime (n). 判断整数 n 是否为素数。编写程序使用此函数，当输入一个整数时，对它进行判断，当为素数时，输出 1. 否则，输出 0.</p><h4 id="输入输出格式"><a class="anchor" href="#输入输出格式">#</a> 输入输出格式</h4><h5 id="输入格式"><a class="anchor" href="#输入格式">#</a> 输入格式</h5><p>输入一个整数</p><h5 id="输出格式"><a class="anchor" href="#输出格式">#</a> 输出格式</h5><p>输出判断结果 0 或 1</p><h4 id="输入输出样例"><a class="anchor" href="#输入输出样例">#</a> 输入输出样例</h4><h5 id="输入样例-1"><a class="anchor" href="#输入样例-1">#</a> 输入样例 #1</h5><pre><code>45</code></pre><h5 id="输出样例-1"><a class="anchor" href="#输出样例-1">#</a> 输出样例 #1</h5><pre><code>0</code></pre><h4 id="题解"><a class="anchor" href="#题解">#</a> 题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路"><a class="anchor" href="#思路">#</a> 思路</h5><p>本题十分简单。</p><ul><li>使用 <code>temp</code>  变量存储 <code>num</code>  的因数个数</li><li>使用 for 从 2 循环到 <code>num</code> ，若出现 <code>num</code>  整除 <code>i</code>  时使 <code>temp++</code></li><li>最后使用 if 判断， <code>temp</code>  为 0 则说明只有 1 和它本身两个因数，故输出 1； <code>temp &gt; 0</code>  则说明有其他的因数，故输出 0</li></ul><h5 id="ac代码"><a class="anchor" href="#ac代码">#</a> AC 代码</h5><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> pr<span class="token punctuation">[</span><span class="token number">10000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">isprime</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            temp<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">int</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    cin<span class="token operator">>></span>num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    cout<span class="token operator">&lt;&lt;</span><span class="token function">isprime</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="p1001-直角三角形"><a class="anchor" href="#p1001-直角三角形">#</a> P1001. 直角三角形</h3><h4 id="题目描述-2"><a class="anchor" href="#题目描述-2">#</a> 题目描述</h4><p>任意输入三条边的边长（实数类型），判断能否组成三角形，如果不可以组成三角形，程序输出 “It is not a triangle”；如果可以组成三角形，进而判断该三角形是否是直角三角形，如果是直角三角形，程序输出 “It is a right triangle”，否则输出 “It is not a right triangle”。</p><h4 id="输入输出格式-2"><a class="anchor" href="#输入输出格式-2">#</a> 输入输出格式</h4><h5 id="输入格式-2"><a class="anchor" href="#输入格式-2">#</a> 输入格式</h5><p>三条边的边长</p><h5 id="输出格式-2"><a class="anchor" href="#输出格式-2">#</a> 输出格式</h5><p>判断结果</p><h4 id="输入输出样例-2"><a class="anchor" href="#输入输出样例-2">#</a> 输入输出样例</h4><h5 id="输入样例-1-2"><a class="anchor" href="#输入样例-1-2">#</a> 输入样例 #1</h5><p>6 8 10</p><h5 id="输出样例-1-2"><a class="anchor" href="#输出样例-1-2">#</a> 输出样例 #1</h5><p>It is a right triangle</p><h4 id="题解-2"><a class="anchor" href="#题解-2">#</a> 题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-2"><a class="anchor" href="#思路-2">#</a> 思路</h5><ul><li>首先为了方便处理数据，先将三条边长按照从小到大的顺序排列。排序算法随意，这里为了省事直接 sort</li><li>然后 <code>Judge_Triangle</code>  对数据预处理，筛选出来是否为三角形。若是，则进入下一个函数 <code>Right_Triangle</code> ，若不是，直接输出<strong> It is not a triangle</strong></li><li>判断直角三角形也很简单，勾股定理即可</li></ul><h5 id="ac代码-2"><a class="anchor" href="#ac代码-2">#</a> AC 代码</h5><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">void</span> <span class="token function">Right_Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"It is a right triangle"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"It is not a right triangle"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">void</span> <span class="token function">Judge_Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token function">Right_Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"It is not a triangle"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token function">Judge_Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="p1002-直角三角形求最小余弦值"><a class="anchor" href="#p1002-直角三角形求最小余弦值">#</a> P1002. 直角三角形，求最小余弦值</h3><h4 id="题目描述-3"><a class="anchor" href="#题目描述-3">#</a> 题目描述</h4><p>任意输入三条边的边长（整数类型），判断能否组成三角形，如果不可以组成三角形，程序输出 “It is not a triangle”；如果可以组成三角形，进而判断该三角形是否是直角三角形，如果不是直角三角形，程序输出 “It is not a right triangle”，否则输出最小余弦值的最简分式。比如三边分别是 6、8、10 时，最小的余弦值是 6/10，那么输出的结果应该是 3/5。</p><h4 id="输入输出格式-3"><a class="anchor" href="#输入输出格式-3">#</a> 输入输出格式</h4><h5 id="输入格式-3"><a class="anchor" href="#输入格式-3">#</a> 输入格式</h5><p>三条边的边长</p><h5 id="输出格式-3"><a class="anchor" href="#输出格式-3">#</a> 输出格式</h5><p>最小余弦值的最简分式</p><h4 id="输入输出样例-3"><a class="anchor" href="#输入输出样例-3">#</a> 输入输出样例</h4><h5 id="输入样例-1-3"><a class="anchor" href="#输入样例-1-3">#</a> 输入样例 #1</h5><pre><code>6 8 10</code></pre><h5 id="输出样例-1-3"><a class="anchor" href="#输出样例-1-3">#</a> 输出样例 #1</h5><pre><code>3/5</code></pre><h4 id="题解-3"><a class="anchor" href="#题解-3">#</a> 题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-3"><a class="anchor" href="#思路-3">#</a> 思路</h5><ul><li>本题是在上题的基础上增加了分式化简，因为已经对边长进行了排序，故余弦值一定是 <code>a[0] / a[2]</code></li><li>化简就是找两者的最大公因式，使用 <code>temp</code>  存储，然后使用 for 遍历较小的边</li><li>因为 <code>temp</code>  这里初始为 0，所以 <code>temp</code>  为 0 说明两者没有公因式，直接输出</li></ul><h5 id="ac代码-3"><a class="anchor" href="#ac代码-3">#</a> AC 代码</h5><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">void</span> <span class="token function">GCD</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            temp <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">void</span> <span class="token function">Cos_Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token function">GCD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"/"</span><span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> temp<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"/"</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">void</span> <span class="token function">Right_Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token function">Cos_Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"It is not a right triangle"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">void</span> <span class="token function">Judge_Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token function">Right_Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"It is not a triangle"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token function">Judge_Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="p1003-求三角形面积"><a class="anchor" href="#p1003-求三角形面积">#</a> P1003. 求三角形面积</h3><h4 id="题目描述-4"><a class="anchor" href="#题目描述-4">#</a> 题目描述</h4><p>若已知三角形三个边的长度分别为 a,b,c（并假设三个边长度的单位一致，在本编程题中忽略其单位），则可以利用公式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><msqrt><mrow><mi>s</mi><mo stretchy="false">(</mo><mi>s</mi><mo>−</mo><mi>a</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>s</mi><mo>−</mo><mi>b</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>s</mi><mo>−</mo><mi>c</mi><mo stretchy="false">)</mo></mrow></msqrt></mrow><annotation encoding="application/x-tex">S = \sqrt{s(s - a)(s - b)(s - c)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.30499999999999994em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span></span></span></span>，然后利用上述公式计算面积并输出，结果小数点后保留 3 位有效数字。</p><h4 id="输入输出格式-4"><a class="anchor" href="#输入输出格式-4">#</a> 输入输出格式</h4><h5 id="输入格式-4"><a class="anchor" href="#输入格式-4">#</a> 输入格式</h5><p>从控制台输入三个整数表示三角形三个边的长度，以空格分隔三个整数。</p><h5 id="输出格式-4"><a class="anchor" href="#输出格式-4">#</a> 输出格式</h5><p>向控制台输出求得的三角形的面积，小数点后保留三位有效数字。</p><h4 id="输入输出样例-4"><a class="anchor" href="#输入输出样例-4">#</a> 输入输出样例</h4><h5 id="输入样例-1-4"><a class="anchor" href="#输入样例-1-4">#</a> 输入样例 #1</h5><pre><code>4 4 6</code></pre><h5 id="输出样例-1-4"><a class="anchor" href="#输出样例-1-4">#</a> 输出样例 #1</h5><pre><code>7.937</code></pre><h4 id="题解-4"><a class="anchor" href="#题解-4">#</a> 题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-4"><a class="anchor" href="#思路-4">#</a> 思路</h5><ul><li>有公式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><msqrt><mrow><mi>s</mi><mo stretchy="false">(</mo><mi>s</mi><mo>−</mo><mi>a</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>s</mi><mo>−</mo><mi>b</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>s</mi><mo>−</mo><mi>c</mi><mo stretchy="false">)</mo></mrow></msqrt></mrow><annotation encoding="application/x-tex">S = \sqrt{s(s - a)(s - b)(s - c)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.30499999999999994em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span></span></span></span>，直接根据公式写代码</li><li>使用 <code>.3f</code>  保留三位小数</li></ul><h5 id="ac代码-4"><a class="anchor" href="#ac代码-4">#</a> AC 代码</h5><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">float</span> s<span class="token punctuation">,</span> area<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    s <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    area <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">*</span> <span class="token punctuation">(</span>s <span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>s <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>s <span class="token operator">-</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.3f"</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="p1004-整数各位数求和"><a class="anchor" href="#p1004-整数各位数求和">#</a> P1004. 整数各位数求和</h3><h4 id="题目描述-5"><a class="anchor" href="#题目描述-5">#</a> 题目描述</h4><p>编写一个函数 sum (i), 将输入的整形参数 i 的各位求和，返回求和结果。在 main () 函数中测试此函数，从键盘输入整数 n（n 在区间 [1,20]），然后再输入 n 个非负整数，对于每一个非负整数调用 sum 函数求各位数和，将结果输出到屏幕。</p><h4 id="输入输出格式-5"><a class="anchor" href="#输入输出格式-5">#</a> 输入输出格式</h4><h5 id="输入格式-5"><a class="anchor" href="#输入格式-5">#</a> 输入格式</h5><p>从键盘输入一个正整数 n，然后有 n 行输入，分别表示 n 个非负整数。</p><h5 id="输出格式-5"><a class="anchor" href="#输出格式-5">#</a> 输出格式</h5><p>在屏幕上分别输出 n 行，第 i 行依次对应第 i 个非负整数的各位之和。</p><h4 id="输入输出样例-5"><a class="anchor" href="#输入输出样例-5">#</a> 输入输出样例</h4><h5 id="输入样例-1-5"><a class="anchor" href="#输入样例-1-5">#</a> 输入样例 #1</h5><pre><code>42345670999999000432</code></pre><h5 id="输出样例-1-5"><a class="anchor" href="#输出样例-1-5">#</a> 输出样例 #1</h5><pre><code>270549</code></pre><h5 id="样例说明"><a class="anchor" href="#样例说明">#</a> 样例说明</h5><pre><code>整数234567、0、999999和000432各位之和（个位、十位、百位&amp;hellip;&amp;hellip;相加）分别为：27、0、54和9，故在屏幕上打印输出：270549</code></pre><h4 id="题解-5"><a class="anchor" href="#题解-5">#</a> 题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-5"><a class="anchor" href="#思路-5">#</a> 思路</h5><ul><li>使用变量 <code>temp</code>  存储结果，对于保存在数组里的数据，%10 取最后一位，/10 舍去最后一位，当 num 舍到个位数，直接加到 <code>temp</code> ，输出结果</li></ul><h5 id="ac代码-5"><a class="anchor" href="#ac代码-5">#</a> AC 代码</h5><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">void</span> <span class="token function">Sum_Number</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        temp <span class="token operator">+=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        num <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    temp <span class="token operator">+=</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    cout<span class="token operator">&lt;&lt;</span>temp<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">int</span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token function">Sum_Number</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#125;</span>  </pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="p1005-玫瑰花数"><a class="anchor" href="#p1005-玫瑰花数">#</a> P1005. 玫瑰花数</h3><h4 id="题目描述-6"><a class="anchor" href="#题目描述-6">#</a> 题目描述</h4><p>如果一个四位数各位数字的四次方之和恰好等于该数本身，那么这个四位数就是一个玫瑰花数，例如：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1634</mn><mo>=</mo><msup><mn>1</mn><mn>4</mn></msup><mo>+</mo><msup><mn>6</mn><mn>4</mn></msup><mo>+</mo><msup><mn>3</mn><mn>4</mn></msup><mo>+</mo><msup><mn>4</mn><mn>4</mn></msup><mo>=</mo><mn>1</mn><mo>+</mo><mn>1296</mn><mo>+</mo><mn>81</mn><mo>+</mo><mn>256</mn></mrow><annotation encoding="application/x-tex">1634 = 1^4 + 6^4 + 3^4 + 4^4 = 1 + 1296 + 81 + 256</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">3</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">4</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">9</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span></span></span></span></p><p>写一个函数，判断某一个四位数是不是玫瑰花数，如果是玫瑰花数返回 1，否则返回 0。并在主函数中调用该函数，最终输出所有的玫瑰花数。</p><h4 id="输入输出格式-6"><a class="anchor" href="#输入输出格式-6">#</a> 输入输出格式</h4><h5 id="输入格式-6"><a class="anchor" href="#输入格式-6">#</a> 输入格式</h5><p>没有输入</p><h5 id="输出格式-6"><a class="anchor" href="#输出格式-6">#</a> 输出格式</h5><p>所有的四位玫瑰花数。（每行中仅显示一个玫瑰花数）</p><h4 id="输入输出样例-6"><a class="anchor" href="#输入输出样例-6">#</a> 输入输出样例</h4><p>无</p><h4 id="题解-6"><a class="anchor" href="#题解-6">#</a> 题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-6"><a class="anchor" href="#思路-6">#</a> 思路</h5><ul><li>该题枚举即可，从 1000 开始枚举到 10000，a 数组分别存个十百千四位。</li><li><code>num</code>  将每一位四次方的结果存起来，和此时枚举的 <code>i</code>  作比较，若是，则输出。</li></ul><h5 id="ac代码-6"><a class="anchor" href="#ac代码-6">#</a> AC 代码</h5><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span><span class="token comment">//pow(10, x)</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">int</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        temp <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        temp <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        num <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="p1006-旋转魔方阵"><a class="anchor" href="#p1006-旋转魔方阵">#</a> P1006. 旋转魔方阵</h3><h4 id="题目描述-7"><a class="anchor" href="#题目描述-7">#</a> 题目描述</h4><p>输入一个自然数Ｎ（N 属于 2 到 15），要求输出如下的魔方阵，即边长为 N<em>N，元素取值为 1 至 N</em>N，1 在左上角，呈顺时针方向依次放置各元素。<br />N=3 时：<br />1  2  3<br />8  9  4<br />7  6  5</p><h4 id="输入输出格式-7"><a class="anchor" href="#输入输出格式-7">#</a> 输入输出格式</h4><h5 id="输入格式-7"><a class="anchor" href="#输入格式-7">#</a> 输入格式</h5><p>从标准输入读取一个整数 N。</p><h5 id="输出格式-7"><a class="anchor" href="#输出格式-7">#</a> 输出格式</h5><p>向标准输出打印结果。输出符合要求的方阵，每个数字占 5 个字符宽度，向右对齐，在每一行末均输出一个回车符。</p><h4 id="输入输出样例-7"><a class="anchor" href="#输入输出样例-7">#</a> 输入输出样例</h4><h5 id="输入样例-1-6"><a class="anchor" href="#输入样例-1-6">#</a> 输入样例 #1</h5><pre><code>4</code></pre><h5 id="输出样例-1-6"><a class="anchor" href="#输出样例-1-6">#</a> 输出样例 #1</h5><pre><code>    1    2    3    4   12   13   14    5   11   16   15    6   10    9    8    7</code></pre><h4 id="题解-7"><a class="anchor" href="#题解-7">#</a> 题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-7"><a class="anchor" href="#思路-7">#</a> 思路</h5><ul><li>使用模拟算法， <code>x</code>  和 <code>y</code>  为坐标，使用 for 从 1 到 <code>num</code>  循环</li><li>明确四个方向的填数代码，注意两点。一是坐标 <code>x</code>  和 <code>y</code>  需要先改变，也就是 <code>++x ++y</code> ，同时填数变量 <code>tmp</code>  也需要先增加。（因为我们在填数时始终是在找下一个位置）</li><li>本题存在规律（代码结尾处）。先进行向右的移动，然后就是两次循环，按照下左上右的规律。</li><li>本题和接下来几个题使用的动态二维数组定义代码是通用的，可以直接当作模板套用</li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>element <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>cin<span class="token operator">>></span>size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>    element <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        element<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h5 id="ac代码-7"><a class="anchor" href="#ac代码-7">#</a> AC 代码</h5><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 定义动态二维数组</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>element <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">int</span> size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    cin<span class="token operator">>></span>size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">int</span> num <span class="token operator">=</span> size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    element <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        element<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">// 核心代码</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> num<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//right</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        element<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    </pre></td></tr><tr><td data-num="26"></td><td><pre>    y<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;</span> size <span class="token operator">*</span> size<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        num<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> num<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//down</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            element<span class="token punctuation">[</span><span class="token operator">++</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> num<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//left</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            element<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">--</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        num<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> num<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//up</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            element<span class="token punctuation">[</span><span class="token operator">--</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> num<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//right</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            element<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">++</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    </pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token comment">// 输出</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            </pre></td></tr><tr><td data-num="57"></td><td><pre>            cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>element<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    </pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token comment">// 面板停留</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token comment">/* 规律</pre></td></tr><tr><td data-num="67"></td><td><pre>1  2  3  4</pre></td></tr><tr><td data-num="68"></td><td><pre>12 13 14 5</pre></td></tr><tr><td data-num="69"></td><td><pre>11 16 15 6</pre></td></tr><tr><td data-num="70"></td><td><pre>10 9  8  7</pre></td></tr><tr><td data-num="71"></td><td><pre>3 3 3 2 2 1 1</pre></td></tr><tr><td data-num="72"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id="p1007-折叠方阵"><a class="anchor" href="#p1007-折叠方阵">#</a> P1007. 折叠方阵</h3><h4 id="题目描述-8"><a class="anchor" href="#题目描述-8">#</a> 题目描述</h4><p>给定一个起始数（大于等于 1，小于等于 20）和方阵的阶数（大于等于 1，小于等于 20），编程求得并输出该折叠方阵。一个起始数为 10，4 阶折叠方阵为：</p><p>10  11  14  19</p><p>13  12  15  20</p><p>18  17  16  21</p><p>25  24  23  22</p><h4 id="输入输出格式-8"><a class="anchor" href="#输入输出格式-8">#</a> 输入输出格式</h4><h5 id="输入格式-8"><a class="anchor" href="#输入格式-8">#</a> 输入格式</h5><p>从标准输入中输入两个正整数分别表示起始数和方阵的阶数，以一个空格分隔这两个数字。</p><h5 id="输出格式-8"><a class="anchor" href="#输出格式-8">#</a> 输出格式</h5><p>将生成的折叠方阵按行输出到标准输出上，每个数字占 4 个字符的宽度，靠右对齐，各数字之间不再有空格分隔，每行末尾有回车换行。</p><h4 id="输入输出样例-8"><a class="anchor" href="#输入输出样例-8">#</a> 输入输出样例</h4><h5 id="输入样例-1-7"><a class="anchor" href="#输入样例-1-7">#</a> 输入样例 #1</h5><pre><code>3 5</code></pre><h5 id="输出样例-1-7"><a class="anchor" href="#输出样例-1-7">#</a> 输出样例 #1</h5><pre><code>   3   4   7  12  19   6   5   8  13  20  11  10   9  14  21  18  17  16  15  22  27  26  25  24  23</code></pre><h4 id="样例说明-2"><a class="anchor" href="#样例说明-2">#</a> 样例说明</h4><p>样例输入的起始数为 3，方阵的阶数为 5，按行输出生成的折叠方阵，每个数字占 4 个字符的宽度。</p><p>提示：输出时为了使每个数字占 4 个字符宽度，c 程序可以使用：printf (&quot;%4d&quot;,......) 进行控制输出。</p><h4 id="题解-8"><a class="anchor" href="#题解-8">#</a> 题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-8"><a class="anchor" href="#思路-8">#</a> 思路</h5><ul><li>本题依然有规律，请把方阵分解为朝向左的 L。同时把第一行作为每一次循环的开始。</li><li>L 的大小是和列号相同。</li><li>核心代码为，向下的循环和向左的循环。</li></ul><h5 id="ac代码-8"><a class="anchor" href="#ac代码-8">#</a> AC 代码</h5><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    </pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 定义动态二维数组</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>element <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">int</span> start<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">int</span> size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    cin<span class="token operator">>></span>start<span class="token operator">>></span>size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> start<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    element <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        element<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    </pre></td></tr><tr><td data-num="23"></td><td><pre> </pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">// 核心代码</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>    element<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span>num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> num <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> num<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token comment">// 第一行</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        y <span class="token operator">=</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;=</span> num <span class="token operator">*</span> num <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> start<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//down</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                element<span class="token punctuation">[</span>x<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            x<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">// 纠正 X 轴</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//left</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                element<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">--</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>    </pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token comment">// 输出</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            </pre></td></tr><tr><td data-num="57"></td><td><pre>            cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>element<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    </pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token comment">// 面板停留</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="p1008-方阵乘法运算"><a class="anchor" href="#p1008-方阵乘法运算">#</a> P1008. 方阵乘法运算</h3><h4 id="题目描述-9"><a class="anchor" href="#题目描述-9">#</a> 题目描述</h4><p>从键盘输入一个正整数 n（n 属于 [1,10]），表示进行乘法运算的两个整形方阵的阶。然后分别输入两个整形方阵 A 和 B，计算 A*B 后将结果输出到屏幕。</p><h4 id="输入输出格式-9"><a class="anchor" href="#输入输出格式-9">#</a> 输入输出格式</h4><h5 id="输入格式-9"><a class="anchor" href="#输入格式-9">#</a> 输入格式</h5><p>从键盘输入一个正整数，然后再输入两个整形方阵。</p><h5 id="输出格式-9"><a class="anchor" href="#输出格式-9">#</a> 输出格式</h5><p>在屏幕上输出两个整形方阵的乘积。</p><h4 id="输入输出样例-9"><a class="anchor" href="#输入输出样例-9">#</a> 输入输出样例</h4><h5 id="输入样例-1-8"><a class="anchor" href="#输入样例-1-8">#</a> 输入样例 #1</h5><pre><code>31 1 13 3 36 6 69 9 96 6 65 5 5</code></pre><h5 id="输出样例-1-8"><a class="anchor" href="#输出样例-1-8">#</a> 输出样例 #1</h5><p>########20########20########20<br />########60########60########60<br />#######120#######120#######120</p><h4 id="样例说明-3"><a class="anchor" href="#样例说明-3">#</a> 样例说明</h4><p>首先输入正整数 3, 说明接下来要输入的方阵是 3*3 的。因为<br /> 1 1 1     9 9 9     20 20 20<br />3 3 3  *  6 6 6  =  60 60 60<br />6 6 6    5 5 5     120 120 120<br /> 所以在屏幕上打印：<br />########20########20########20<br />########60########60########60<br />#######120#######120#######120</p><p>注：&quot;#&quot; 代表空格，每个输出的整数占 10 位，不足 10 位在整数的左边用空格补足。</p><h4 id="题解-9"><a class="anchor" href="#题解-9">#</a> 题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-9"><a class="anchor" href="#思路-9">#</a> 思路</h5><ul><li><code>element[]</code>  为存储第一个矩阵， <code>element_02[]</code>  为存储第二个矩阵， <code>element_03[]</code>  为输出结果矩阵</li><li><span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOUYlQTklRTklOTglQjUlRTQlQjklOTglRTYlQjMlOTUvNTQ0NjAyOT9mcj1hbGFkZGlu">矩阵乘法_百度百科 (baidu.com)</span></li><li>只要是看懂了矩阵的乘法运算规律，通过一一对应，本题便能做出来。</li></ul><h5 id="ac代码-9"><a class="anchor" href="#ac代码-9">#</a> AC 代码</h5><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    </pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 定义动态二维数组</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>element <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>element_02 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>element_03 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">int</span> size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    cin<span class="token operator">>></span>size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>    element <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        element<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    element_02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        element_02<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>    element_03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        element_03<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token comment">// 输入数据</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            cin<span class="token operator">>></span>element<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            cin<span class="token operator">>></span>element_02<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token comment">// 核心代码</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            element_03<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>            <span class="token keyword">int</span> num <span class="token operator">=</span> size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>            <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>                element_03<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> element<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">*</span> element_02<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>                y<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>                num<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>            <span class="token punctuation">&#125;</span>   </pre></td></tr><tr><td data-num="73"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="75"></td><td><pre></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre></pre></td></tr><tr><td data-num="78"></td><td><pre>    <span class="token comment">// 结果输出</span></pre></td></tr><tr><td data-num="79"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="80"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="82"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>            cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>element_03<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="87"></td><td><pre></pre></td></tr><tr><td data-num="88"></td><td><pre>    <span class="token comment">// VSCode</span></pre></td></tr><tr><td data-num="89"></td><td><pre>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre></pre></td></tr><tr><td data-num="92"></td><td><pre></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="95"></td><td><pre>3</pre></td></tr><tr><td data-num="96"></td><td><pre>1 1 1 9 9 9</pre></td></tr><tr><td data-num="97"></td><td><pre>3 3 3 6 6 6</pre></td></tr><tr><td data-num="98"></td><td><pre>6 6 6 5 5 5</pre></td></tr><tr><td data-num="99"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id="p1009-n阶魔方阵"><a class="anchor" href="#p1009-n阶魔方阵">#</a> P1009. N 阶魔方阵</h3><h4 id="题目描述-10"><a class="anchor" href="#题目描述-10">#</a> 题目描述</h4><p>魔方阵指一个 A 是 NxN 矩阵（在本题中 N 仅为奇数，且 N&gt;1），以自然数 1，2， 。。。 N2 为元素进行填充，每个位置上分别放置一个元素，使每行、每列以及主、副对角线上的元素之和都相等。<br />如 3x3 魔方阵，图在每行、每列、主对角线、副对角线上元素之和均为 15：<br />8 1 6<br />3 5 7<br />4 9 2<br /> 奇数阶魔方阵的生成算法如下，初始矩阵 A 为空，从 1 开始依据下面的规则依次放置各个自然数（注意在下面的叙述中各元素行、列下标均以 1-N 计数）：<br />\1. 将 1 放在第一行正中的位置，即 A [1, (j+1)/2]；<br />\2. 设最后放置的元素是 A [i, j]，则将下一个元素放在最后一个插入位置的右上方，即 A [i-1, j+1]。但如果该位置已超出方阵的上边界（即如果 i&lt;0），则新位置取该列的最下一个位置，即 A [N, j+1]；如果该位置已超出方阵的右边界，取新位置取该行的最左一个位置，即 A [i-1, 1]。<br />\3. 若最近一个插入元素为 N 的整倍数，则新位置取最后插入元素下面的位置，即 A [i+1, j]。<br />输入一个奇数 N，打印对应的 N 阶魔方阵。</p><h4 id="输入输出格式-10"><a class="anchor" href="#输入输出格式-10">#</a> 输入输出格式</h4><h5 id="输入格式-10"><a class="anchor" href="#输入格式-10">#</a> 输入格式</h5><p>控制台输入一奇数 N。</p><h5 id="输出格式-10"><a class="anchor" href="#输出格式-10">#</a> 输出格式</h5><p>输出一个 N*N 的魔方阵，其中每个数字占 4 位字符的宽度，向右对齐。</p><h4 id="输入输出样例-10"><a class="anchor" href="#输入输出样例-10">#</a> 输入输出样例</h4><h5 id="输入样例-1-9"><a class="anchor" href="#输入样例-1-9">#</a> 输入样例 #1</h5><pre><code>5</code></pre><h5 id="输出样例-1-9"><a class="anchor" href="#输出样例-1-9">#</a> 输出样例 #1</h5><pre><code>  17  24   1   8  15  23   5   7  14  16   4   6  13  20  22  10  12  19  21   3  11  18  25   2   9</code></pre><h4 id="样例说明-4"><a class="anchor" href="#样例说明-4">#</a> 样例说明</h4><p>输入奇数 5，输出 5 阶魔方阵。</p><h4 id="题解-10"><a class="anchor" href="#题解-10">#</a> 题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-10"><a class="anchor" href="#思路-10">#</a> 思路</h5><ul><li>本题主要是考察限定规则，题目中每一次新的位置都是在原来位置的右上方，此时你需要考虑两种情况：一是超出数组的边界，一是右上角已经存在数据。</li><li>本题代码使用了 <code>maps</code>  数组来标记数据的填充，在每一次填数操作后都使得该位置的 <code>maps</code>  数组为 1。</li><li>判断情况有以下几种。<ul><li>超右边界但是不超上边界</li><li>超上边界但是不超右边界</li><li>既超上边界也超右边界</li><li>既不超上边界也不超右边界</li></ul></li></ul><h5 id="ac代码-10"><a class="anchor" href="#ac代码-10">#</a> AC 代码</h5><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 核心代码</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">int</span> size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    cin<span class="token operator">>></span>size<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 定义动态二维数组</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>element <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>maps <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    element <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        element<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    maps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        maps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            element<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            maps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>    element<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> num <span class="token operator">&lt;=</span> size <span class="token operator">*</span> size<span class="token punctuation">;</span> num<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token punctuation">&#123;</span>   </pre></td></tr><tr><td data-num="43"></td><td><pre>            element<span class="token punctuation">[</span><span class="token operator">++</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>            maps<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> maps<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">++</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">// 超上边界但不超右边界</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            x <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            element<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>            maps<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>            <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> size <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> maps<span class="token punctuation">[</span><span class="token operator">--</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">// 超右边界但不超上边界</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>            y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>            element<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>            maps<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>            <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> size <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> maps<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">// 既超上边界也超右边界</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>            x <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>            element<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>            maps<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>            <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> maps<span class="token punctuation">[</span><span class="token operator">--</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">++</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>            element<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>            maps<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>            <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="79"></td><td><pre></pre></td></tr><tr><td data-num="80"></td><td><pre>    <span class="token comment">// 输出</span></pre></td></tr><tr><td data-num="81"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="82"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="84"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>            cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>element<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="89"></td><td><pre></pre></td></tr><tr><td data-num="90"></td><td><pre>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="p1010-完美数"><a class="anchor" href="#p1010-完美数">#</a> P1010. 完美数</h3><h4 id="题目描述-11"><a class="anchor" href="#题目描述-11">#</a> 题目描述</h4><p>所有真约数（除本身之外的正约数）的和等于它本身的正整数叫做完美数，又叫做完全数或完备数。当所有真约数（除本身之外的正约数）的和等于它本身的正整数叫做亏数；相反情况时，叫做盈数。</p><p>比如 “4” 这个数，它的真约数有 1，2，其和是 3，3 比 4 本身小，这样的自然数就叫做亏数（又叫做缺数），类似的还有 5，7，8 等等。比如 “12” 这个数，它真约数有 1，2，3，4，6，其和是 16，16 比 12 本身大，这样的自然数就叫做盈数（又叫做丰数，或过剩数或富裕数），类似的还有 12，18，20 等等。</p><p>完美数就是既不盈余，又不亏欠的自然数，比如 “6” 这个数，它真约数有 1，2，3，其和是 1+2+3=6，刚好等于 6 本身。</p><p>要求用户从键盘上输入任意一个自然数，判断该数是盈数、亏数还是完美数。如果该数是亏数，输出 “Deficit”；如果该数是盈数，输出 “Surplus”；如果该数 是完美数，则输出 “Perfect” 。</p><h4 id="输入输出格式-11"><a class="anchor" href="#输入输出格式-11">#</a> 输入输出格式</h4><h5 id="输入格式-11"><a class="anchor" href="#输入格式-11">#</a> 输入格式</h5><p>一个自然数。</p><h5 id="输出格式-11"><a class="anchor" href="#输出格式-11">#</a> 输出格式</h5><p>如果该数是亏数，输出 “Deficit”；如果该数是盈数，输出 “Surplus”；如果该数是完美数，输出 “Perfect”。</p><h4 id="输入输出样例-11"><a class="anchor" href="#输入输出样例-11">#</a> 输入输出样例</h4><h5 id="输入样例-1-10"><a class="anchor" href="#输入样例-1-10">#</a> 输入样例 #1</h5><pre><code>6</code></pre><h5 id="输出样例-1-10"><a class="anchor" href="#输出样例-1-10">#</a> 输出样例 #1</h5><pre><code>Perfect</code></pre><h4 id="题解-11"><a class="anchor" href="#题解-11">#</a> 题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-11"><a class="anchor" href="#思路-11">#</a> 思路</h5><ul><li>本题实际上是找因数的改动版本。先找到输入数的因数，然后将所有因数（除它本身以外）相加。</li></ul><h5 id="ac代码-11"><a class="anchor" href="#ac代码-11">#</a> AC 代码</h5><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">int</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    cin<span class="token operator">>></span>num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    </pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">//Core</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            ans <span class="token operator">+=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">></span> num<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Surplus"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">&lt;</span> num<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Deficit"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Perfect"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="p1011-一元二次方程的根"><a class="anchor" href="#p1011-一元二次方程的根">#</a> P1011. 一元二次方程的根</h3><h4 id="题目描述不考虑虚根"><a class="anchor" href="#题目描述不考虑虚根">#</a> 题目描述（不考虑虚根）</h4><p>在实数范围内求方程<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>+</mo><mi>c</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">ax^2+bx+c=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 的根。方程的系数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a,b,c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span></span></span></span> 由用户从键盘上输入。</p><h4 id="输入输出格式-12"><a class="anchor" href="#输入输出格式-12">#</a> 输入输出格式</h4><h5 id="输入格式-1"><a class="anchor" href="#输入格式-1">#</a> 输入格式 #1</h5><p>方程的系数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a,b,c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span></span></span></span>（假设是整型数据）。</p><h5 id="输出格式-1"><a class="anchor" href="#输出格式-1">#</a> 输出格式 #1</h5><p>实数范围内求方程的根，如果存在实数根，结果保留两位小数且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mn>1</mn><mo>≥</mo><mi>x</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">x1 \ge x2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">x</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mord">2</span></span></span></span>。当有两个实根时，要求先输出实根<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy="false">[</mo><mo>−</mo><mi>b</mi><mo>+</mo><msqrt><mrow><mo stretchy="false">(</mo><mi>b</mi><mn>2</mn><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi><mo stretchy="false">)</mo></mrow></msqrt><mo stretchy="false">]</mo><mi mathvariant="normal">/</mi><mn>2</mn><mi>a</mi></mrow><annotation encoding="application/x-tex">x=[-b+\sqrt{(b2-4ac)}]/2a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.30499999999999994em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span><span class="mclose">]</span><span class="mord">/</span><span class="mord">2</span><span class="mord mathnormal">a</span></span></span></span>，空格后再输出实根<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy="false">[</mo><mo>−</mo><mi>b</mi><mo>−</mo><msqrt><mrow><mo stretchy="false">(</mo><mi>b</mi><mn>2</mn><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi><mo stretchy="false">)</mo></mrow></msqrt><mo stretchy="false">]</mo><mi mathvariant="normal">/</mi><mn>2</mn><mi>a</mi></mrow><annotation encoding="application/x-tex">x=[-b-\sqrt{(b2-4ac)}]/2a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.30499999999999994em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span><span class="mclose">]</span><span class="mord">/</span><span class="mord">2</span><span class="mord mathnormal">a</span></span></span></span>；当有两个相同的实根时，仅输出一个实根<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy="false">[</mo><mo>−</mo><mi>b</mi><mo>+</mo><msqrt><mrow><mo stretchy="false">(</mo><mi>b</mi><mn>2</mn><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi><mo stretchy="false">)</mo></mrow></msqrt><mo stretchy="false">]</mo><mi mathvariant="normal">/</mi><mn>2</mn><mi>a</mi></mrow><annotation encoding="application/x-tex">x=[-b+\sqrt{(b2-4ac)}]/2a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.30499999999999994em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span><span class="mclose">]</span><span class="mord">/</span><span class="mord">2</span><span class="mord mathnormal">a</span></span></span></span> 或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy="false">[</mo><mo>−</mo><mi>b</mi><mo>−</mo><msqrt><mrow><mo stretchy="false">(</mo><mi>b</mi><mn>2</mn><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi><mo stretchy="false">)</mo></mrow></msqrt><mo stretchy="false">]</mo><mi mathvariant="normal">/</mi><mn>2</mn><mi>a</mi></mrow><annotation encoding="application/x-tex">x=[-b-\sqrt{(b2-4ac)}]/2a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.30499999999999994em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span><span class="mclose">]</span><span class="mord">/</span><span class="mord">2</span><span class="mord mathnormal">a</span></span></span></span> 即可；当没有实根时，输出 &quot;NONE&quot;。</p><h4 id="输入输出样例-12"><a class="anchor" href="#输入输出样例-12">#</a> 输入输出样例</h4><h5 id="输入样例-1-11"><a class="anchor" href="#输入样例-1-11">#</a> 输入样例 #1</h5><pre><code>1 8 4</code></pre><h5 id="输出样例-1-11"><a class="anchor" href="#输出样例-1-11">#</a> 输出样例 #1</h5><pre><code>-0.54 -7.46</code></pre><h4 id="题解-12"><a class="anchor" href="#题解-12">#</a> 题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-12"><a class="anchor" href="#思路-12">#</a> 思路</h5><ul><li>注意 Δ 的判断即可，本题没有难度。</li></ul><h5 id="ac代码-12"><a class="anchor" href="#ac代码-12">#</a> AC 代码</h5><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">double</span> ans1<span class="token punctuation">,</span> ans2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">*</span> b <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> a <span class="token operator">*</span> c <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"NONE"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    ans1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">+</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>b <span class="token operator">*</span> b <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> a <span class="token operator">*</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    ans2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">-</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>b <span class="token operator">*</span> b <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> a <span class="token operator">*</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans1 <span class="token operator">==</span> ans2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf"</span><span class="token punctuation">,</span> ans1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf %.2lf"</span><span class="token punctuation">,</span> ans1<span class="token punctuation">,</span> ans2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h4 id="题目描述考虑虚根"><a class="anchor" href="#题目描述考虑虚根">#</a> 题目描述 (考虑虚根)</h4><p>在实数范围内求方程<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>+</mo><mi>c</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">ax^2+bx+c=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 的根。方程的系数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a,b,c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span></span></span></span> 由用户从键盘上输入。</p><h4 id="输入输出格式-13"><a class="anchor" href="#输入输出格式-13">#</a> 输入输出格式</h4><h5 id="输入格式-12"><a class="anchor" href="#输入格式-12">#</a> 输入格式</h5><p>方程的系数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a,b,c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span></span></span></span>（假设是整型数据）。</p><h5 id="输出格式-12"><a class="anchor" href="#输出格式-12">#</a> 输出格式</h5><p>实数范围内求方程的根，如果存在实数根，结果保留两位小数且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mn>1</mn><mo>≥</mo><mi>x</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">x1 \ge x2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">x</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mord">2</span></span></span></span>。当有两个实根时，要求先输出实根<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy="false">[</mo><mo>−</mo><mi>b</mi><mo>+</mo><msqrt><mrow><mo stretchy="false">(</mo><mi>b</mi><mn>2</mn><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi><mo stretchy="false">)</mo></mrow></msqrt><mo stretchy="false">]</mo><mi mathvariant="normal">/</mi><mn>2</mn><mi>a</mi></mrow><annotation encoding="application/x-tex">x=[-b+\sqrt{(b2-4ac)}]/2a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.30499999999999994em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span><span class="mclose">]</span><span class="mord">/</span><span class="mord">2</span><span class="mord mathnormal">a</span></span></span></span>，空格后再输出实根<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy="false">[</mo><mo>−</mo><mi>b</mi><mo>−</mo><msqrt><mrow><mo stretchy="false">(</mo><mi>b</mi><mn>2</mn><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi><mo stretchy="false">)</mo></mrow></msqrt><mo stretchy="false">]</mo><mi mathvariant="normal">/</mi><mn>2</mn><mi>a</mi></mrow><annotation encoding="application/x-tex">x=[-b-\sqrt{(b2-4ac)}]/2a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.30499999999999994em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span><span class="mclose">]</span><span class="mord">/</span><span class="mord">2</span><span class="mord mathnormal">a</span></span></span></span>；当有两个相同的实根时，仅输出一个实根<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy="false">[</mo><mo>−</mo><mi>b</mi><mo>+</mo><msqrt><mrow><mo stretchy="false">(</mo><mi>b</mi><mn>2</mn><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi><mo stretchy="false">)</mo></mrow></msqrt><mo stretchy="false">]</mo><mi mathvariant="normal">/</mi><mn>2</mn><mi>a</mi></mrow><annotation encoding="application/x-tex">x=[-b+\sqrt{(b2-4ac)}]/2a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.30499999999999994em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span><span class="mclose">]</span><span class="mord">/</span><span class="mord">2</span><span class="mord mathnormal">a</span></span></span></span> 或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy="false">[</mo><mo>−</mo><mi>b</mi><mo>−</mo><msqrt><mrow><mo stretchy="false">(</mo><mi>b</mi><mn>2</mn><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi><mo stretchy="false">)</mo></mrow></msqrt><mo stretchy="false">]</mo><mi mathvariant="normal">/</mi><mn>2</mn><mi>a</mi></mrow><annotation encoding="application/x-tex">x=[-b-\sqrt{(b2-4ac)}]/2a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.30499999999999994em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span><span class="mclose">]</span><span class="mord">/</span><span class="mord">2</span><span class="mord mathnormal">a</span></span></span></span> 即可；当没有实根时，输出一对共轭复根。</p><h4 id="输入输出样例-13"><a class="anchor" href="#输入输出样例-13">#</a> 输入输出样例</h4><h5 id="输入样例-1-12"><a class="anchor" href="#输入样例-1-12">#</a> 输入样例 #1</h5><pre><code>1 2 3</code></pre><h5 id="输出样例-1-12"><a class="anchor" href="#输出样例-1-12">#</a> 输出样例 #1</h5><pre><code>-1.00+1.41i -1.00-1.41i</code></pre><h4 id="题解-13"><a class="anchor" href="#题解-13">#</a> 题解</h4><blockquote><p>代码：上杉九月</p></blockquote><h5 id="思路-13"><a class="anchor" href="#思路-13">#</a> 思路</h5><ul><li>当 Δ &lt; 0 时，根为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mi>b</mi><mo>±</mo><msqrt><mrow><mo stretchy="false">(</mo><mo>−</mo><mi mathvariant="normal">Δ</mi><mo stretchy="false">)</mo><mi>i</mi></mrow></msqrt><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn><mi>a</mi></mrow><annotation encoding="application/x-tex">(-b±\sqrt{(-Δ)i})/2a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.30499999999999994em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord">−</span><span class="mord">Δ</span><span class="mclose">)</span><span class="mord mathnormal">i</span></span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span><span class="mord mathnormal">a</span></span></span></span></li></ul><h5 id="ac代码-13"><a class="anchor" href="#ac代码-13">#</a> AC 代码</h5><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">double</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">double</span> ans1<span class="token punctuation">,</span> ans2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">int</span> delta <span class="token operator">=</span> b <span class="token operator">*</span> b <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> a <span class="token operator">*</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        ans1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        ans2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span>delta<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf+%.2lfi "</span><span class="token punctuation">,</span> ans1<span class="token punctuation">,</span> ans2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf-%.2lfi"</span><span class="token punctuation">,</span> ans1<span class="token punctuation">,</span> ans2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    ans1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">+</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>b <span class="token operator">*</span> b <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> a <span class="token operator">*</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    ans2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">-</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>b <span class="token operator">*</span> b <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> a <span class="token operator">*</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans1 <span class="token operator">==</span> ans2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf"</span><span class="token punctuation">,</span> ans1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf %.2lf"</span><span class="token punctuation">,</span> ans1<span class="token punctuation">,</span> ans2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><hr /><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt="" /></p>]]></content>
    
    
    <summary type="html">零散的一些C语言习题</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.sakurasep.site/Shoka/categories/Study/"/>
    
    
    <category term="C语言" scheme="https://blog.sakurasep.site/Shoka/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>《洛谷刷题日记》</title>
    <link href="https://blog.sakurasep.site/Shoka/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E6%B4%9B%E8%B0%B7%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://blog.sakurasep.site/Shoka/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E6%B4%9B%E8%B0%B7%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2021-04-02T09:00:07.000Z</published>
    <updated>2022-05-09T15:25:07.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a class="anchor" href="#文章简介">#</a> 文章简介</h1><blockquote><p>作者：上杉九月</p><p>排版与发布：上杉九月</p></blockquote><h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>记录一下洛谷的做题详细思路，方便自己，也方便其他想要做题的同学。</p><p>为了方便访问，所有内容将在此文章更新，我会做好分类。</p><p>欢迎收藏！</p><p>如果你有对于这些题目不同的算法，欢迎在评论区与我交流。</p><h1 id="正文"><a class="anchor" href="#正文">#</a> 正文</h1><h2 id="循环结构"><a class="anchor" href="#循环结构">#</a> 循环结构</h2><h3 id="p1217-usaco15回文质数-prime-palindromes"><a class="anchor" href="#p1217-usaco15回文质数-prime-palindromes">#</a> <span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDEyMTc=">P1217 [USACO1.5] 回文质数 Prime Palindromes</span></h3><h4 id="题目描述"><a class="anchor" href="#题目描述">#</a> 题目描述</h4><p>因为 151 既是一个质数又是一个回文数（从左到右和从右到左是看一样的），所以 151 是回文质数。</p><p>写一个程序来找出范围 [a,b] (5 \le a &lt; b \le 100,000,000)(一亿) 间的所有回文质数。</p><h4 id="输入输出格式"><a class="anchor" href="#输入输出格式">#</a> 输入输出格式</h4><h5 id="输入格式"><a class="anchor" href="#输入格式">#</a> 输入格式</h5><p>第 1 行：二个整数 a 和 b .</p><h5 id="输出格式"><a class="anchor" href="#输出格式">#</a> 输出格式</h5><p>输出一个回文质数的列表，一行一个。</p><h4 id="输入输出样例"><a class="anchor" href="#输入输出样例">#</a> 输入输出样例</h4><h5 id="输入样例-1"><a class="anchor" href="#输入样例-1">#</a> 输入样例 #1</h5><pre><code>5 500</code></pre><h5 id="输出样例-1"><a class="anchor" href="#输出样例-1">#</a> 输出样例 #1</h5><pre><code>5711101131151181191313353373383</code></pre><h4 id="说明提示"><a class="anchor" href="#说明提示">#</a> 说明 / 提示</h4><p>Hint 1: Generate the palindromes and see if they are prime.</p><p>提示 1: 找出所有的回文数再判断它们是不是质数（素数）</p><p>Hint 2: Generate palindromes by combining digits properly. You might need more than one of the loops like below.</p><p>提示 2: 要产生正确的回文数，你可能需要几个像下面这样的循环。</p><p>题目翻译来自 NOCOW。</p><p>产生长度为 5 的回文数:</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>d1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> d1 <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> d1<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 只有奇数才会是素数</span></pre></td></tr><tr><td data-num="2"></td><td><pre>     <span class="token keyword">for</span> <span class="token punctuation">(</span>d2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> d2 <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> d2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>         <span class="token keyword">for</span> <span class="token punctuation">(</span>d3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> d3 <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> d3<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>           palindrome <span class="token operator">=</span> <span class="token number">10000</span><span class="token operator">*</span>d1 <span class="token operator">+</span> <span class="token number">1000</span><span class="token operator">*</span>d2 <span class="token operator">+</span><span class="token number">100</span><span class="token operator">*</span>d3 <span class="token operator">+</span> <span class="token number">10</span><span class="token operator">*</span>d2 <span class="token operator">+</span> d1<span class="token punctuation">;</span><span class="token comment">//(处理回文数...)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>     <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h4 id="题解"><a class="anchor" href="#题解">#</a> 题解</h4><blockquote><p>代码：上杉九月</p><p>线性筛素数算法：洛谷 @学委</p><p>原理性证明：<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL2Jsb2cvY2ljb3Mvbm90cHJpbWU=">学委的博客</span></p></blockquote><h5 id="回文数判断"><a class="anchor" href="#回文数判断">#</a> 回文数判断</h5><blockquote><p>从个位开始，倒序输出，最后与原数判断</p></blockquote><h5 id="质数判断"><a class="anchor" href="#质数判断">#</a> 质数判断</h5><blockquote><p>这里用到线性筛</p><p>关于质数<span class="exturl" data-url="aHR0cHM6Ly9zYWt1cmFzZXAuc2l0ZS9wb3N0cy8xMzI1My8=">请看</span></p></blockquote><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXN</span> <span class="token expression"><span class="token number">100000000</span></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">bool</span> Prime_Map<span class="token punctuation">[</span><span class="token number">100000001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 创建质数地图</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> Prime<span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//int 数组存质数</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> cnt<span class="token punctuation">;</span><span class="token comment">// 定义一个标记，记录质数的存储下标</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">bool</span> <span class="token function">Judge_Hw</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token comment">// 回文数判断</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">int</span> x <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token comment">//n 为输入数据，x 为中介数据</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        m <span class="token operator">=</span> m <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span> m <span class="token operator">==</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">void</span> <span class="token function">Judge_Prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token function">memset</span><span class="token punctuation">(</span>Prime_Map<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Prime_Map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 初始化</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    Prime_Map<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>Prime_Map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            Prime<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">// 如果下标 i 没有被筛选掉，存入质数数组</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> cnt <span class="token operator">&amp;&amp;</span> i <span class="token operator">*</span> Prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token comment">// 对质数倍数进行筛出</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            Prime_Map<span class="token punctuation">[</span>i <span class="token operator">*</span> Prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> Prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">>=</span> <span class="token number">10000000</span><span class="token punctuation">)</span><span class="token comment">// 没有超过 1 千万的质数回文数，洛谷最后一个点会卡 RE</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        b <span class="token operator">=</span> <span class="token number">10000000</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token function">Judge_Prime</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Judge_Hw</span><span class="token punctuation">(</span>Prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> Prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> Prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><hr /><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt="" /></p>]]></content>
    
    
    <summary type="html">记录自己在洛谷的做题记录</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.sakurasep.site/Shoka/categories/Study/"/>
    
    
    <category term="C语言" scheme="https://blog.sakurasep.site/Shoka/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="洛谷" scheme="https://blog.sakurasep.site/Shoka/tags/%E6%B4%9B%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>《应用使用指南》Perfdog_第2期</title>
    <link href="https://blog.sakurasep.site/Shoka/HowToUse/%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%20-%20Perfdog/"/>
    <id>https://blog.sakurasep.site/Shoka/HowToUse/%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%20-%20Perfdog/</id>
    <published>2021-03-22T12:04:51.000Z</published>
    <updated>2022-05-08T03:14:29.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a class="anchor" href="#文章简介">#</a> 文章简介</h1><blockquote><p>作者：酷安 @上杉九月</p><p>头图设计：酷安 @上杉九月</p><p>排版及其发布：酷安 @上杉九月</p></blockquote><h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><h2 id="基本介绍"><a class="anchor" href="#基本介绍">#</a> 基本介绍</h2><p>当我们作为一位消费者购买电子产品时，我们获取第一手信息的方式大多是从各大视频平台的自媒体的首发测评。当我们拿到电子产品之后，如何对它的性能进行测试呢？</p><p>有的朋友首先会想到娱乐兔，HappyMatser 等跑分软件。毕竟跑分很直观，高就是强，低就是弱。但是当跑分论成为大众的标准，厂商便会想出各种各样的方法来获取更高的跑分。例如前几天被曝光的 Realme GT 跑分作弊，还有各大厂商的跑分白名单（MIUI 检测到跑分软件运行，会将 CPU 锁在最高频率）。这样的测试只能算是极限性能，可是真正的去游戏里测试，散热设计的不同，调度优化的不同便会产生巨大的差距。</p><p>很早之前我也对手里的电子产品进行测试，当时用的是 GameBench，不过经常出问题，正版的价格更是无法接受。第二个使用的软件是快否，虽然偶尔会出现一些 bug，但是使用体验还是很不错的。不过因为这软件最后一次更新时间是 2019 年 6 月，emmm，基本是凉凉了。</p><p>去年的时候，把手里的米 9 换成了米 10，因为听说 865 的性能与功耗都平衡的很好，便产生了测试的想法。这一款由腾讯旗下 WeTest 开发的软件 Perfdog 吸引了我。支持 <code>Windows</code> ， <code>Mac OS X</code>  两个 PC 平台，可以对安卓和 iOS 设备进行测试。</p><h1 id="正文"><a class="anchor" href="#正文">#</a> 正文</h1><h2 id="软件测试环境"><a class="anchor" href="#软件测试环境">#</a> 软件测试环境</h2><blockquote><ol><li>小米 10 12G RAM MIUI12.5 21.3.12 官方包</li><li>iPad 2020 第八代 A12 iPad OS 14</li></ol></blockquote><h2 id="软件基本安装操作"><a class="anchor" href="#软件基本安装操作">#</a> 软件基本安装操作</h2><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9wZXJmZG9nLnFxLmNvbS8=">Perfdog 官方网站</span></p></blockquote><p>在 Perfdog 的官网下载对应平台的软件压缩包后，将压缩包解压到电脑的目录中。</p><p>在目录找到 Perfdog.exe 可执行文件，打开后显示登陆界面，这里可以注册账号或使用 QQ 扫码登陆。</p><p><strong>软件登录界面</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/1.png" alt="" /></p><p>登录后便会进入到软件的 UI 界面</p><p><strong>软件界面</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/2.png" alt="" /></p><p>此时便可以将你的测试设备与电脑进行链接。初始化之后，在左侧的两个选项中选择测试方式（无线 or 有线 无线可以测试电池相关内容，有线可以同步显示并记录手机画面）和测试应用（支持应用名称搜索）</p><p><strong>选择模式和设备（Windows 平台可以多开 Perfdog 并同时对多部设备测试）</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/5.jpg" alt="" /></p><p>右下角的加号是添加和减少测试项目。勾选左边的对号便是对此项目进行测试，点击右边的方框选择是否在软件中显示该项目的数据。</p><p><strong>安卓设备与 iOS 设备的测试项目稍有出入</strong></p><p><strong>安卓设备</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/3.jpg" alt="" /></p><p><strong>iOS 设备</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/4.jpg" alt="" /></p><p>选择好测试应用，调整好测试项目，拿起你的设备，准备开始吧。</p><h2 id="软件数据解释与详细使用步骤"><a class="anchor" href="#软件数据解释与详细使用步骤">#</a> 软件数据解释与详细使用步骤</h2><p>建议有能力的朋友前往<span class="exturl" data-url="aHR0cHM6Ly9iYnMucGVyZmRvZy5xcS5jb20vYXJ0aWNsZS1kZXRhaWwuaHRtbD9pZD01">官网</span>去详细了解测试项目的具体作用。以下内容是我个人的解读，可能会有一些不准确的地方，还请多多指教。</p><h3 id="概览"><a class="anchor" href="#概览">#</a> 概览</h3><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/6.jpg" alt="" /></p><ul><li>平均帧率 - Avg (FPS)<br /> 这一个数据对应的是整个测试过程的平均帧率，可以粗略的反应游戏的流畅程度。</li><li>卡顿次数 / 每 10 分钟 - Jank (/10min)</li><li>严重卡顿次数 / 每 10 分钟 - BigJank (/10min)</li></ul><p>这里放出 perfdog 官方给出的计算思路和计算方式</p><h4 id="perfdog-jank-计算思路"><a class="anchor" href="#perfdog-jank-计算思路">#</a> PerfDog Jank 计算思路：</h4><blockquote><p>考虑视觉惯性，假设以前三帧的平均帧耗时为参考，作为 vsync 时间间隔，连续两次 vsync 没有新渲染画面刷新，则认为是一次潜在卡顿，也就是说下一帧耗时大于前三帧平均帧耗时 2 倍，则认为一次潜在卡顿。同时单帧耗时满足大于两倍电影帧耗时 1000ms/24x2 (由于人眼低于 24 帧才能辨别画面不连续性)，则认为是一次真正卡顿。同时若单帧耗时大于 3 倍电影帧耗时，则认为是一次严重卡顿。</p></blockquote><h4 id="perfdog-jank计算方法"><a class="anchor" href="#perfdog-jank计算方法">#</a> PerfDog Jank 计算方法：</h4><blockquote><p>同时满足两条件，则认为是一次卡顿 Jank.<br />①Display FrameTime &gt; 前三帧平均耗时 2 倍。<br />②Display FrameTime &gt; 两帧电影帧耗时 (1000ms/24x2≈83.33ms)。<br />同时满足两条件，则认为是一次严重卡顿 BigJank.<br />①Display FrameTime &gt; 前三帧平均耗时 2 倍。<br />②Display FrameTime &gt; 三帧电影帧耗时 (1000ms/24x3=125ms)。</p></blockquote><ul><li>未规范化应用 CPU 利用率 - Avg (AppCPU)[%]<br /> 这里未规范化 CPU 利用率的计算方式 = CPU 执行时间 / CPU 总时间。如果使用这一项利用率计算 APP 的性能消耗，会出现在低频运行时和高频运行时 CPU 利用率相同的情况。<br />所以 Perfdog 官方建议使用规范化 CPU 利用率。</li><li>CPU 平均温度 - Avg (CTemp)[°C]</li><li>规范化应用 CPU 利用率 - Avg (AppCPU)[%] Normalized<br /> 这种 CPU 利用率的计算方法将 CPU 的频率考虑进去。<br />CPU Usage (Normalized)= (CPU 执行时间 / CPU 总时间) * (当前时刻所有 CPU 频率之和 / 所有 CPU 频率最大值之和)<br /> 这种计算方法可以更真实的反映出 APP 的性能消耗。</li><li>最大内存占用 - Peak (Memory)[MB]</li><li>平均上传速度 - Avg (Send)[KB/s]</li><li>平均下载速度 - Avg (Recv)[KB/s]</li><li>平均功耗 - Avg (Power)[mW]</li></ul><h4 id="fps"><a class="anchor" href="#fps">#</a> FPS</h4><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/7.jpg" alt="" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/8.jpg" alt="" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/9.jpg" alt="" /></p><ul><li><p>平均帧率 - Avg (FPS)<br /> 这一个数据对应的是整个测试过程的平均帧率，可以粗略的反应游戏的流畅程度</p></li><li><p>帧率方差 - Var (FPS)<br /> 这一个数据反映的是帧率的波动大小</p></li><li><p>大于等于某一帧率的测试数据百分比 - FPS&gt;=30 [%] FPS&gt;=45 [%]<br /> 这一数据显示可以修改，在右下角，可以看数据的大致分布</p></li><li><p>降帧次数 - Drop (FPS)[/h]<br /> 平均每小时两个相邻的 FPS 点相差大于 8 帧的次数，反映的是画面的流畅程度</p></li><li><p>卡顿次数 / 每 10 分钟 - Jank (/10min)</p></li><li><p>严重卡顿次数 / 每 10 分钟 - BigJank (/10min)</p></li><li><p>卡顿率 - Stutter [%]<br /> 计算方式 卡顿率 = 卡顿时长 / 总时长</p></li><li><p>平均单帧渲染时间 - Avg (FTime)[ms]<br /> 这一个数据可以结合第三张图 Frame Time 分析<br />如果 Frame Time 时长在某一个点很大幅度超过平均单帧渲染时间，那么大概率是一次卡顿</p></li><li><p>单帧渲染时间超过 100ms - FTime&gt;=100ms [%]<br /> 单帧渲染时间过长，很有可能导致屏幕没有内容可以刷新，所以画面不动，即为卡顿</p></li><li><p>增量耗时 - Delta (FTime)&gt;100ms [/h]</p></li></ul><h4 id="cpu"><a class="anchor" href="#cpu">#</a> CPU</h4><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/10.jpg" alt="" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/11.jpg" alt="" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/12.jpg" alt="" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/13.jpg" alt="" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/14.jpg" alt="" /></p><ul><li>未规范化应用 CPU 利用率 - Avg (AppCPU)[%]<br /> 这里未规范化 CPU 利用率的计算方式 = CPU 执行时间 / CPU 总时间。如果使用这一项利用率计算 APP 的性能消耗，会出现在低频运行时和高频运行时 CPU 利用率相同的情况。</li></ul><p>所以 Perfdog 官方建议使用规范化 CPU 利用率。</p><ul><li><p>未规范化应用 CPU 利用率小于等于 50%/70% - AppCPU&lt;=50%[%] AppCPU&lt;=70%[%]</p></li><li><p>未规范化总的 CPU 利用率 - Avg (TotalCPU)[%]</p></li><li><p>未规范化总的 CPU 利用率小于等于 50%/70% - TotalCPU&lt;=50%[%] TotalCPU&lt;=70%[%]</p></li><li><p>CPU 平均温度 - Avg (CTemp)[°C]<br /> 下面一排都是规范化的 CPU 指标，不多赘述</p></li><li><p>CPU 时钟频率 - CPU Clock<br /> 反映的是当前时间 CPU 各个核心的频率</p></li></ul><h3 id="memory"><a class="anchor" href="#memory">#</a> Memory</h3><p>这部分对于性能测试的参考性不是很高。</p><p>这里 Perfdog 提醒：在极限测试情况下，例如开启游戏超高帧率，建议不要勾选收集 Memory Usage 和 Memory Detail，因为部分机型会有性能损耗。</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/15.jpg" alt="" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/16.jpg" alt="" /></p><h3 id="gpu"><a class="anchor" href="#gpu">#</a> GPU</h3><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/17.jpg" alt="" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/18.jpg" alt="" /></p><ul><li><p>平均 GPU 利用率 - Avg (GUsage)[%]<br /> 反映的是应用是否可以充分利用 GPU 性能</p></li><li><p>平均 CPU 时钟频率 - Avg (GClock)[MHz]<br /> 反映的是应用的负载压力</p></li></ul><h3 id="network"><a class="anchor" href="#network">#</a> Network</h3><p>这一部分对于非实时对战游戏参考性不是很高。测试王者荣耀等对网络要求较高的游戏可以进行关注。</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/19.jpg" alt="" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/20.jpg" alt="" /></p><h3 id="battery"><a class="anchor" href="#battery">#</a> Battery</h3><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/21.jpg" alt="" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/22.jpg" alt="" /></p><ul><li><p>平均功耗 - Avg (Power)[mW]<br /> 在一定程度上反映了当前手机的功耗</p></li><li><p>耗电量 - Sum (Battery)[mWh]<br /> 手机在运行测试期间所消耗的电量</p></li><li><p>平均电压 - Avg (Voltage)[mV]</p></li><li><p>平均电流 - Avg (Current)[mA]</p></li></ul><h3 id="energy-usage"><a class="anchor" href="#energy-usage">#</a> Energy Usage</h3><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/23.jpg" alt="" /></p><p>监控应用使用的能耗情况，可以监控 CPU，GPU，网络模块，定位模块等等</p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>对于芯片的性能测试，我认为主要应该关注的数据项目为</p><ul><li><p>平均帧率 - Avg (FPS)<br /> 反映的是设备的游戏运行稳定性，越接近设定的游戏帧率越好。</p></li><li><p>帧率方差 - Var (FPS)<br /> 反映的是设备掉帧的严重程度，越小越好。</p></li><li><p>降帧次数 - Drop (FPS)[/h]<br /> 反映的是设备的掉帧次数（掉帧次数不等于卡顿次数），越少越好。</p></li><li><p>卡顿次数 / 每 10 分钟 - Jank (/10min)<br /> 反映的是人所能感知的小卡顿次数，越少越好。</p></li><li><p>严重卡顿次数 / 每 10 分钟 - BigJank (/10min)<br /> 反映的是人所能感知的严重卡顿次数，越少越好。</p></li><li><p>平均单帧渲染时间 - Avg (FTime)[ms]<br /> 反映的是设备对画面单一帧的渲染平均时间，若某一时刻对画面渲染的时间远远超过平均值，说明此时屏幕内容没有刷新，会觉得明显卡顿，单帧渲染时间越贴近平均值越好。</p></li><li><p>规范化的应用 CPU 利用率 - Avg (AppCPU)[%] Normalized<br /> 反映的是排除其他影响因素后应用对于 CPU 性能的消耗。</p></li><li><p>CPU 平均温度 - Avg (CTemp)[°C]<br /> 反映的是应用长时间运行使 CPU 升高的温度，作为温控降频的参考数据。</p></li><li><p>CPU 时钟频率 - CPU Clock<br /> 反映的是应用运行时 CPU 的调度情况，作为卡顿分析和功耗分析的参考数据。</p></li><li><p>平均 GPU 利用率 - Avg (GUsage)[%]<br /> 反映的是应用对于 GPU 的使用情况。</p></li><li><p>平均 CPU 时钟频率 - Avg (GClock)[MHz]<br /> 反映的是应用运行时 GPU 的调度情况，作为卡顿分析和功耗分析的参考数据。</p></li><li><p>平均功耗 - Avg (Power)[mW]<br /> 反映的是应用运行时的平均功耗，高中低负载在功耗这一测试项目差距较大，例如骁龙 888 在高负载可以跑到 11w 的功耗，在低负载只有 4w，续航和发热因此不同。</p></li></ul><h2 id="云端页面功能介绍"><a class="anchor" href="#云端页面功能介绍">#</a> 云端页面功能介绍</h2><h3 id="用例"><a class="anchor" href="#用例">#</a> 用例</h3><h4 id="我的数据"><a class="anchor" href="#我的数据">#</a> 我的数据</h4><p>存放着测试结束后上传的测试结果，当测试结果较多时可以设置条件筛选数据。</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/24.jpg" alt="" /></p><h4 id="任务数据"><a class="anchor" href="#任务数据">#</a> 任务数据</h4><p>Perfdog 支持创建测试任务，你可以邀请小伙伴一起进行测试，并将数据归档到任务中进行分享。想加入 SGPT 测试计划的朋友可以在酷安私信我，我会发给你邀请链接，同时你可以看到 SGPT 计划的最新进展并且参与进来。</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/25.jpg" alt="" /></p><h3 id="项目"><a class="anchor" href="#项目">#</a> 项目</h3><p>在这里可以针对不同应用数据进行分类显示</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/26.jpg" alt="" /></p><h3 id="具体数据"><a class="anchor" href="#具体数据">#</a> 具体数据</h3><h4 id="图表基本操作数据统计范围修改图标曲线显示"><a class="anchor" href="#图表基本操作数据统计范围修改图标曲线显示">#</a> 图表基本操作（数据统计范围修改，图标曲线显示）</h4><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/27.jpg" alt="" /></p><h4 id="图表拖选操作查看某一时间段的测试数据"><a class="anchor" href="#图表拖选操作查看某一时间段的测试数据">#</a> 图表拖选操作（查看某一时间段的测试数据）</h4><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/28.jpg" alt="" /></p><h4 id="点选查看卡顿具体场景"><a class="anchor" href="#点选查看卡顿具体场景">#</a> 点选查看卡顿具体场景</h4><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/29.jpg" alt="" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/30.jpg" alt="" /></p><h4 id="不同测试范例对比"><a class="anchor" href="#不同测试范例对比">#</a> 不同测试范例对比</h4><h5 id="可以添加5条测试用例"><a class="anchor" href="#可以添加5条测试用例">#</a> 可以添加 5 条测试用例</h5><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/31.jpg" alt="" /></p><h5 id="对比不同的测试用例"><a class="anchor" href="#对比不同的测试用例">#</a> 对比不同的测试用例</h5><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/32.jpg" alt="" /></p><h2 id="写在最后"><a class="anchor" href="#写在最后">#</a> 写在最后</h2><p>今天本来是想要发两篇文章的，顺便开一个能让大家都参与进来的一个企划。先把企划的头图设计放出来吧。</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/PerfDog/SGPT.png" alt="" /></p><p>本篇文章是《应用使用指南》的第二期，我相信大家可以学会 Perfdog 这款游戏性能测试软件的使用方法。我的一个想法是，从这个系列可以引出很多新的，有趣的系列，让大家都可以参与进去。</p><p>如上图所示，从第二期引出了一个 SGPT（Soc Game Performance Test）计划，我希望根据自己的理解设计一个游戏测试标准，来测试不同机型对于游戏性能的调度能力。</p><p>这一个计划如果只有我一个人收集数据，第一是我个人学业的原因，我并不能有太多时间来进行游戏测试；第二是我个人并没有经济能力去购买设备。如果大家都能参与进来，那么收集到数据会越来越多，我们也能在众多测评里获得一份最真实的数据。</p><p>这里我们采用的是 Perfdog 的团队功能，这里把加入的链接放在这里 **<span class="exturl" data-url="aHR0cHM6Ly9wZXJmZG9nLnFxLmNvbS90YXNrZGF0YS8yMDE1OTI="> 上杉九月的团队</span> **。希望大家可以参与进来，后续会加入激励计划，争取给此计划贡献多的朋友一些动力。</p><p>简单介绍结束，说一下目前这个企划遇到的问题。因为我个人平时玩的游戏种类比较少，目前只玩崩坏 3 和原神，这两类游戏都属于高负载的类型。而对于中等负载和低负载的游戏，个人的了解很少，希望各位可以在评论区讨论一下，什么游戏可以被纳入中负载和低负载的测试计划中，谢谢各位！</p><h2 id="各平台更新计划"><a class="anchor" href="#各平台更新计划">#</a> 各平台更新计划</h2><ul><li>个人博客 周六晚八点</li><li>酷安 微信公众号 周日晚八点</li><li>哔哩哔哩 微博 周一晚八点</li></ul><hr /><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt="" /></p>]]></content>
    
    
    <summary type="html">PerfDog已经收费，本教程不再更新</summary>
    
    
    
    <category term="应用使用指南" scheme="https://blog.sakurasep.site/Shoka/categories/HowToUse/"/>
    
    
    <category term="零基础" scheme="https://blog.sakurasep.site/Shoka/tags/%E9%9B%B6%E5%9F%BA%E7%A1%80/"/>
    
    <category term="PC" scheme="https://blog.sakurasep.site/Shoka/tags/PC/"/>
    
    <category term="应用使用指南" scheme="https://blog.sakurasep.site/Shoka/tags/%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>《应用使用指南》存储空间隔离_第1期</title>
    <link href="https://blog.sakurasep.site/Shoka/HowToUse/%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%20-%20%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E9%9A%94%E7%A6%BB/"/>
    <id>https://blog.sakurasep.site/Shoka/HowToUse/%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%20-%20%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E9%9A%94%E7%A6%BB/</id>
    <published>2021-03-13T13:35:26.000Z</published>
    <updated>2022-05-09T15:21:45.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a class="anchor" href="#文章简介">#</a> 文章简介</h1><blockquote><p>作者： 上杉九月</p></blockquote><blockquote><p>头图设计：上杉九月</p></blockquote><blockquote><p>排版及发布：上杉九月</p></blockquote><blockquote><p>感谢提供修改建议:</p><ul><li>酷安 @量子米君</li><li>酷安 @苍玄之包</li></ul></blockquote><h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><h3 id="安卓根目录的混乱现象"><a class="anchor" href="#安卓根目录的混乱现象">#</a> 安卓根目录的混乱现象</h3><p>每一次打开文件管理去寻找你所想要的文件，或是在聊天软件给朋友发送文件，总会看到目录里有着大量莫名奇妙的文件夹。一是不方便找到目标文件所在，二是对于强迫症挺不舒服的。</p><p><strong>优化前的根目录，充斥着各种文件夹</strong></p><p>造成这种现象，主要是国内软件厂商不遵守开发规范导致。根据安卓规范，在  <code>Android/data/包名</code>  路径应该保存对应应用的数据文件， <code>Android/obb/包名</code> 路径应该保存对应应用的数据包文件。这两个文件夹是用户不应该去访问的，因此安卓 11 的新规范禁止系统（仅对于定制 UI）的文件管理直接访问。如果介意（例如 MIUI 的默认文件管理）访问受限，可以安装相应的旧版本。</p><h3 id="安卓11的新限制"><a class="anchor" href="#安卓11的新限制">#</a> 安卓 11 的新限制</h3><p><strong>如图所示，MIUI 的文件管理在一次升级中已经不在允许访问，点击前往查看将会跳转安卓原生的文件管理。</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/1.jpg" alt="" /></p><p>应用应该将自身数据保存在 Android 文件夹内部，将用户数据按照分类保存在标准文件夹，但是国内应用大部分不会遵循开发规范，便造成了安卓根目录混乱的现状。</p><h3 id="某些应用开发者的错误理解"><a class="anchor" href="#某些应用开发者的错误理解">#</a> 某些应用开发者的错误理解</h3><p>很多应用开发者为了适配安卓 11 的要求，做出了很多令人迷惑的行为。这里以腾讯的令人迷惑的操作举例。在 QQ 8.2.8 版本之后，将用户的下载文件位置从根目录更改到了 Android 文件夹内部，同时也是自身的数据文件夹。这让用户去查看自己下载的文件时十分麻烦。而且 QQ 在根目录仍然有着许多未知用途的文件夹。</p><h3 id="标准文件夹的示例miui"><a class="anchor" href="#标准文件夹的示例miui">#</a> 标准文件夹的示例（MIUI）</h3><ul><li>DCIM 保存相机拍摄的照片和视频（MIUI 在该文件夹还存储了截图和屏幕录制）</li><li>Documents 保存文档</li><li>Download 保存下载文件</li><li>Fonts 保存字体文件（MIUI 系统字体文件保存在主题文件夹中）</li><li>Movie 保存视频文件</li><li>Music 保存音频文件</li><li>Pictures 保存图片文件</li><li>等等</li></ul><p>对于不同的定制系统同时也有自己存放关键系统文件的文件夹，例如 MIUI 会在根目录建立一个 MIUI 文件夹，用来存放各种系统软件的缓存文件和数据。</p><h3 id="解决方案"><a class="anchor" href="#解决方案">#</a> 解决方案</h3><ul><li>依靠安卓大版本更新更严格的文件访问策略，强制应用使用更高的 targetAPI。</li><li>依靠定制系统完善文件访问限制功能，感觉最近 Flyme 和 MIUI 的沙盒已经有了雏形了。</li><li>依靠 Rikka 开发的存储空间隔离（原名存储重定向），这也是我写本文的目的。</li></ul><h1 id="正文"><a class="anchor" href="#正文">#</a> 正文</h1><p>这款软件在酷安上即有下载，原名存储重定向，现名存储空间隔离。<br />在使用这款软件之前，你需要接受以下的要求</p><ul><li>手机已经获取了 root 权限</li><li>愿意为这款软件支付一定的费用</li><li>有耐心</li><li>可以接受某些奇奇怪怪的问题</li><li>可以主动寻找问题的解决方法</li></ul><h2 id="第一步-安装必要的环境"><a class="anchor" href="#第一步-安装必要的环境">#</a> 第一步 安装必要的环境</h2><h3 id="本机的使用环境为"><a class="anchor" href="#本机的使用环境为">#</a> 本机的使用环境为</h3><ul><li>小米 10 MIUI12.5 21.2.3 Simplicity 官改</li><li>Magsik 21.4 App 22.0</li></ul><h3 id="模块介绍"><a class="anchor" href="#模块介绍">#</a> 模块介绍</h3><p><strong>在满足 root 的环境下，在 Magsik 模块安装页面，搜索 riru 关键字便可以看到 riru 系列模块</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/2.jpg" alt="" /></p><p><strong>我们这里只安装两个模块</strong></p><p>Riru V23.6</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/4.jpg" alt="" /></p><p>Riru - Enhanced mode for Storage Isolation V23.6</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/3.jpg" alt="" /></p><p>这里提醒一下，如果不安装 Riru，而先去安装 Riru - Enhanced mode for Storage Isolation，将会无法安装。所以请按照顺序安装模块。</p><h2 id="第二步-安装软件并进行基本配置"><a class="anchor" href="#第二步-安装软件并进行基本配置">#</a> 第二步 安装软件并进行基本配置</h2><h3 id="下载途径"><a class="anchor" href="#下载途径">#</a> 下载途径</h3><h4 id="在酷安搜索存储空间隔离并下载"><a class="anchor" href="#在酷安搜索存储空间隔离并下载">#</a> 在酷安搜索存储空间隔离并下载</h4><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/6_02.jpg" alt="" /></p><h4 id="在google-play搜索存储空间隔离并下载"><a class="anchor" href="#在google-play搜索存储空间隔离并下载">#</a> 在 Google Play 搜索存储空间隔离并下载</h4><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/6.jpg" alt="" /></p><p>这里我推荐从 Google Play 下载，在 Play 商店购买的该软件，使用同一个谷歌账号可以多设备使用。</p><p>目前软件的内购验证做的很完善，如果你是在 Google Play 下载，无需登录外网，直接点击恢复购买即可。</p><h3 id="安装过程"><a class="anchor" href="#安装过程">#</a> 安装过程</h3><p><strong>下载完成后打开软件，便显示了软件的基本介绍</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/8.jpg" alt="" /></p><p><strong>允许存储空间隔离获取 Root 权限，当出现提示成功时便可以进行下一步了。</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/9.jpg" alt="" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/10.jpg" alt="" /></p><p>如果出现问题，请按照以上步骤重新安装环境。</p><p>不过有的机型的确是有兼容问题。</p><p><strong>到这一步，就已经安装完成了</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/11.jpg" alt="" /></p><h3 id="备份文件"><a class="anchor" href="#备份文件">#</a> 备份文件</h3><p>在这里，我会提供一份自己使用，基本没有错误的配置文件，你只需要在备份与还原里还原备份文件即可开始使用。</p><blockquote><p><strong><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5zYWt1cmFzZXAuY2x1Yi9zL3dSY3E=">备份文件_密码 0314</span></strong></p></blockquote><p>注意：</p><ul><li>本配置文件的应用可能无法包含你所使用的应用，如果你想达到近乎完美的效果，请继续看下去。</li><li>本配置文件有的地方会有一些问题，你需要自行修改。已知 QQ 存在侧漏问题。</li></ul><h2 id="第三步-原理解释以及详细配置"><a class="anchor" href="#第三步-原理解释以及详细配置">#</a> 第三步 原理解释以及详细配置</h2><h3 id="原理"><a class="anchor" href="#原理">#</a> 原理</h3><p>在存储空间隔离的官网，我们可以找到一些我们所需要的内容</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9zci5yaWtrYS5hcHAvemgtaGFucy8=">官方网站</span></p></blockquote><p>以下内容是对官网指南的部分摘录以及我自己的理解</p><ul><li>公共文件夹</li></ul><p>DCIM,Pictures,Download 等公共文件夹，用来保存用户的文件，允许应用在此根据需求新建文件夹来保存对应的文件。例如 QQ 应该将用户下载的文件保存在  <code>Download/QQ</code> ，而不是 <code>Android/data/包名</code> 。</p><p>但是应用对于公共文件夹的访问应该是一次性的，有目的的。例如在 QQ 发送图片给好友，QQ 在获取用户的允许后访问 DCIM 和 Pictures 文件夹，发送结束后系统应该收回访问权限。</p><ul><li>数据文件夹</li></ul><p>Android 文件夹内部对于用户来说是不应该进行访问的，对于应用来说则是无需授权就能够访问，在此保存应用的数据和缓存。</p><p>遗憾的是，目前原生安卓对于存储权限的选项只有允许和拒绝，此外，国内存在的大量 “坏应用” 如果被拒绝授权将不会运行。</p><p>存储空间隔离便是为了解决这一乱象而开发，这里感谢 Rikka 大佬开发了这款应用，在一定程度上很好解决了以上问题。</p><p>一般来说，不规范的应用会在根目录创建各种各样的文件夹。在启用存储空间隔离之后，应用将会在 <code>Android/data/包名/sdcard</code>  内保存文件。</p><p>优点如下</p><ul><li>因为卸载应用时只会清理应用的数据文件夹，在对应用进行隔离后，卸载时将会将下载文件和应用数据一并删除</li><li>系统统计应用占用空间大小仅会统计数据文件夹，在对应用进行隔离后，系统统计大小功能将会正常工作</li></ul><h3 id="使用教程"><a class="anchor" href="#使用教程">#</a> 使用教程</h3><h4 id="软件权限"><a class="anchor" href="#软件权限">#</a> 软件权限</h4><p>对于 MIUI 用户，因为 MIUI 魔改了很多对于应用的控制权限，这里需要手动为存储空间隔离打开部分权限</p><ul><li>在后台弹出界面</li></ul><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/12.jpg" alt="" /></p><ul><li>应用自启动以及省电策略</li></ul><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/13.jpg" alt="" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/14.jpg" alt="" /></p><h4 id="默认存储空间位置"><a class="anchor" href="#默认存储空间位置">#</a> 默认存储空间位置</h4><p><strong>在软件的设置 - 行为 - 默认隔离存储空间位置中，你有两种选择</strong></p><ul><li>保存在数据文件夹</li><li>保存在缓存文件夹</li><li></li></ul><p>缓存文件夹有着和数据文件夹一样的特性，但是缓存文件夹可能被清理软件所清理。这里根据自己的需求吧。一般来说保存在数据文件夹即可。</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/15.jpg" alt="" /></p><h4 id="可访问文件夹模板"><a class="anchor" href="#可访问文件夹模板">#</a> 可访问文件夹模板</h4><p>然后回到上一级，在可访问文件夹模板中进行设置<br />在这里所设置的文件夹就是允许应用访问的公共文件夹</p><p><strong>我在默认的基础上添加了对于 Movie 文件夹的访问</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/16.jpg" alt="" /></p><p>现在回到主页面，点击应用管理，就可以对应用进行单独设置</p><p><strong>为了避免重定向系统应用带来各种各样的 bug，我们先对第三方应用进行配置</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/17.jpg" alt="" /></p><h3 id="根据需求配置"><a class="anchor" href="#根据需求配置">#</a> 根据需求配置</h3><p>白描是一款特别好用的 OCR 识别和 PDF 导出应用，这里我们拿它来讲解如何对一款应用重定向。</p><h4 id="需求考虑"><a class="anchor" href="#需求考虑">#</a> 需求考虑</h4><p>我们应该考虑，这款应用会获取什么信息，因为我常常用它将图片转成 PDF 格式，所以 DCIM（拍摄的图片）和 Pictures（下载的图片）是可访问的文件夹。所以说我们对白描设置可访问文件夹为 DCIM 和 Pictures。</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/18.jpg" alt="" /></p><h4 id="模拟正常使用过程"><a class="anchor" href="#模拟正常使用过程">#</a> 模拟正常使用过程</h4><p>使用白描正常导出一次 PDF，在查看文件历史里可以看到 PDF 保存在 Download/Baimiao 中。因为我希望保存在 Document / 白描，所以我们打开白描的 Download 访问权限（刚才是白描试图访问 Download，但是被定向到了数据文件夹内部的 Download），重新保存一次 PDF，这时白描就会创建此文件夹。</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/19.jpg" alt="" /></p><h4 id="将隔离的文件同步到标准文件夹"><a class="anchor" href="#将隔离的文件同步到标准文件夹">#</a> 将隔离的文件同步到标准文件夹</h4><p>在导出被隔离的文件中添加同步文件夹规则，来源路径选择 Download（新版存储空间隔离导出时会将该应用在目录内的全部文件进行同步）</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/20.jpg" alt="" /></p><h4 id="4检查结果"><a class="anchor" href="#4检查结果">#</a> 4. 检查结果</h4><p>可以看到 PDF 文件成功保存到指定位置</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/21.jpg" alt="" /></p><p>这里很多使用者都会有一个误区 - 既然我要把文件保存到 Documents 目录，那么为什么不把 Documents 设置为可访问的文件夹呢？其实很好解释，你把可访问的文件夹当做读取权限，把导出被隔离的文件当作写入权限，这样就明白了吧。</p><p>但是有些应用是很规范的，他们保存在标准文件夹，所以你应该允许该应用访问。</p><h3 id="应用之间互相访问"><a class="anchor" href="#应用之间互相访问">#</a> 应用之间互相访问</h3><p>用过存储重定向的老用户都应该遇到过哔哩哔哩的视频分享到 QQ，会出现系统繁忙的提示，就算偶尔可能分享成功，视频的封面也不见了。</p><p>这是因为哔哩哔哩老版本在根目录的 tv.danmuku.bili 存放自己的图片缓存，而对哔哩哔哩和 QQ 进行隔离后，QQ 是访问不到这个文件夹的，就造成了分享失败的问题。</p><p><s>目前这个问题貌似得到了解决，哔哩哔哩在某一个版本对缓存文件的位置做了更改，移动到了数据文件夹，这是一个可能的原因。此外还可能因为哔哩哔哩的分享在 QQ 上被改为了小程序分享，分享短链接包含了封面地址，所以分享成功进行。</s></p><p><s>因为目前我并没有遇到该问题，所以希望各位可以在评论区反馈你们的使用情况，我会抽时间测试一下对应的软件版本。</s></p><p>好了，最近遇到了这一问题。同时也讲一下解决方案。同类问题都可以按照此思路解决。</p><p>哔哩哔哩的视频想要分享到 QQ（空间，联系人等），QQ 需要读取哔哩哔哩的封面缓存信息，而因为存储重定向的缘故，QQ 无法对你允许访问文件夹之外的内容进行读取和写入操作，这就导致了分享的失败。所以为了解决这一问题，首先通过文件历史找到正常情况下哔哩哔哩的缓存保存位置。最新版缓存保存位置在  <code>Android/data/tv.danmaku.bili/files/Images</code>  。然后在 QQ 可访问的文件夹，在其他应用的文件夹中创建新的规则。</p><p><strong>如下图所示。</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/22.jpg" alt="" /></p><h3 id="最终的清理"><a class="anchor" href="#最终的清理">#</a> 最终的清理</h3><p>按照以上的例子，对用户应用一一设置。设置完成之后，删除除了标准文件夹的所有冗余文件，正常使用一段时间，你会发现根目录仍然会有一些文件夹，这时候就需要精准定位。</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/23.jpg" alt="" /></p><p>如上图所示，比如说我们想知道 <code>com.miui.voiceassist</code>  (其实很明显，是小爱同学，但请假装不知道) 是由哪一个应用创建。</p><p><strong>我们将文件夹名复制，在文件监视中粘贴。</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/24.jpg" alt="" /></p><p>然后就会显示有那些应用对该文件夹进行读取或者是写入。</p><p>不过我们要清楚读取和写入的区别，比如说这里显示了媒体存储设备对该文件夹的访问，而我们了解一点相关内容便可以知道个该软件是在扫描各个文件夹来查找媒体文件，并没有进行写入，所以文件夹不是由它创建。</p><p><strong>向下拉便可以找到小爱同学的文件访问记录。</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/25.jpg" alt="" /></p><p><strong>现在点击小爱同学，对其进行隔离。</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/26.jpg" alt="" /></p><h3 id="或许会更完美"><a class="anchor" href="#或许会更完美">#</a> 或许会更完美</h3><h4 id="解决某些文件无法读取媒体文件的问题"><a class="anchor" href="#解决某些文件无法读取媒体文件的问题">#</a> 解决某些文件无法读取媒体文件的问题</h4><p>在安卓 11 使用存储空间隔离会导致导出的媒体文件不在软件显示的问题。实际举例（QQ 发送图片无法获取导出的媒体文件）。</p><p><strong><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29vbGFway5jb20vZmVlZC8yNDMxMDM5NT9zaGFyZUtleT1ORFZsWkRaa1lqVXpOREJtTmpBMFkySTJObVV+JmFtcDtzaGFyZVVpZD0zMzM0OTU3JmFtcDtzaGFyZUZyb209Y29tLmNvb2xhcGsubWFya2V0XzExLjAuMw==">酷安 @余空_Yuk</span></strong></p><p>开发的给安卓 11 启用 sdcardfs 的模块可以解决这一问题。</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/27.jpg" alt="" /></p><h4 id="2-解决下载文件被某些应用存储在android目录的问题"><a class="anchor" href="#2-解决下载文件被某些应用存储在android目录的问题">#</a> 2. 解决下载文件被某些应用存储在 Android 目录的问题</h4><p>QQ 这类将用户下载的文件保存在数据文件夹的应用</p><p>**<span class="exturl" data-url="aHR0cHM6Ly93d3cuY29vbGFway5jb20vZmVlZC8yNDY1NDk3OD9zaGFyZUtleT1Nekl4TTJNMFpEY3hZbUUyTmpBMFkySTNNelV+JmFtcDtzaGFyZVVpZD0zMzM0OTU3JmFtcDtzaGFyZUZyb209Y29tLmNvb2xhcGsubWFya2V0XzExLjAuMw=="> 酷安 @阿巴酱</span> ** 给出了一种解决方案。</p><p>我采用的是 Rikka 开发的另一款应用 - 保存副本</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/28.jpg" alt="" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/29.jpg" alt="" /></p><p><strong>当你在 QQ 下载文件之后，只需要在打开方式里选择保存副本，软件就可以在 Download 目录复制一份相同的文件。</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/30.jpg" alt="" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/31.jpg" alt="" /></p><h2 id="第四步-效果展示"><a class="anchor" href="#第四步-效果展示">#</a> 第四步 效果展示</h2><p>这里我自己把 Malody 的谱面文件存在了 Map 文件夹。</p><p>miad 这一个空文件是为了防止 MIUI 的应用开屏广告产生（直接卸载掉智能服务 <code>com.miui.systemAdSolution</code>  即可。可以使用搞机助手进行卸载。一直用官改，不知道 MIUI 将广告服务集成在此应用里，感谢<strong>酷安 @水水水淼</strong>的建议）</p><p>mm 是 Magsik 的 MM 管理器</p><p><strong>如果和文章开头对比一下，可以说是强迫症狂喜。</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/RedirectStorage/32.jpg" alt="" /></p><h1 id="写在最后"><a class="anchor" href="#写在最后">#</a> 写在最后</h1><p>简单说一些东西吧</p><h2 id="个人情况"><a class="anchor" href="#个人情况">#</a> 个人情况</h2><p>我在寒假里策划了很多内容，从这一篇文章开始，我会逐渐向给各位展示我策划的优质内容。</p><h2 id="新的开始"><a class="anchor" href="#新的开始">#</a> 新的开始</h2><p>这算是一个新坑，目的就是向各位推荐一些优质的应用，他们真的可以方便你的生活。目前我的更新频率（如果没有什么意外的话基本就是一个月更新两次，一次是安卓上的应用，一次是 PC 上的应用），毕竟我刚进入大学，自己安排了很多学习的内容，时间并不是很充裕，保证质量是第一位（还有要填坑）。</p><h2 id="欢迎交流"><a class="anchor" href="#欢迎交流">#</a> 欢迎交流</h2><p>这些应用对于各位来说有的可能没用过，有的可能早就熟练上手。我希望我写的图文可以帮助小白零基础上手优质应用，从而提高效率。同时期待和各路大佬交流使用心得，不断完善文章内容和呈现形式。</p><p>在这里我也会虚心听取意见，无论是对图文内容的建议，或是对某些优质应用的推荐等等。</p><h1 id="多平台发布"><a class="anchor" href="#多平台发布">#</a> 多平台发布</h1><p>周六晚八点：</p><ul><li><a href="https://blog.sakurasep.site/">个人博客</a></li></ul><p>周日晚八点：</p><ul><li>Bilibili 专栏：上杉九月</li><li>微信公众号：上杉九月的知识屋</li><li>Weibo：上杉九月</li><li>酷安：上杉九月</li></ul><hr /><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt="" /></p>]]></content>
    
    
    <summary type="html">安卓系统的根目录，本不应该如此混乱。</summary>
    
    
    
    <category term="应用使用指南" scheme="https://blog.sakurasep.site/Shoka/categories/HowToUse/"/>
    
    
    <category term="零基础" scheme="https://blog.sakurasep.site/Shoka/tags/%E9%9B%B6%E5%9F%BA%E7%A1%80/"/>
    
    <category term="应用使用指南" scheme="https://blog.sakurasep.site/Shoka/tags/%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    
    <category term="安卓" scheme="https://blog.sakurasep.site/Shoka/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>《零基础教程》云服务器实现定时签到_第1期</title>
    <link href="https://blog.sakurasep.site/Shoka/HowToDo/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%20-%20%E6%99%BA%E6%85%A7%E6%9B%B2%E5%9B%AD%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1%E4%BA%91%E7%AB%AF/"/>
    <id>https://blog.sakurasep.site/Shoka/HowToDo/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%20-%20%E6%99%BA%E6%85%A7%E6%9B%B2%E5%9B%AD%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1%E4%BA%91%E7%AB%AF/</id>
    <published>2021-01-20T13:27:35.000Z</published>
    <updated>2022-05-09T15:22:52.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章简介"><a class="anchor" href="#文章简介">#</a> 文章简介</h2><blockquote><p>作者：上杉九月</p><p>排版及发布：上杉九月</p><p>项目原作者：Polo</p><p><strong>本篇教程在腾讯云会出现问题，请等待更新！</strong></p></blockquote><h2 id="前言"><a class="anchor" href="#前言">#</a> 前言</h2><p>每日健康提交？要不是不交，要不是随便填。</p><p>意义何在？</p><h2 id="正文"><a class="anchor" href="#正文">#</a> 正文</h2><blockquote><p>原贴:<span class="exturl" data-url="aHR0cHM6Ly9wb2xvc2VjLmdpdGh1Yi5pby8yMDIxLzAxLzE5L3NlcnZlciVFOSU4NSVCMSVFNSVBRSU5RSVFNyU4RSVCMCVFNyVBRCVCRSVFNSU4OCVCMCVFNiU4RiU5MCVFOSU4NiU5Mi8=">Polo's Blog 智慧曲园自动签到 + 微信推送</span></p></blockquote><blockquote><p>github 项目地址:<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbG9zZWMvcWZudUF1dG9UZW1wZXJhdHVyZVN1Ym1pdA==">qfnuAutoTemperatureSubmit</span></p></blockquote><h3 id="1需要准备"><a class="anchor" href="#1需要准备">#</a> 1. 需要准备</h3><ul><li>云服务器（使用宝塔面板）</li><li>配置好的 python 脚本 或者 项目原脚本</li></ul><h3 id="2开始配置"><a class="anchor" href="#2开始配置">#</a> 2. 开始配置</h3><p>在宝塔面板的文件管理中新建文件夹用来存放项目的脚本文件。</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Qfnu/1.jpg" alt="" /></p><h4 id="方案一对python脚本进行单独配置"><a class="anchor" href="#方案一对python脚本进行单独配置">#</a> 方案一：对 python 脚本进行单独配置</h4><p>如图所示是我们宿舍四人的 python 脚本</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Qfnu/2.jpg" alt="" /></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Qfnu/3.jpg" alt="" /></p><p>所以此时的脚本执行命令为</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>python3 <span class="token operator">/</span>www<span class="token operator">/</span>wwwroot<span class="token operator">/</span>qfnuAutoTemperatureSubmit<span class="token operator">/</span>xxx<span class="token punctuation">.</span>py</pre></td></tr></table></figure><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Qfnu/4.jpg" alt="" /></p><h4 id="方案二使用原python文件"><a class="anchor" href="#方案二使用原python文件">#</a> 方案二：使用原 python 文件</h4><p>直接将 demo1.py 放在文件夹内<br />此时命令变为</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>python3 <span class="token operator">/</span>www<span class="token operator">/</span>wwwroot<span class="token operator">/</span>qfnuAutoTemperatureSubmit<span class="token operator">/</span>demo1<span class="token punctuation">.</span>py 学号 密码</pre></td></tr></table></figure><h3 id="3注意事项"><a class="anchor" href="#3注意事项">#</a> 3. 注意事项</h3><p>执行 python 脚本报错的话</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Qfnu/5.png" alt="" /></p><hr /><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt="" /></p>]]></content>
    
    
    <summary type="html">每天签到就是笑话，谁不是敷衍了事</summary>
    
    
    
    <category term="零基础教程" scheme="https://blog.sakurasep.site/Shoka/categories/HowToDo/"/>
    
    
    <category term="零基础" scheme="https://blog.sakurasep.site/Shoka/tags/%E9%9B%B6%E5%9F%BA%E7%A1%80/"/>
    
    <category term="云服务器" scheme="https://blog.sakurasep.site/Shoka/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="Python" scheme="https://blog.sakurasep.site/Shoka/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>我的2020年度总结</title>
    <link href="https://blog.sakurasep.site/Shoka/Year/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%20-%202020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.sakurasep.site/Shoka/Year/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%20-%202020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2021-01-19T13:52:06.000Z</published>
    <updated>2022-05-09T15:25:26.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a class="anchor" href="#文章简介">#</a> 文章简介</h1><blockquote><p>作者：上杉九月</p><p>排版与发布：上杉九月</p></blockquote><h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>咕咕咕了好久的 2020 年度总结终于来啦！</p><p>～～才不是因为我懒～～</p><p>本文中所有内容截止于 2021.1.1 日</p><p>未来，一定更精彩！</p><h1 id="正文"><a class="anchor" href="#正文">#</a> 正文</h1><h2 id="第一阶段-高三下学期-高考"><a class="anchor" href="#第一阶段-高三下学期-高考">#</a> 第一阶段 高三下学期 -- 高考</h2><p>紧张的学习生活，每天基本都是两点一线的路线。</p><p>枯燥的学习生活，在最后的高考 100 天尤为如此，从周考到天天做不完的卷子。</p><p>温暖的学习生活，在向着理想的大学奋斗的路上，感谢每一位同学的陪伴，感谢老班的悉心辅导，感谢每一位老师的辛苦付出，满满的回忆。</p><p>终究有一个好结果。</p><p>下一个人生阶段，在曲师大度过。</p><h2 id="第二阶段-暑假"><a class="anchor" href="#第二阶段-暑假">#</a> 第二阶段 暑假</h2><p>放下了高三的压力，暑假便成为了我尽情发挥的舞台。</p><h3 id="1-第一台自己组装的主机"><a class="anchor" href="#1-第一台自己组装的主机">#</a> 1. 第一台自己组装的主机</h3><p>个人算是一个果粉吧。于是在进行配件选购的时候，并没有选择热门的 AMD + N 卡的组合，而是为了方便黑苹果的安装，选择了 Intel + A 卡的组合。</p><p>配置如下</p><pre><code>CPU：Intel i5-9600K GPU：AMD RX5700 XT内存：Kingston 骇客神条 3200MHz 8G x 2固态：Western Digital SN750 500GB x 2机械：TOSHIBA P300 3T主板：MSI Z390 Gaming Puls电源：Segotep 600W散热：玄冰400机箱：SAHARA 逆行者606显示器：AOC 23.8英寸 24G2 1080P144无线网卡：BCM943602CS</code></pre><p>总体感觉还行吧，组装完成之后做了一个用 OC 引导的 win10 和 macOS 的双系统，这台电脑便是我暑假的主力机器。</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/1.png" alt="about_me" /></p><p>关于 macOS Catalina 10.15.6 的 EFI 文件，我是参考<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnhqbjgxOS5jb20="> Xjn´s Blog</span> 进行自己配置和调试，截止到文章书写的 2021.1.18 日，一切运行正常</p><p>关于 macOS 与其他苹果设备的联动，我个人用的是 iPad mini2 (网课专用板)。为了当前稳定的 Wi-Fi 链接和蓝牙功能 (最初我是用的是 USB 网卡，不稳定，需要驱动支持)，我入手了 BCM943602CS 这一款 PCIE 网卡。</p><p>从同学那里借来 iPad Pro 2020 做了一下测试，随航，接力，隔空投送都很完美。</p><blockquote><p>macOS 镜像下载：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmRhbGlhbnNreS5uZXQ=">黑果小兵的部落阁</span></p></blockquote><blockquote><p>本机 EFI 下载：<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5zYWt1cmFzZXAuY2x1Yi9zL09YRlI=">Cloudreve 密码：1234</span></p></blockquote><p>这里建议对于 macOS 或是苹果全家桶生态有着需求的，不要考虑黑苹果主机，黑苹果在稳定性和方便程度都不如白苹果，而且，M1 的 MacBook 好香！</p><h3 id="2-第一台个人笔记本"><a class="anchor" href="#2-第一台个人笔记本">#</a> 2. 第一台个人笔记本</h3><p>去上大学，当然不可以搬着一个 MATX 机箱去。<br />所以入手了一台 R7000P (首发价格)</p><blockquote><p>用了两年，看到当年的我说 AMD YES，我真想穿越回去，告诉当年的我，Intel YES。</p></blockquote><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/2.png" alt="about_me" /></p><p>桌面如图</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/3.jpg" alt="about_me" /></p><p>用了仿 macOS 的软件，还不错，基本的动画实现了，UI 设计也挺不错的，但是经常出现崩溃。</p><p>正版 macOS</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/4.png" alt="about_me" /></p><p>因为大学是软件工程专业，笔记本上搭建了 python2，，python3，java，c 等众多环境</p><h3 id="3-小米9-小米10"><a class="anchor" href="#3-小米9-小米10">#</a> 3. 小米 9 -- 小米 10</h3><blockquote><p>2022 年了 865 还是顶，4750 的电池还是比较大，90Hz 的屏幕还是舒服，完全没有换手机的欲望。而且手机对我个人来说就是休闲小游戏加联系工具，下一次换手机估计换个 Redmi Note 了。</p></blockquote><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/6.jpg" alt="about_me" /></p><h3 id="4-sony-zv-1"><a class="anchor" href="#4-sony-zv-1">#</a> 4. Sony ZV-1</h3><blockquote><p>2022 年了，还在吃灰。。。。</p></blockquote><h2 id="第三阶段-初步迈入大学生活"><a class="anchor" href="#第三阶段-初步迈入大学生活">#</a> 第三阶段 初步迈入大学生活</h2><h3 id="1-chevereto图片站"><a class="anchor" href="#1-chevereto图片站">#</a> 1. Chevereto 图片站</h3><p>通过自己搭建图床，学到了不少关于云服务器的知识 (之前搭建 Wordpress 博客接触过)。</p><blockquote><h4 id="demo上杉九月的图片站"><a class="anchor" href="#demo上杉九月的图片站">#</a> Demo：<span class="exturl" data-url="aHR0cHM6Ly9waWMuc2FrdXJhc2VwLnRvcC8=">上杉九月的图片站</span></h4></blockquote><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/7.png" alt="about_me" /></p><p>搭建教程已经出了</p><blockquote><h4 id="搭建教程博客原文"><a class="anchor" href="#搭建教程博客原文">#</a> 搭建教程：<a href="">博客原文</a></h4></blockquote><h3 id="2-hexo"><a class="anchor" href="#2-hexo">#</a> 2. Hexo</h3><blockquote><h4 id="上杉九月的博客"><a class="anchor" href="#上杉九月的博客">#</a> <a href="https://blog.sakurasep.site/">上杉九月的博客</a></h4></blockquote><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/8.png" alt="about_me" /></p><blockquote><h4 id="九月的生活"><a class="anchor" href="#九月的生活">#</a> <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnNha3VyYXNlcC5jbHViLw==">九月的生活</span></h4></blockquote><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/My2020/9.png" alt="about_me" /></p><h3 id="3-云服务器"><a class="anchor" href="#3-云服务器">#</a> 3. 云服务器</h3><p>云服务器定时执行 python 脚本</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvbG9zZWMvcWZudUF1dG9UZW1wZXJhdHVyZVN1Ym1pdA==">python 脚本原地址</span></p></blockquote><h3 id="4-初接触ctf"><a class="anchor" href="#4-初接触ctf">#</a> 4. 初接触 CTF</h3><p>想作为一个兴趣爱好，寒假继续学习。</p><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><p>2020 年经历了人生大考，虽然有很多波折，但也是顺利的度过了。</p><p>在 2020 年我个人多是在实践应用投入了精力，2021 年我将会在原理以及应用的代码实现付出。</p><p>目标就是有事情做，写写教程，平平安安就是理想啦。</p><p>2020 年真的是魔幻的一年，疫情迅速席卷全球，中国顶着巨大压力成功遏制，没想到（应该是意料之中），自由的西方资本主义国家没能遏制疫情传播，天灾人祸，诸如此类。</p><p>2021 年一定会好起来的，提前在这祝福各位新年快乐，事事顺利，一切安好。</p><hr /><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt="" /></p>]]></content>
    
    
    <summary type="html">回顾一下我的2020</summary>
    
    
    
    <category term="年度总结" scheme="https://blog.sakurasep.site/Shoka/categories/Year/"/>
    
    
    <category term="年度总结" scheme="https://blog.sakurasep.site/Shoka/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>《零基础教程》Chevereto-年轻人的第一个私人图床_第2期</title>
    <link href="https://blog.sakurasep.site/Shoka/HowToDo/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%20-%20Chevereto%E5%9B%BE%E5%BA%8A/"/>
    <id>https://blog.sakurasep.site/Shoka/HowToDo/%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%20-%20Chevereto%E5%9B%BE%E5%BA%8A/</id>
    <published>2020-12-25T12:20:23.000Z</published>
    <updated>2022-05-09T15:22:44.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a class="anchor" href="#文章简介">#</a> 文章简介</h1><blockquote><p>作者：上杉九月</p></blockquote><blockquote><p>排版：上杉九月</p></blockquote><blockquote><p>封面设计：苍玄之包</p></blockquote><h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p><strong>前几天用 hexo 搭建博客首页的时候，想给网站来一张高清的壁纸。然后用 picgo 把一张比较大的图片上传到 gitee。</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/1.png" alt="chevereto" /></p><p><strong>这时出现了第一个问题，picgo 不显示该图片的缩略图</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/2.png" alt="chevereto" /></p><p><strong>本来以为是 picgo 的 bug（beta3 版本），便用手机上的图床软件上传</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/3.png" alt="chevereto" /></p><p>显示上传成功，打开 gitee 的仓库也可以正常访问</p><p>在感到很疑惑的同时，我将该图片的 URL 发到了群里，让朋友看看能不能访问</p><p><strong>然后我收到了朋友的截图</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/4.png" alt="chevereto" /></p><p>gitee 图床大于 1M 以上的图片必须登录访问</p><p>也就是说把大于 1M 的图片 URL 引用到博客，其实并不会跳转显示图片</p><p><strong>这时候我在图床 APP 的其他图床中看到了一段对于 chevereto 图床的描述</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/5.png" alt="chevereto" /></p><p>粗略的看了一下教程，实现效果还不错。</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9waWMuc2FrdXJhc2VwLnRvcC8=">上杉九月的图片站</span></p></blockquote><h1 id="正文"><a class="anchor" href="#正文">#</a> 正文</h1><h2 id="方案总结"><a class="anchor" href="#方案总结">#</a> 方案总结</h2><ul><li>方案一：神枫云 + FTP 外部存储</li><li>方案二：域名 + 轻量应用服务器</li><li>方案三：备案域名 + ECS 服务器</li></ul><p>我个人最推荐方案二</p><p>我个人是在腾讯云购买了一个轻量应用服务器，地区中国香港，这样就免去了备案的繁琐</p><p>阿里云的服务器不知道为啥访问比较慢，买了之后就退款了</p><p>建议买腾讯云，价格是相同的<strong> 34RMB 一个月</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/6.png" alt="chevereto" /></p><p>当然我之前介绍的神枫云也可以，而且可以省去配置宝塔面板的步骤</p><h2 id="基本安装"><a class="anchor" href="#基本安装">#</a> 基本安装</h2><h3 id="方案一神枫云-ftp外部存储"><a class="anchor" href="#方案一神枫云-ftp外部存储">#</a> 方案一：神枫云 + FTP 外部存储</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2Z4eXVuLmNuLw==">神枫云首页</span>注册账号，充值，购买主机。</p><p>建议购买这个 3RMB / 月的服务器</p><p>相比于 1RMB / 月的，月流量变为无限是很重要的</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/7.png" alt="chevereto" /></p><p><strong>稍微配置一下，进入主机的管理界面，进入在线文件管理</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/8.png" alt="chevereto" /></p><p><strong>上传 chevereto 底包到根目录</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/9.png" alt="chevereto" /></p><p>这里 chevereto 有免费版和付费版，我们使用付费版来进行搭建，因为付费版才可以使用外部存储，神枫云只提供了 300M 的数据库，存不了几张图片</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5zYWt1cmFzZXAuY2x1Yi9zL005c1I=">chevereto 免费版 - Cloudreve - 密码 2333</span><br /><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5zYWt1cmFzZXAuY2x1Yi9zL1p5SUU=">chevereto 收费版 - Cloudreve - 密码 2333</span></p></blockquote><p>然后解压底包到 wwwroot 文件夹</p><p><strong>此时 wwwroot 文件夹内应该是下图所示的目录结构</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/16.png" alt="chevereto" /></p><p><strong>解压完成之后，进入域名绑定选项，这里有一个赠送的域名</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/13.png" alt="chevereto" /></p><p>访问该域名进入安装进程，只修改三项</p><p><strong>如果忘记了可以在面板首页 - 虚拟主机信息找到</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/13.png" alt="chevereto" /></p><p><strong>然后是注册管理员的界面</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/25.png" alt="chevereto" /></p><p><strong>顺利安装完成</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/26.png" alt="chevereto" /></p><p><strong>如果一切顺利的话现在网站已经跳转到了 chevereto 图床的首页</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/17.png" alt="chevereto" /></p><p>点击右上角的登录，把刚刚注册的管理员账号输入进去，然后进入仪表盘，到这里整个安装过程基本结束了。</p><p>不过因为神枫云的数据库空间很小，只有 300M，根本存不了几张图片，所以下文的外部存储功能便十分重要。</p><h3 id="方案二域名-腾讯云轻量服务器"><a class="anchor" href="#方案二域名-腾讯云轻量服务器">#</a> 方案二：域名 + 腾讯云轻量服务器</h3><p><strong>首先去腾讯云购买一个轻量应用服务器，并且选择香港地区来免去备案，镜像选择宝塔面板</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/10.png" alt="chevereto" /></p><p><strong>然后来到服务器的控制台，在防火墙里添加 8888 端口来允许宝塔面板的访问</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/11.png" alt="chevereto" /></p><p><strong>在应用管理里面可以获取默认宝塔面板的登录密码</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/12.png" alt="chevereto" /></p><p><strong>后期记得修改宝塔面板的登录端口以及默认用户名和密码</strong></p><p><strong>登录实例，可以选择网页直接登录，上图右下角，先复制命令，然后点击登录</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/17.png" alt="chevereto" /></p><p>进入宝塔面板，在软件商店里安装（仅搭建图床）</p><ul><li>Nginx 1.16</li><li>php 7.3</li><li>MySQL 5.6</li><li>phpMyadmin 4.9</li></ul><p><strong>软件列表如下</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/27.jpg" alt="chevereto" /></p><p>然后在侧边栏找到网站，添加站点</p><p><strong>填入你购买的域名，创建数据库</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/19.png" alt="chevereto" /></p><p><strong>然后在站点的设置里添加伪静态代码（如果是现在修改了代码，等会复制的时候不需要复制 <code>.htaccess</code> )</strong></p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre>location / &#123;</pre></td></tr><tr><td data-num="2"></td><td><pre>    index index.php;</pre></td></tr><tr><td data-num="3"></td><td><pre>    try_files $uri $uri/ /index.php?$query_string;</pre></td></tr><tr><td data-num="4"></td><td><pre>&#125;</pre></td></tr></table></figure><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/20.png" alt="chevereto" /></p><p><strong>然后在你申请域名的服务商添加 DNS 解析</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/21.png" alt="chevereto" /></p><blockquote><p>主机记录 @ 记录类型 A 解析线路默认 记录值是 IP 地址 TTL 10 分钟</p></blockquote><p>稍微等上一段时间，就可以用域名访问你的 chevereto 图床进行安装了</p><p>安装过程同神枫云的安装过程</p><p><strong>如果你使用的是这种方式，那么一般来说数据库就有了一定的存储空间，例如我个人使用的就有约 45G 的数据空间</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/22.png" alt="chevereto" /></p><p>这样的话存一些个人的图片还是没有问题的</p><h3 id="方案三备案域名-阿里云ecs服务器"><a class="anchor" href="#方案三备案域名-阿里云ecs服务器">#</a> 方案三：备案域名 + 阿里云 ECS 服务器</h3><p>这里 ECS 服务器我购买的是学生优惠版本</p><p><span class="exturl" data-url="aHR0cHM6Ly9kYXNoaS5hbGl5dW4uY29tL3NpdGUvYnV5L2FjdGl2aXR5">购买地址</span></p><p><strong>这里虽然显示最少购买 6 个月，其实可以在调整配置的时候可以买一个月先试试</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/33.jpg" alt="chevereto" /></p><p>我这里因为已经购买了一次，限购一台，所以价格是 121RMB</p><p><strong>这里仅需要修改购买时长，操作系统等会去更换</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/34.jpg" alt="chevereto" /></p><p>购买完成后去阿里云 ECS 控制台，将实例停止运行以更换操作系统和购买云盘容量</p><p>注意：云盘容量按需购买，因为服务器的云盘是按月付费</p><p><strong>在镜像市场将操作系统更换为宝塔 linux 面板</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/35.jpg" alt="chevereto" /></p><p>自定义实例登录密码，一会要用到</p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/36.jpg" alt="chevereto" /></p><p><strong>在实例管理界面，进行远程登录</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/37.jpg" alt="chevereto" /></p><p><strong>选择第一项网页登录</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/38.jpg" alt="chevereto" /></p><p><strong>输入 &quot;bt default&quot; 来获取宝塔面板的默认登录密码</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/40.jpg" alt="chevereto" /></p><p>记得放行安全组端口 8888，然后用 <code>公网IP:8888</code>  访问宝塔面板</p><p>剩下的步骤与腾讯云教程类似</p><h2 id="为域名添加https访问"><a class="anchor" href="#为域名添加https访问">#</a> 为域名添加 Https 访问</h2><p>打开你所购买域名服务商的控制台（这里以阿里云为例子）</p><p>在域名控制台 - 基本信息 - SSL 证书</p><p>用免费版就可以</p><p><strong>填写一些必要的信息，审核通过后下载证书</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/41.jpg" alt="chevereto" /></p><p><strong>这里因为我们云服务器安装的是 Nginx，所以下载该类型</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/42.jpg" alt="chevereto" /></p><p><strong>然后解压缩得到两个文件，一个 key，一个 pem，现在登录宝塔面板，复制证书密钥和内容到网站 - 设置 - SSL - 其他证书</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/43.jpg" alt="chevereto" /></p><p>保存后你的域名就可以使用 https 访问了</p><h2 id="ftp服务器搭建"><a class="anchor" href="#ftp服务器搭建">#</a> FTP 服务器搭建</h2><p>如果你购买的服务器自带的数据库空间不足的话，就要使用到 chevereto 图床专业版的外部存储功能<br />仪表盘 - 设置 - 外部存储 - 添加存储</p><p>搭建 FTP 服务器的方式应该有很多，这里介绍一下利用云服务器和宝塔面板搭建。</p><p><strong>原理：FTP 服务 + 域名解析</strong></p><h3 id="1-利用腾讯云轻量应用服务器价格参考50gb一个月34rmb-域名年付"><a class="anchor" href="#1-利用腾讯云轻量应用服务器价格参考50gb一个月34rmb-域名年付">#</a> 1. 利用腾讯云轻量应用服务器（价格参考 50GB / 一个月 34RMB + 域名年付）</h3><p>教程前面的部分与前文内容相同，不同点在于需要在宝塔面板额外安装一个 <code>Pure-Ftpd</code></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/28.jpg" alt="chevereto" /></p><p><strong>因为使用 chevereto 图床的外部存储功能需要将 ftp 服务器存储的图片映射到一个域名，所以要在宝塔面板里新建网站</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/29.jpg" alt="chevereto" /></p><p><strong>然后记得放行安全组端口</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/30.jpg" alt="chevereto" /></p><p><strong>然后将相关信息填到 chevereto 的外部存储设置中</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/23.jpg" alt="chevereto" /></p><p><strong>这样就成功将 chevereto 图床与腾讯云 FTP 服务器连接了</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/32.jpg" alt="chevereto" /></p><h3 id="2-利用阿里云ecs服务器价格参考200gb一个月50rmb-域名年付备案"><a class="anchor" href="#2-利用阿里云ecs服务器价格参考200gb一个月50rmb-域名年付备案">#</a> 2. 利用阿里云 ECS 服务器（价格参考 200GB / 一个月 50RMB + 域名年付备案）</h3><p>方法与前文腾讯云搭建 FTP 服务器相同</p><p><strong>记得放行安全组端口</strong></p><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/30.jpg" alt="chevereto" /></p><h2 id="chevereto图床基本设置"><a class="anchor" href="#chevereto图床基本设置">#</a> chevereto 图床基本设置</h2><h3 id="1-网站"><a class="anchor" href="#1-网站">#</a> 1. 网站</h3><p>推荐修改</p><ul><li>网站名称</li><li>网站标题</li><li>网站描述</li><li>默认时区</li><li>网站运营模式</li><li>网站隐私模式</li></ul><h3 id="2-用户"><a class="anchor" href="#2-用户">#</a> 2. 用户</h3><p>推荐修改</p><ul><li>开放注册</li></ul><h3 id="3-图片上传"><a class="anchor" href="#3-图片上传">#</a> 3. 图片上传</h3><p>推荐修改</p><ul><li>最大文件大小</li><li>缩略图大小</li><li>中等图片大小</li><li>水印</li></ul><h3 id="4-主页"><a class="anchor" href="#4-主页">#</a> 4. 主页</h3><p>推荐修改</p><ul><li>样式</li><li>封面图片</li><li>标题</li><li>段落</li></ul><h3 id="5-电子邮件"><a class="anchor" href="#5-电子邮件">#</a> 5. 电子邮件</h3><p>推荐修改</p><ul><li>发送名称</li><li>发件人的电子邮件地址</li><li>电子邮件地址</li></ul><h3 id="6-防洪保护"><a class="anchor" href="#6-防洪保护">#</a> 6. 防洪保护</h3><p>推荐修改</p><ul><li>防洪保护</li><li>以电子邮件通知</li><li>每分钟限额</li><li>每小时限额</li><li>每日限额</li></ul><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><p>chevereto 图床作为一个图片站来说还是很不错的，用来存放一些高清图片（壁纸，美图）等还是很不错的。不过搭建 chevereto 是需要一定的成本的，如果预算不是很多建议去找一些其他的公益图床。阿里云 ECS 是我认为最好的组合。</p><p><s>如果平时只是写写文章的话，我还是推荐使用 gitee 图床，上传之前记得用格式工厂压缩一下图片，压缩成 JPG 格式，可以极大程度避免图片过大的问题</s></p><p>Gitee 图床审查变得严格起来，出现了很多误封现象，这里建议使用 <code>Github仓库 + jsDelivr</code> 。后续会出教程。</p><hr /><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/Chevereto/about_me.png" alt="about_me" /></p>]]></content>
    
    
    <summary type="html">哪一个男孩子不想拥有一个属于自己的图床？</summary>
    
    
    
    <category term="零基础教程" scheme="https://blog.sakurasep.site/Shoka/categories/HowToDo/"/>
    
    
    <category term="云服务器" scheme="https://blog.sakurasep.site/Shoka/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="图床" scheme="https://blog.sakurasep.site/Shoka/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>《算法学习笔记》</title>
    <link href="https://blog.sakurasep.site/Shoka/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.sakurasep.site/Shoka/Study/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-22T11:26:54.000Z</published>
    <updated>2022-05-09T15:25:17.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章简介"><a class="anchor" href="#文章简介">#</a> 文章简介</h1><blockquote><p>作者：上杉九月</p><p>排版及发布：上杉九月</p></blockquote><h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>开一个讲解算法的栏目？我准备准备。</p><h1 id="正文"><a class="anchor" href="#正文">#</a> 正文</h1><h2 id="普通判断法"><a class="anchor" href="#普通判断法">#</a> 普通判断法</h2><h3 id="代码实现"><a class="anchor" href="#代码实现">#</a> 代码实现</h3><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXN</span> <span class="token expression"><span class="token number">10000000</span></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> pr<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">void</span> <span class="token function">Prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                temp<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            pr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">int</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    cin<span class="token operator">>></span>num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    </pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>pr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="埃拉托斯特尼筛法"><a class="anchor" href="#埃拉托斯特尼筛法">#</a> 埃拉托斯特尼筛法</h2><h3 id="定义"><a class="anchor" href="#定义">#</a> 定义</h3><p>埃拉托斯特尼筛法，简称埃氏筛或爱氏筛，是一种由希腊数学家埃拉托斯特尼所提出的一种简单检定素数的算法。要得到自然数 n 以内的全部素数，必须把不大于根号 n 的所有素数的倍数剔除，剩下的就是素数。</p><h3 id="图片演示"><a class="anchor" href="#图片演示">#</a> 图片演示</h3><p><img data-src="https://cdn.jsdelivr.net/gh/sakurasep/images@1.4/stduy/idea/1.gif" alt="" /></p><h3 id="代码实现-2"><a class="anchor" href="#代码实现-2">#</a> 代码实现</h3><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXN</span> <span class="token expression"><span class="token number">10000000</span></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> prime<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">void</span> <span class="token function">FindNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">int</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    cin<span class="token operator">>></span>num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token function">FindNum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    </pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="线性筛"><a class="anchor" href="#线性筛">#</a> 线性筛</h2><h3 id="原理"><a class="anchor" href="#原理">#</a> 原理</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL2Jsb2cvY2ljb3Mvbm90cHJpbWU=">洛谷用户 @学委的原理性证明</span></p><h3 id="代码实现-3"><a class="anchor" href="#代码实现-3">#</a> 代码实现</h3><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXN</span> <span class="token expression"><span class="token number">1000000</span></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> prime<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">bool</span> check<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">void</span> <span class="token function">FindNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>check<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            prime<span class="token punctuation">[</span><span class="token operator">++</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> temp <span class="token operator">&amp;&amp;</span> i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            check<span class="token punctuation">[</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>             <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">int</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    cin<span class="token operator">>></span>num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token function">FindNum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> temp<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        cout<span class="token operator">&lt;&lt;</span>prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><hr /><p><img data-src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5199/about_me.png" alt="" /></p>]]></content>
    
    
    <summary type="html">最新内容--质数筛选法</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.sakurasep.site/Shoka/categories/Study/"/>
    
    
    <category term="C语言" scheme="https://blog.sakurasep.site/Shoka/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="算法" scheme="https://blog.sakurasep.site/Shoka/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
